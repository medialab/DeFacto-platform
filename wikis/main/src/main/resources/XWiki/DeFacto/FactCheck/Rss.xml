<?xml version="1.1" encoding="UTF-8"?>

<xwikidoc version="1.4" reference="XWiki.DeFacto.FactCheck.Rss" locale="">
  <web>XWiki.DeFacto.FactCheck</web>
  <name>Rss</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Rss</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="XWiki.DeFacto.RssUtils"/}}

{{groovy}}
import com.rometools.rome.feed.synd.*;

def hql = "select doc.fullName, doc.title from XWikiDocument as doc, BaseObject as obj where obj.name = doc.fullName and obj.className = :class and doc.hidden = false order by doc.date desc";
def query = services.query.hql(hql);
query.setLimit(20)
query.bindValue('class', 'XWiki.DeFacto.FactCheck.FactCheckClass')
def results = query.execute();

def utils = new RssUtils();
def feed = utils.createFeed(results, services, xwiki);
def entries = feed.getEntries()
entries.each{ entry -&gt;
  def uri = entry.getUri();
  def page = xwiki.getDocument(uri);
  def object = page.getObject('XWiki.DeFacto.FactCheck.FactCheckClass');

  def pdate = object.getValue('pdate');
  entry.setPublishedDate(pdate);

  // Set enclosure
  def headerImage = object.getValue('headerImage');
  if (headerImage != '') {
    def attachment = page.getAttachment(headerImage);
    if (attachment != null) {
      def mimeType = attachment.getMimeType();
      def size = attachment.getLongSize();
      def headerImageUrl = xwiki.getAttachmentURL(uri, headerImage);
      def spaces = services.model.serialize(page.getDocumentReference().getLastSpaceReference(), 'compactwiki')
      def url = xcontext.getURLFactory().createAttachmentURL(headerImage, spaces, 'WebHome', "download", "", xcontext.context)
      def enclosures = new ArrayList();
      def enclosure = new SyndEnclosureImpl();
      enclosure.setUrl(url.toString());
      enclosure.setType(mimeType);
      enclosure.setLength(size);
      enclosures.add(enclosure);
      entry.setEnclosures(enclosures);
    }
  } else {
    def headerAudio = object.getValue('headerAudio');
    if (headerAudio != null &amp;&amp; headerAudio != '') {
      def enclosures = new ArrayList();
      def enclosure = new SyndEnclosureImpl();
      enclosure.setUrl(headerAudio);
      enclosures.add(enclosure);
      entry.setEnclosures(enclosures);
    }
  }

  // Set authors
  def authors = new ArrayList();
  def person = new SyndPersonImpl();
  def articleAuthors = object.getValue('authors')
  //def mediaPage = xwiki.getDocument(media)
  // TODO: check why the author element is not generated when setting the person's name instead of its email
  person.setEmail(articleAuthors);
  authors.add(person);
  entry.setAuthors(authors);

  // Set categories
  def categories = new ArrayList&lt;&gt;();
  def themes = object.getValue('themes')
  themes.each{ theme -&gt;
    def category = new SyndCategoryImpl();
    def themePage = xwiki.getDocument(theme);
    category.setName(themePage.displayTitle);
    categories.add(category);
  }
  def tagObject = page.getObject('XWiki.TagClass')
  if (tagObject != null) {
    def tags = tagObject.getValue('tags')
    tags.each{ tag -&gt;
      def category = new SyndCategoryImpl();
      category.setName(tag);
      categories.add(category);
    }
  }
  entry.setCategories(categories);
}
utils.printFeed(feed, out, xcontext, response)
{{/groovy}}</content>
</xwikidoc>

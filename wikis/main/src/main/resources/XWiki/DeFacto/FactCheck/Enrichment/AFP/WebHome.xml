<?xml version="1.1" encoding="UTF-8"?>

<xwikidoc version="1.4" reference="XWiki.DeFacto.FactCheck.Enrichment.AFP.WebHome" locale="">
  <web>XWiki.DeFacto.FactCheck.Enrichment.AFP</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>AFP</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>
{{attachments/}}</content>
  <attachment>
    <filename>factchecks-afp-medialab-20230316.json</filename>
    <mimetype>application/json</mimetype>
    <charset>UTF-8</charset>
    <author>xwiki:XWiki.Admin</author>
    <version>1.1</version>
    <comment/>
    <content>{
    "1": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/1500-euros-d-amende-pour-un-logement-a-plus-de-19-C-Une-sanction-theorique-inappliquee-et-quasi-inapplicable/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "1500 euros d'amende pour un logement à plus de 19°C ? Une sanction théorique, inappliquée et quasi inapplicable",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/1500-euros-d-amende-pour-un-logement-a-plus-de-19-C-Une-sanction-theorique-inappliquee-et-quasi-inapplicable/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32L887Y",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://www.demotivateur.fr/article/les-francais-qui-chauffent-leur-maison-au-dela-de-19-c-risquent-une-amende-de-1500-euros-31161"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/CriseDeRireOfficiel/posts/pfbid038MTtUVK6ddtk5Vm2YcGKXeuW8U5oXpQbxerM71us9fd4QjCp3UH1hgeT5KPAmSv4l"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/JusteMilieu0/posts/pfbid0ueqtMxAW3sM8DccnMxRJQ7J6zatbVCWJUr7XLoLM8F4W8SCTKjnwuLNbNFc7r6owl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/mapageamoioucommentlafilleestincapabledetrouver/posts/pfbid02DtKp4PGDTBDKz7Eg4y8zZdTcFX2aiZrtU8sFoS59Kawg3rPNd8V37vd6pVxvSpeul"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/pgcbon/posts/pfbid02LLhQK8VduEu12mgMUBYeUMbVsYnvAWGVNYN8qZUYynS7DgfLY2yK3UHDTvAvzz1yl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/tvlanguedoc/posts/pfbid02U3utu48jaRyYcoqvEWJQUwqQiFkMWJFAAKm3YMxznK5XSkgQLZXfAxdjmawSdymVl"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.mariefrance.fr/actualite/hiver-2022-une-amende-pour-les-francais-qui-chauffent-leur-interieur-plus-de-19-degres-667357.html"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32L887Y"
    },
    "2": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/29-des-jeunes-vaccines-contre-le-Covid-par-Pfizer-victimes-de-problemes-cardiaques-Attention-aux-interpretations-trompeuses-d-une-etude-thailandaise/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "29% des jeunes vaccinés contre le Covid par Pfizer victimes de problèmes cardiaques ? Attention aux interprétations trompeuses d'une étude thaïlandaise",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/29-des-jeunes-vaccines-contre-le-Covid-par-Pfizer-victimes-de-problemes-cardiaques-Attention-aux-interpretations-trompeuses-d-une-etude-thailandaise/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32HQ9BW",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "http://pgibertie.com/2022/08/17/une-etude-thailandaise-sur-les-ados-13-18-ans-montre-29-deffets-cardiovasculaires-deleteres-apres-la-2e-dose-de-pfizer/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://planetes360.fr/une-nouvelle-etude-thailandaise-a-revele-que-29-des-enfants-qui-ont-recu-le-vaxxin-arnm-de-pflzer-ont-subi-des-effets-cardiaques-par-la-suite/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/CStrateges/status/1558099908598681600"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Krieger66362259/status/1558099357454553088"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.epochtimes.fr/nouvelle-etude-29-des-jeunes-vaccines-contre-le-covid-par-pfizer-ont-souffert-de-problemes-cardiaques-2088005.html"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32HQ9BW"
    },
    "3": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/330-000-personnes-entrees-illegalement-en-Europe-en-2022-Attention-a-ce-chiffre-trompeur/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "330.000 personnes entrées illégalement en Europe en 2022 ? Attention à ce chiffre trompeur",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/330-000-personnes-entrees-illegalement-en-Europe-en-2022-Attention-a-ce-chiffre-trompeur/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.337976P",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://www.lesalonbeige.fr/330-000-immigres-clandestins-en-2022-dans-lunion-europeenne/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.337976P"
    },
    "4": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/60-millions-de-refugies-en-Europe-en-raison-des-sanctions-contre-la-Russie-Attention-a-cette-fausse-declaration-attribuee-a-Emmanuel-Macron/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "60 millions de réfugiés en Europe en raison des sanctions contre la Russie ? Attention à cette fausse déclaration attribuée à Emmanuel Macron",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/60-millions-de-refugies-en-Europe-en-raison-des-sanctions-contre-la-Russie-Attention-a-cette-fausse-declaration-attribuee-a-Emmanuel-Macron/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.328K2M7",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/anne.leclercq.9404/posts/pfbid02RMdefoU9EsYRqUhn63VBtqo4JAs5nVFtap4vkZPYNVjLwAm7gA4FDF5tQd8WNe5nl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0bUCecngvnNX2PcSLr2vMvQsQanWYmiSTjtQ5MomzuG8shLvTrguJmGThmSP2nzY5l&id=101628535852835"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.328K2M7"
    },
    "5": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/7-7-millions-de-beneficiaires-d-une-retraite-francaise-nes-a-l-etranger-Attention-a-ce-chiffre-tres-surevalue/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "7,7 millions de bénéficiaires d'une retraite française nés à l'étranger ? Attention à ce chiffre très surévalué",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/7-7-millions-de-beneficiaires-d-une-retraite-francaise-nes-a-l-etranger-Attention-a-ce-chiffre-tres-surevalue/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32K93XQ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/democratiedelabanane/posts/pfbid0TEBv5iDPJymRBW2Kt9Zqxm5Dp2A4GDowTcykFEGW1rLUASHwUKPixxUtkHW1z434l"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32K93XQ"
    },
    "6": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/70-milliards-d-euros-reverses-a-l-Etat-au-titre-des-taxes-sur-les-carburants-Un-chiffre-tres-surestime/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "70 milliards d'euros reversés à l'Etat au titre des taxes sur les carburants ? Un chiffre très surestimé",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/70-milliards-d-euros-reverses-a-l-Etat-au-titre-des-taxes-sur-les-carburants-Un-chiffre-tres-surestime/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32DH4GP",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Votezpourunlensois/posts/pfbid02M5WNwLiByzinXxHWJveuXsdJy1G3KqHvMtvWvgf2FBeM4WTUCG4GU8amHUzafzZZl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/alain.meyerabbatucci/posts/pfbid034ksbKPmZSoorY6VWDBat2F1jpc3TrL35dEexNvuE9pe1ykr5zXp4dBieJ8yy6DoAl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/aneriesdefilou/posts/pfbid08GSfEr2tdYY8zwgMYYPFeVvivQZWrpdL9UpW2aWzCgFXVqu1pAFjLtu8qYw4MCdSl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/max.douai/posts/pfbid07VLe99KyDBpafVS8TcavSfggnYfqbShWF8bEbwtJZWeQb1d5ePBRcQtxc5C3d9kDl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02ihEqXy4ufdM5v2sKyyCnpfoBLu5wXRk7Gmn8DVJBcf1mp95RURs6W2Yjm3HLxGCbl&id=100063665239695"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32DH4GP"
    },
    "7": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Amber-Heard-n-a-pas-cite-des-repliques-du-film-Le-Talentueux-Mr-Ripley-lors-de-son-temoignage-contre-Johnny-Depp/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Amber Heard n'a pas cité des répliques du film Le Talentueux Mr. Ripley lors de son témoignage contre Johnny Depp",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Amber-Heard-n-a-pas-cite-des-repliques-du-film-Le-Talentueux-Mr-Ripley-lors-de-son-temoignage-contre-Johnny-Depp/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.329T6E7",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://www.tiktok.com/@timonthegram/video/7094289485239782662?feed_mode=v1&preview_pb=0&share_item_id=7094289485239782662"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.329T6E7"
    },
    "8": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Apparence-brumeuse-glacons-qui-coulent-attention-ces-signes-ne-permettent-pas-de-savoir-si-son-verre-a-ete-drogue/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "\"Apparence brumeuse\", \"glaçons qui coulent\" : attention, ces signes ne permettent pas de savoir si son \"verre a été drogué\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Apparence-brumeuse-glacons-qui-coulent-attention-ces-signes-ne-permettent-pas-de-savoir-si-son-verre-a-ete-drogue/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32JC872",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/LeSnapEtudiant/photos/a.226216704573589/1130096890852228/?type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/LeSnapEtudiant/photos/a.226216704573589/1130096934185557/?type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/LeSnapEtudiant/photos/a.226216704573589/1130096980852219/?type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/LeSnapEtudiant/photos/a.226216704573589/1130097020852215/?type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/photo.php?fbid=469221065211058&set=a.119753756824459&type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/photo.php?fbid=469221118544386&set=a.119753756824459&type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/photo.php?fbid=469221125211052&set=a.119753756824459&type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/photo.php?fbid=469221171877714&set=a.119753756824459&type=3"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32JC872"
    },
    "9": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-Airbnb-ne-va-pas-cooperer-avec-l-Etat-francais-contre-les-baignades-privees-non-mixtes/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention, Airbnb ne va pas coopérer avec l'Etat français contre les baignades privées non mixtes",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-Airbnb-ne-va-pas-cooperer-avec-l-Etat-francais-contre-les-baignades-privees-non-mixtes/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9W24L3-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/AC.AdilCharkaoui/posts/pfbid02ibZTdRpdPctyN2LNLgL22jaURDBhWnGghuTjsvzFrEpXNV2HtrCBWqAGRrH5PgHMl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9W24L3-1"
    },
    "10": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ce-classement-des-villes-les-plus-criminelles-d-Europe-domine-par-des-metropoles-francaises/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ce classement des \"villes les plus criminelles d'Europe\" dominé par des métropoles françaises",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ce-classement-des-villes-les-plus-criminelles-d-Europe-domine-par-des-metropoles-francaises/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32A83V8",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/pierreyves.clais/posts/pfbid02nH4pSsy8CAMCLACs1yV8Zjwp1rATpQJkyo8M6pEbsUEjmpdHiwqFi1QovLemiCuxl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sandra.leger.5220/posts/pfbid0336ssGUzmFEEEseoxPzCoVJajajxsXSvwoXVQemZW7TZimVcbuH6MGK1bSV6cgqH9l"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32A83V8"
    },
    "11": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ce-faux-appel-du-president-ukrainien-a-voter-pour-Emmanuel-Macron/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ce faux appel du président ukrainien à voter pour Emmanuel Macron",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ce-faux-appel-du-president-ukrainien-a-voter-pour-Emmanuel-Macron/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.324M997",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Votezpourunlensois/posts/pfbid0hk6A85Tz7N9C7SFNH1NUDx7dyjSDiLfcojAN4FdwaU5Y6XZpNcRCrhDJJunT23yZl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.324M997"
    },
    "12": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ce-faux-courrier-appelant-a-signaler-les-refugies-ukrainiens-au-Royaume-Uni-a-l-ambassade-d-Ukraine/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ce faux courrier appelant à \"signaler\" les réfugiés ukrainiens au Royaume-Uni à l'ambassade d'Ukraine",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ce-faux-courrier-appelant-a-signaler-les-refugies-ukrainiens-au-Royaume-Uni-a-l-ambassade-d-Ukraine/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.338P93D",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/LetItShine69/status/1622230957666230274"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/lecridespeuples/status/1622235032428462080"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/jean.l.guerin/posts/pfbid0fseHZbNgQAC2nEuMc9G8VzYLo9KTSed8atdMqiiV8SjpAg9jUer4WTCkPCiB3pLZl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/servicesecredelaresistance/posts/pfbid0p1KfL9iPsH3JxvQ3Z19rniF4r64HypEeGGEiAzVsUqyMDfxKkrXhaddiZd4fSTdyl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/veronique.suche/posts/pfbid02FjgHvNXaCdbE3qkfwj1BpxpsJpM6R5PecZvu7vUnkdykJgQXtncK68u5ftzMNhmpl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.338P93D"
    },
    "13": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ce-photomontage-avec-Bernard-Henri-Levy/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ce photomontage avec Bernard-Henri Lévy",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ce-photomontage-avec-Bernard-Henri-Levy/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.3277976",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/1430477133722601/photos/a.1430549623715352/4276136579156628/?type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/TunisTribune/photos/a.10150410272687926/10152703935647926/?type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/chantal.lombard.3910/posts/pfbid02v1GKUdQCDvKKovGRwk2KvaCHv4KxNQwj7WkYRRbDCSbvPotZhNrieZo1Y1n7U2Frl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/icidzair/posts/pfbid0DPiKEWRRemYRYpqNMCSa1knR5tbYAPzYzmX5iUxqaJ7YPJ5B1LKFkz4ESJDWRy5Dl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/jocelyn.rosier/posts/pfbid02Agzg1DqaApQJomPzpkGoWvr532ouUXBGpK48PMB9w9u5ukYCZqx884aVGtFJUu2Fl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sylvie.roux.507027/posts/pfbid02Av6mwYQXaEysix8FED65MBu5tFiQmFvQdH2if6et8fGGnK9u45rfjzME9Ztd7vRpl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/tahar.aichoune.1/posts/pfbid0T8WYBAy735PuyodCNxRpQ44Lgz9yx2sz4sFdcZKyLKDP2dkCJKHeGxJbrXnDzQNfl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.3277976"
    },
    "14": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-affirmations-qui-comparent-les-IRM-cerebrales-des-enfants-ayant-eu-le-Covid-a-celles-de-personnes-atteintes-d-Alzheimer/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ces affirmations qui comparent les \"IRM cérébrales\" des enfants ayant eu le Covid à celles de personnes atteintes d'Alzheimer",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-affirmations-qui-comparent-les-IRM-cerebrales-des-enfants-ayant-eu-le-Covid-a-celles-de-personnes-atteintes-d-Alzheimer/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TD7CT-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/loeilofficiel/posts/pfbid0ARvceUaqVBeH3hnQxsFsUkpSidzSbptZz7Xhxbq4VwtsDGyVjA63WY2mAGoXbXM1l"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TD7CT-1"
    },
    "15": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-affirmations-sur-la-difference-de-coagulation-du-sang-des-personnes-vaccinees-et-non-vaccinees/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ces affirmations sur la différence de coagulation du sang des personnes vaccinées et non vaccinées",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-affirmations-sur-la-difference-de-coagulation-du-sang-des-personnes-vaccinees-et-non-vaccinees/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.322E9GK",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/JeMouth/status/1492225327560540161"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/VictorSinclair3/status/1492198758792282119"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/breitling.luisesarah.7/posts/pfbid02NY9Q3eGdJsNvMMeEFBNV6HS4f7HPktJbrHt6eiDy4jxvsGsukiTrkCtQnokFLhnql"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/thomas.effet2levier/posts/pfbid0wDGbKm5tjwY114ecwHW5nVnTXgYN2Rso6SouknDMoAEEmKx2BJLfuiGdJmKvaLVYl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.322E9GK"
    },
    "16": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-affirmations-sur-le-deremboursement-des-tests-PCR-pour-les-malades-du-cancer/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ces affirmations sur le déremboursement des tests PCR pour les malades du cancer",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-affirmations-sur-le-deremboursement-des-tests-PCR-pour-les-malades-du-cancer/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9R34L3-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/medic4allhuman/status/1456152909566066688"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/taratata____/status/1456157783485784068"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/bernard.elbhar.18/posts/pfbid0HHLifz4hpepmPFLstRyJEWCxp7ZJ9oqZURckxJdb23MAVcbsBCMYQ1AgACwNh6Kxl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/mamlito.pablito/posts/pfbid02KPyx6MjSx1mc3rH53FD1T7amFuz47nRmVUbxesMRwBC2eXd6K34Hv5bwQL1PYL2rl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/pascal.cinus.3/posts/pfbid029qCJt3KSg2Rw44WekbweixvBReXmS25hYTavLXrYWtTMmd9YTnDRyZ49uHZxfYdHl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9R34L3-1"
    },
    "17": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-affirmations-sur-le-rechauffement-et-les-modeles-climatiques/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ces affirmations sur le réchauffement et les modèles climatiques",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-affirmations-sur-le-rechauffement-et-les-modeles-climatiques/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32GP96F",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/sandra.leger.5220/posts/pfbid0xirau4k3T5xz3xWbRdVL7cZCPZZfcui5mint5GSutEHaueVXvV73fn3yMhCirtGal"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32GP96F"
    },
    "18": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-affirmations-trompeuses-sur-les-qualites-du-chanvre-industriel/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ces affirmations trompeuses sur les qualités du chanvre industriel",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-affirmations-trompeuses-sur-les-qualites-du-chanvre-industriel/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32GY72Q",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/aurore.claude.5074/posts/pfbid02G3b88qwiHyRjfjLqiahAEWjMskRnuRmUEar1r3hh51bgZu8CxxqWGLGJQsnSXmqNl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/barbara.avril.31/posts/pfbid0TTczjQQZfJi3ksRQNcGocFXYrhAjT7X6T4nvb7beMi4H6zBXiyYpYyLPdWDdqD2Cl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/clubtactic/posts/pfbid02o2XoNJiKqwWw83T3YapBGWi4cvUGGL8rwo2gfbvzuPwGpgYKjYJ6GreRwVpnSSX4l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/835638107350803/permalink/1086409782273633/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/jean.saulnier.16/posts/pfbid02h3u7nGpm3NJmZ2yARMPT8LGPdKmCp49ht2gaBaKWJshTaZTH1Zteu861XaBcqxZDl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/nelsonnhvc/posts/pfbid031eZrJnhei3zsTbyL1cWWCa46o3pc4iRLANdXVZWVKXxKuSxnhCR39nUYnaxTDCFcl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/rochet.alexandre/posts/pfbid02w3snw7H7U6hwh9vdp3CfpubyFDTiRHin1YghW7fAuAotP5xivG6tHc7ZQsbXaABEl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/standupfortheplanet/posts/pfbid0EiADm96ZfuCaKgWNpdigCjHN46Yq5YLmRwKXP5G5LPYgARULZKE9pA4J8mVf5mExl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32GY72Q"
    },
    "19": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-articles-qui-affirment-que-les-personnes-vaccinees-sont-dangereuses-et-doivent-etre-isolees-des-non-vaccinees/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ces articles qui affirment que \"les personnes vaccinées sont dangereuses et doivent être isolées des non-vaccinées\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-articles-qui-affirment-que-les-personnes-vaccinees-sont-dangereuses-et-doivent-etre-isolees-des-non-vaccinees/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RE2NC",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "http://reseauinternational.net/pr-christian-perronne-les-personnes-vaccinees-sont-dangereuses-et-doivent-etre-isolees-des-personnes-non-vaccinees/"
                    },
                    {
                        "@type": "Article",
                        "url": "http://www.zejournal.mobi/index.php/news/show_detail/24053/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://fr.sott.net/article/38625-Pr-Christian-Perronne-Les-personnes-vaccinees-sont-dangereuses-et-doivent-etre-isolees-des-personnes-non-vaccinees"
                    },
                    {
                        "@type": "Article",
                        "url": "https://legrandreveil.co/2021/09/19/les-personnes-vaccinees-doivent-etre-mises-en-quarantaine-et-isolees-de-la-societe-affirme-le-pr-perronne/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://olivierdemeulenaere.wordpress.com/2021/11/02/pr-perronne-les-personnes-vaccinees-sont-dangereuses-et-doivent-etre-isolees-des-personnes-non-vaccinees/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://planetes360.fr/pr-perronne-les-personnes-vaccinees-sont-dangereuses-et-doivent-etre-isolees-des-personnes-non-vaccinees/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://regisliber.wordpress.com/2021/09/17/les-personnes-vaccinees-devraient-etre-mises-en-quarantaine/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://resistance-mondiale.com/pr-perronne-les-personnes-vaccinees-sont-dangereuses-et-doivent-etre-isolees-des-personnes-non-vaccinees"
                    },
                    {
                        "@type": "Article",
                        "url": "https://resistancerepublicaine.com/2021/09/21/professeur-perronne-urgent-les-vaccines-sont-dangereux-pour-eux-et-pour-les-autres/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://strategika.fr/2021/11/03/pr-christian-perronne-les-personnes-vaccinees-sont-dangereuses-et-doivent-etre-isolees-des-personnes-non-vaccinees/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://t.me/AllianceNEH/600"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/FrangeLcomtesse/status/1434801644747862023"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Planetes360/status/1427639266390286350"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/autrement_votre/status/1427783235644362756"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.businessbourse.com/2021/08/17/pr-christian-perronne-nous-avons-un-gros-probleme-les-personnes-vaccinees-sont-a-risque-face-au-nouveau-variant-et-sont-a-meme-de-le-transmettre-donc-ils-doivent-etre-isoles-de-la-societe-les-v/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/jallatte/posts/pfbid0JA1ojFuERhhALmCPUmAD8FwgdT9LDcxkihH7qTPmSAbPSimEq2pVzTwV3Ytm8oLEl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RE2NC"
    },
    "20": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-publications-alarmistes-sur-le-don-de-sang-de-personnes-vaccinees-contre-le-Covid/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ces publications alarmistes sur le don de sang de personnes vaccinées contre le Covid",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-publications-alarmistes-sur-le-don-de-sang-de-personnes-vaccinees-contre-le-Covid/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32KU23F",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "http://anna-bellas.com/2022/10/03/confusion-de-transfusion-la-croix-rouge-americaine-prise-a-melanger-du-sang-vaxxe-avec-du-sang-non-vaxxe/"
                    },
                    {
                        "@type": "Article",
                        "url": "http://mirastnews.net/2022/09/27/confusion-transfusionnelle-la-croix-rouge-americaine-surprise-en-train-de-melanger-du-sang-vaccine-avec-du-sang-non-vaccine/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://cogiito.com/a-la-une/ils-ont-ose-la-croix-rouge-americaine-surprise-en-train-de-melanger-du-sang-de-vaccine-avec-du-sang-de-non-vaccine/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32KU23F"
    },
    "21": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-publications-reliant-une-campagne-de-prevention-sur-les-AVC-a-la-vaccination-anti-Covid-pour-les-enfants/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ces publications reliant une campagne de prévention sur les AVC à la vaccination anti-Covid pour les enfants",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-publications-reliant-une-campagne-de-prevention-sur-les-AVC-a-la-vaccination-anti-Covid-pour-les-enfants/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9U968B-8",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Bad.to.the.Bones.M.O/posts/pfbid048cmAYzi69VxWgsXt84Yvb92jmj1vnkewvcHc8PYaQwx6HB5b9gbjvLnTxgFAn2sl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/carole.berthiaume.10/posts/pfbid02kKAGBVnBuSgKSMu5CgaVx6AjcRYmKhmU9mKATAd5BfDTFu2Q7uDJeyTmMQ6Xf9Yel"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/demo.kratia.1023/posts/pfbid0Z8ZZjqfjundPQZBWS4WGaDAsxcPW3dk4y4RNQGqUSMsJXqFbTMJ5jsJeJWNuZpTsl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/nicodrum.fundehchann/posts/pfbid0BEn1Jf1FbRp2DTsp4f6ajsxMnobMt1MYtaoJyfovvTuEQFDNZp4a9hPqfZEGyoWjl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0JLArtsTAvXjy2WTPQgWPLUbhmbSGdg1Yx7C7Mo3tjGRMB9adneRHvhrCBtgrj47yl&id=100005925138389"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0sapbDz55vyKn4zVm7wR5QFHyjbYwtzGo2eiKHH6D9xQMRf9PVodjwtGPihRYa5U6l&id=100010551397248"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/yann.morlot/posts/pfbid0oPwPJVBR5PLeng3TfqKK8hu5oi1yJt1x8MAvqGpJtoL5hJqmbziLQdQRW2466ogYl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9U968B-8"
    },
    "22": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-publications-sur-d-horribles-accidents-qui-renvoient-vers-des-escroqueries/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ces publications sur d'\"horribles accidents\" qui renvoient vers des escroqueries",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-publications-sur-d-horribles-accidents-qui-renvoient-vers-des-escroqueries/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.322Y4RP",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/frederic.nollevaux.9/posts/pfbid02KhTSn28VKzAo3BHGiNEnq8PtThbUs2fJdvJB6WyaZs2A5cWs4tfLH4Bcdv9v4ZUDl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/139093906178009/permalink/5168922366528446/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/279758205516986/permalink/2058376620988460/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/320356185891666/permalink/675490063711608/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/470907276291395/permalink/4877504765631602/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/779375172188003/permalink/4995679660557512/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.322Y4RP"
    },
    "23": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-publications-sur-des-soldats-ukrainiens-decedes-en-heros-sur-l-ile-des-Serpents/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ces publications sur des soldats ukrainiens décédés en \"héros\" sur l'île des Serpents",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-publications-sur-des-soldats-ukrainiens-decedes-en-heros-sur-l-ile-des-Serpents/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.324B4BB",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/BrittiaGUIRIEC/status/1497188575238103078"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Chalgoumimi/status/1497107737242583041"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/L_ThinkTank/status/1496984734244560898"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Lucius_Gellius/status/1497160771159142430"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/PoliceSCSI/status/1497214732008308737"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/belliveritas/status/1497202686994915329"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/ptiberry/status/1497079536625717248"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.324B4BB"
    },
    "24": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-publications-trompeuses-qui-mettent-en-garde-contre-la-vaccination-anti-Covid-pour-les-femmes-enceintes/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à ces publications trompeuses qui mettent en garde contre la vaccination anti-Covid pour les femmes enceintes",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-ces-publications-trompeuses-qui-mettent-en-garde-contre-la-vaccination-anti-Covid-pour-les-femmes-enceintes/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RQ9RZ-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "http://reseauinternational.net/2-433-morts-foetales-dans-le-vaers-plus-de-morts-foetales-au-cours-des-11-derniers-mois-quau-cours-des-30-dernieres-annees/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://planetes360.fr/le-nombre-hallucinant-de-2-433-morts-foetales-dans-le-vaers-plus-de-morts-foetales-au-cours-des-11-derniers-mois-quau-cours-des-30-dernieres-annees/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://resistance-mondiale.com/2-433-morts-foetales-dans-le-vaers-plus-de-morts-foetales-au-cours-des-11-derniers-mois-quau-cours-des-30-dernieres-annees"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RQ9RZ-1"
    },
    "25": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-cette-citation-parodique-sur-les-trottinettes-attribuee-a-Elisabeth-Borne/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à cette citation parodique sur les trottinettes attribuée à Elisabeth Borne",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-cette-citation-parodique-sur-les-trottinettes-attribuee-a-Elisabeth-Borne/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32AG29E",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Actualitesdiverses/posts/pfbid0Ut5JkREQaYEkZrFc21actNuL9RZPkVLWb9bRqxEgGCv1We4VjbR2QLKBv4jP4PCEl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/OppositionaMacron/posts/pfbid0L7bMr2pqvqmhQHr3Z8xC5JqACMkVx8hJhaorWHu9UedDoSyzmarJAPkMF5QkAREil"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/angepapillons/posts/pfbid0UksGvH4P9Wf69oSgRvcS3MZZAyEVNDmCfj7qoRQKGF1AMgc5kT6em8eH2EhS34cgl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/aurelien.pourlavie/posts/pfbid05Qt2ubrZDkrqJ61fJxTETCeb5uxBr2kP41puWsxxCqseUDoH5bcXte551RwVcuaal"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/fil.baud/posts/pfbid02oQvJqrS8ANa7u4zLnqRFDouZWicGv9q6GS3acATXpaMK2VyEys8ksc4mnmuM7FU2l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/gorsse/posts/pfbid02zM6xDypV3R45vf4J9DKgxQkKrayq7ufiL2j1Lx48Y2UozjBoy7wjbSBsHRQQEx4ml"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/122308931507609/permalink/1227559390982552/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/2604434999844029/permalink/3256010728019783/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/567066521116911/permalink/750226519467576/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/laurent.guyon.31/posts/pfbid0wqrX8RHHuMKbRq6kCwzStaFqhdY427zGjTKfAMd5qm1VbApDDqzGbWRrTN3D8BoZl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/pascal.philippe.96/posts/pfbid02KDHE1jQdotxTPBEajzjXNR8cu4Fj4EqrqgfFqZa6KJgKePAaddaTNoQgpQSbWaCkl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/patrick.riviere.104/posts/pfbid028AsZFHeDrEFjUuLkRf7hnSQ2RkUKkynu9HkVBR5CCh2WYrqdfToY5cm6bCjvKwkNl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid026EAgC8komipfVBgwAT7Mi3kG9Yfpu2tN5zSv91pxBuiZ33oNBAcYWLPTNK2ZnzzMl&id=104493312158009"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0vN8D4ZTJySiwBU2oxzTaqmNStGGac9bDxafCDk9u2caCsSk9JMHuam5paM12L9atl&id=109248561590804"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/rv.dekeyne/posts/pfbid0L7V2Tq5512CvmidLnR6VBrw4heS1sVyyzrAdZUbSKt6hAUTi1XNmHp12CxCm1PSVl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sophie.martin.946/posts/pfbid02vqKMuoV2hmLwUgcC68ynY4ukk3Esu92wA8YSU7YwzFcrwUhSkLjevAL2rs8gJqGql"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/stephane.guery.7/posts/pfbid0zESdLqgPqwtZBHefuJDKy8NwFSAacsWRUDUyhz7ty8Lw4XGdVtxHk5JGiEYdLR8rl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sylvie.chopin.982/posts/pfbid02MRVXzRpwsoZs7kwmtpccrkBfMzWSycdysuHppDb42ee7Z1ZYNTAmRtkGBjYEF8Vvl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/yves.jeanroy/posts/pfbid02cfmTzfZCivnkYAciBUCdsYy8njjZakWXGzBXMheYav4kVks2c7wBbF5fzNXZXxwHl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32AG29E"
    },
    "26": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-cette-fausse-campagne-de-vaccination-contre-le-Covid-19-et-la-grippe-illustree-par-une-photo-de-bebe/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à cette fausse campagne de vaccination contre le Covid-19 et la grippe illustrée par une photo de bébé",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-cette-fausse-campagne-de-vaccination-contre-le-Covid-19-et-la-grippe-illustree-par-une-photo-de-bebe/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32NM467",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Ilangabet/status/1591954543369408512"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/michele.francois.5855/posts/pfbid0C3X1iAPh6ndsoWjUgcZKy1EnSGvGAadcPcBPRHeSkVBBqzFbdQ1Vf3V3PdySeaL5l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/patakes.sekatap/posts/pfbid054ZshuUUYa87LYDA2PuE35AZJrAHAfTknrAMua7Z6Qjb1bF1XoeNtXWjL2u4CPQrl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02eCEA4ptehm8a27KaXefstdibeMxRgVe4LtDz89g335ey5u4bREoJZux2P7Qm1E93l&id=100009206178484"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0TxLtQhuHpgan7wqapCzt2YeXZ1HYpmxQuf9hu936eD88AfxJNtrZs9qXvfgnFPALl&id=100086211960314"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32NM467"
    },
    "27": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-cette-fausse-liste-de-prenoms-refuses-par-l-etat-civil-en-2021/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à cette fausse liste de prénoms \"refusés\" par l'état civil en 2021",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-cette-fausse-liste-de-prenoms-refuses-par-l-etat-civil-en-2021/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.323P4EJ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Jesuissurliste/posts/pfbid02oQoyTegMEPhCsFFyDxxhieZAFbBQCbCJM4f5s1kmrmwrZwEHXF77QUxN6i6T255vl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/PiedsCarres/posts/pfbid02XCcxttAau6ohaHnFJKFiZYdADPWufKvQYhRcAngPDKvvFZmpYWWjCLYwmtKroWrWl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.323P4EJ"
    },
    "28": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-cette-publication-sur-des-bananes-de-Somalie-contenant-un-ver-helicobacter/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à cette publication sur des \"bananes de Somalie\" contenant un \"ver helicobacter\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-cette-publication-sur-des-bananes-de-Somalie-contenant-un-ver-helicobacter/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RP2KQ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/Danielle63/posts/pfbid02iF2dfKvzrpNYc7dxQQAXpTCRwyS3ynxumte1HC6sd4tjf3J4xuW4GhkN8K7nWbGGl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RP2KQ"
    },
    "29": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-cette-video-virale-du-medecin-Robert-Malone-sur-la-vaccination-des-enfants/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à cette vidéo virale du médecin Robert Malone sur la vaccination des enfants",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-cette-video-virale-du-medecin-Robert-Malone-sur-la-vaccination-des-enfants/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9UZ78K-2",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://anthropo-logiques.org/avant-que-votre-enfant-ne-soit-injecte-declaration-du-dr-robert-malone-sur-les-vaccins-covid-pour-enfants/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://app.videas.fr/embed/246ba987-e800-4164-9552-2b20f6d3181b/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://crowdbunker.com/v/BZvuIkK2BB"
                    },
                    {
                        "@type": "Article",
                        "url": "https://crowdbunker.com/v/gnLSeO1dt4"
                    },
                    {
                        "@type": "Article",
                        "url": "https://crowdbunker.com/v/x2kSQ1RJHj"
                    },
                    {
                        "@type": "Article",
                        "url": "https://jematerne.com/2021/12/17/avant-que-votre-enfant-soit-injecte-lisez-cet-avertissement-de-linventeur-dr-robert-malone/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://latableronde.over-blog.com/2021/12/les-vaccins-covid-representent-un-danger-pour-vos-enfants.html"
                    },
                    {
                        "@type": "Article",
                        "url": "https://lemediaen442.fr/linventeur-de-la-technologie-arnm-robert-malone-alerte-les-parents-contre-les-vaccins-anti-covid/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://mobile.agoravox.tv/actualites/sante/actualites/sante/article/dernier-avertissement-du-dr-robert-92264?fr=operanews"
                    },
                    {
                        "@type": "Article",
                        "url": "https://odysee.com/@La_v%C3%A9rit%C3%A9_excite_la_col%C3%A8re:2/Dr-R.Malone---Voulez-vous-vraiment-que-votre-enfant-fasse-partie-de-lexpe%CC%81rience-la-plus-radicale-de-lhistoire-de-lhumanite%CC%81:7"
                    },
                    {
                        "@type": "Article",
                        "url": "https://odysee.com/@LeLibrePenseur.org:2/video_2021-12-16_22-21-41:8"
                    },
                    {
                        "@type": "Article",
                        "url": "https://odysee.com/@ivermectine-covid.ch:5/malone_fr:f"
                    },
                    {
                        "@type": "Article",
                        "url": "https://reinfovf.com/video/inventeur-technologie-arnm-robert-malone-alerte-les-parents-contre-les-vaccins-anti-covid--11361.html"
                    },
                    {
                        "@type": "Article",
                        "url": "https://rumble.com/vqup9n-le-crateur-du-vaccin-arn-met-en-garde-des-dangers-et-des-effets-irrversible.html"
                    },
                    {
                        "@type": "Article",
                        "url": "https://rumble.com/vr2ves-inventeur-de-la-technologie-arnm-robert-malone-alerte-les-parents-contre-le.html"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/BouchraAwake/status/1471321957069164551"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/france_soir/status/1471527477193367558"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.anti-k.org/2021/12/17/robert-malone-son-plaidoyer-contre-la-vaccination-des-enfants/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.challenge.ma/coronavirus-linventeur-de-la-technologie-arnm-deconseille-la-vaccination-des-enfants-228863/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.crashdebug.fr/robert-malone-son-plaidoyer-contre-la-vaccination-des-enfants-francesoir"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/FranceSoir/posts/pfbid0xhKuYEBCTR15UUG5F1spsxoWL9KBanHjqaqGcUaVsKP6nWt2Xonumxq3omD5pwRdl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/aratai.org/posts/pfbid038DvrVjskQvxSXps8aibgiSLHT8yEvoJxYUDrLjUQ865H1Df5KmrtNi2Y4XX9quBNl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/cecile.zundel/posts/pfbid034H8jX9huUo5Xr6t7ZTKp2nou13LCNykChvku4dMcEDKj6E4Ti8AfiefnjyPGdQtRl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/damien.charbonier.videaste/posts/pfbid0ozEJ4tXYkGFdGBCFRgiEagv3S8mP3tFXXKGQwNq8mSEA7dwDb52DoJ3b8kwVNq7Ml"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/dressbebeshannou/posts/pfbid033nX9npKrQaYgqMGZibtWivYSmShgjSmns5gVATqn7QY3oq7r2dTnZxonYaS2dctGl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/myriam.princess/posts/pfbid0QcVhvyFKy2Cvb1cjzJtDXHy8rUVvTKcRsk6XY6TyvmHq4FRc7gBnVaWYcEV3fau2l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/patrickgiani.jupitair/posts/pfbid0nBc9LjVTNGcugNWsLMYMNQHxKsNV9SZUHr2baoAe2Fac7rqk79hpojpYwbbFGWYRl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/virginie.vanlierde/posts/pfbid0UHthvyzwzwNXj5iGS7U19vxZn2xMpKNPY3jya6cFaVri17maHHpbvkgACuKrGKu2l"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.francemediasnumerique.net/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.francesoir.fr/politique-monde/robert-malone-son-plaidoyer-contre-la-vaccination-des-enfants"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.lelibrepenseur.org/%E2%9A%A0%EF%B8%8F-alerte-du-dr-malone-inventeur-de-la-technologie-arnm-4mn/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.operanewsapp.com/fr/fr/share/detail?news_id=f6ac0e36cd1a112de4a63442ad283f57&news_entry_id=1ab44286211222fr_fr&open_type=transcoded&from=newseu&request_id=share_request"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.tiktok.com/@ashlaure111/video/7041539833478548742"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9UZ78K-2"
    },
    "30": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-l-utilisation-des-metadonnees-du-discours-de-Vladimir-Poutine-annoncant-l-invasion-de-l-Ukraine/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à l'utilisation des métadonnées du discours de Vladimir Poutine annonçant l'invasion de l'Ukraine",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-l-utilisation-des-metadonnees-du-discours-de-Vladimir-Poutine-annoncant-l-invasion-de-l-Ukraine/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.323U8YG",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/FranceNews24/status/1496825753140436994"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/victor.simon.315/posts/pfbid02UkYBsDFo6ERkpn81vc3mby7S5QzKwrkQrDpNWmtdGjx8JALe6fduz6dZNpqUrfLGl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.323U8YG"
    },
    "31": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-l-utilisation-trompeuse-de-ce-graphique-sur-la-contribution-de-la-France-aux-emissions-mondiales-de-CO2/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à l'utilisation trompeuse de ce graphique sur la contribution de la France aux émissions mondiales de CO2",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-l-utilisation-trompeuse-de-ce-graphique-sur-la-contribution-de-la-France-aux-emissions-mondiales-de-CO2/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32N38C2",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/AtomWatcher235/status/1585664500799344650"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/DominiqueReynie/status/1586065170383572997"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/malhama_de/status/1588120722802905089"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/larroumec/posts/pfbid02Yq64TRejn72X3hjn5rqCwZx6m2D3LGszo6EZdE4aKoSgRzZmNmceT7mkXT5iWeAdl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/magloudestrees/posts/pfbid02iD4cmgM49UiZ1cWej4pgiuaD1cJvmd28E6U7k1NAoTtjQhq9tQsfRSysDLBHu19Cl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32N38C2"
    },
    "32": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-l-utilisation-trompeuse-faite-par-Martine-Wonner-de-la-base-de-pharmacovigilance-americaine/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention à l'utilisation trompeuse faite par Martine Wonner de la base de pharmacovigilance américaine",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-a-l-utilisation-trompeuse-faite-par-Martine-Wonner-de-la-base-de-pharmacovigilance-americaine/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VH64X-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/fabienne.degeyter.1/posts/pfbid02f57tTGbdKdqo4TcQUs1hZhpF52H9WNYNihDe9N6fn6hhTZzTBP2rRAMNTbhDKDNPl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VH64X-1"
    },
    "33": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-affirmations-de-Francis-Lalanne-sur-la-vaccination-anti-Covid/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention aux affirmations de Francis Lalanne sur la vaccination anti-Covid",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-affirmations-de-Francis-Lalanne-sur-la-vaccination-anti-Covid/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VX8T2-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/christian.jacquiau/posts/pfbid02Q3QQuaJZ5YxkGLvimwi7nB2oPzqheCUZgrS1AUXsVmgV2WpD571hwZX4QAQV7URel"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VX8T2-1"
    },
    "34": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-affirmations-de-ce-medecin-sud-africain-qui-pretend-que-le-vaccin-empoisonne-la-population/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention aux affirmations de ce médecin sud-africain qui prétend que le vaccin \"empoisonne\" la population",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-affirmations-de-ce-medecin-sud-africain-qui-pretend-que-le-vaccin-empoisonne-la-population/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TT6V9-3",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://cogiito.com/societe/le-veritable-agenda-un-medecin-de-premier-plan-affirme-que-les-vaccins-contre-le-covid-sont-intentionnellement-concus-pour-reduire-la-population-mondiale/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://mobile.twitter.com/chadaly5/status/1464562608443375617"
                    },
                    {
                        "@type": "Article",
                        "url": "https://odysee.com/@LeFrexit:3/LE-M%C3%89DECIN-SUD-AFRICAIN-DR-SHANKARA-CHETTY-PARLE-D'Un-PLUS-GRAND-PLAN-part5_1:8"
                    },
                    {
                        "@type": "Article",
                        "url": "https://planetes360.fr/a-lire-en-urgence-vaccin-injection-letale-un-medecin-urgentiste-de-premier-plan-fait-le-recit-glacant-dune-maladie-inhabituelle-provoquee-par-le-vaccin/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://t.me/STOP_Masques_Vaccins_National/22447"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.marseillenews.net/un-vaccin-covid-destine-a-reduire-la-population-mondiale-sans-que-personne-ne-sen-doute-declare-un-medecin-de-premier-plan.html"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TT6V9-3"
    },
    "35": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-articles-qui-recommandent-l-argent-colloidal-pour-se-soigner/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention aux articles qui recommandent l'argent colloïdal pour se soigner",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-articles-qui-recommandent-l-argent-colloidal-pour-se-soigner/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9T83EK-4",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://www.argent-vital.com/content/argent-colloidal-utilisation-et-dosage"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.argentcolloidal.fr/argent-colloidal-guerir-cancer/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Etsionchangeaitdeviemaintenant/photos/a.1790847847869563/1820953178192363/?type=3"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9T83EK-4"
    },
    "36": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-assertions-trompeuses-de-Christian-Perronne-sur-la-vaccination-anti-Covid-devant-des-deputes-luxembourgeois/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention aux assertions trompeuses de Christian Perronne sur la vaccination anti-Covid devant des députés luxembourgeois",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-assertions-trompeuses-de-Christian-Perronne-sur-la-vaccination-anti-Covid-devant-des-deputes-luxembourgeois/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.9X68P6",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://legrandreveil.co/2022/01/13/le-professeur-perronne-invite-au-parlement-du-luxembourg-sexprime-sur-le-vaccin/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://odysee.com/@L'%C3%A9veil-fait-la-force:a/Pr-Perronne:f6"
                    },
                    {
                        "@type": "Article",
                        "url": "https://odysee.com/@chercherLaVerite:c/le-professeur-perronne-au-parlement-du:1"
                    },
                    {
                        "@type": "Article",
                        "url": "https://odysee.com/@cielvoile:4/perronne:c1"
                    },
                    {
                        "@type": "Article",
                        "url": "https://rumble.com/vsix1n-le-professeur-perronne-invit-au-parlement-du-luxembourg-sexprime-sur-le-vac.html"
                    },
                    {
                        "@type": "Article",
                        "url": "https://rumble.com/vsjm63-wow-la-bombe-de-christian-perronne-.html"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/AutrementVue2.0/posts/pfbid036CXaYdtvaJm5QrYYc1aTTCE2ojdYn5XYe5N6HK9jraswynCPNWQUvSY5593Qr7hpl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/Crystale87/posts/pfbid02FDRitEU13Rszr6AyYtKTrre822pGmkCZPDZzDvhNWZkkhWVDiTCXPM7BAKxyhNrCl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/Dedsecvirus/posts/pfbid02nHqA8JFYhEAL25YzkZVUwGkJvF4q5rGcy4GE4fmiNYGx9B5bgatAC5qdxtM71JyJl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/NeoSalv/posts/pfbid02zQNyi4Titui8nHHKsphqp1PD7c3gzSjgcSwsDYoECWtNy4iAsFz1kxw5gkCyKFXUl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/TANRESIVEVO/posts/pfbid02yqQ46rXnXWnucfyT2KRTiz8LJsHwdFZbr3qaSZoDkb8YfPRN9cRy4jjgwwXgbaecl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/gardonsnoslibertes/posts/pfbid02FXLXfUF3Hwt4ChiyHeQ6Tf6cX96BgA7CzvUzmrLvY2EcJkDDPWvYahwBdQp6obf6l"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/liberteetreflexion/posts/pfbid0aixHbJB5JryNKGKpc3RyhzzLsDyv4TmJ13ubMGLKpJGZeDFyFzhn5WS5pYG2S5sql"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/maite.roux/posts/pfbid02N7nsgSxtHWfrLfnLER2bobvkAyW5ikkupU1vk3FEwVSrA1cpk9LYjwXVNtRUXjmNl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0A1u6RtYRF9LoWQQMQeQsT9Q6vJuUnpypVVXgwNTBKtuaXk9b8PxAr7mMLp38ssbkl&id=2175995052656178"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0QWbfG2VVqGnrTPH7Hbu3wxdpcZR7YWc8xk7jcPFbZxbhtv83YMrrdNrw6fVzW6Ggl&id=586861078366835"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.youtube.com/null"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.9X68P6"
    },
    "37": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-interpretations-trompeuses-d-un-discours-du-directeur-general-de-l-OMS-sur-la-vaccination-des-enfants/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention aux interprétations trompeuses d'un discours du directeur général de l'OMS sur la vaccination des enfants",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-interpretations-trompeuses-d-un-discours-du-directeur-general-de-l-OMS-sur-la-vaccination-des-enfants/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9V73YE-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/LoudoP/status/1473963833576366081?t=FekZH8mXb2rHremCfNo2ug&s=19"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/andrebercoff/status/1473742905118449667"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/strategieduchoc/status/1473702698159648768"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/1716578281900584/permalink/3782880135270378/"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/laurent.joyeux.33/posts/pfbid02w9LUe1Nk3ireB5YarRwN6ir8t95dcg3DT1daqvMxBDef6KUd1WYYvP8ces94V7arl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/stephanie.herault.52/posts/pfbid0PfEdfezU3y6fUW1eGhiKAzro9sor2CNogUh2kLtNDPa1ADQU2ethJjkSnjmpqo8Cl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9V73YE-1"
    },
    "38": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-interpretations-trompeuses-de-ce-document-sur-les-patients-vaccines-en-reanimation-au-centre-hospitalier-d-Haguenau/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention aux interprétations trompeuses de ce document sur les patients vaccinés en réanimation au centre hospitalier d'Haguenau",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-interpretations-trompeuses-de-ce-document-sur-les-patients-vaccines-en-reanimation-au-centre-hospitalier-d-Haguenau/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VM6M7",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Carterj37919661/status/1472175435568095235"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/MohamedTahiri_/status/1472189041600835584"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/hellbet/status/1472256802372915203"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/aroutioun.karapetian/posts/pfbid0WkrA2GwwEcQcT5D2PcqemFNV7mQovdrg6KpQGowMpB4nAgCKd3sjy8RjDpBCphWvl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/frederic.tellier.21/posts/pfbid067wfQZziSwcvVExQRYLfNF8puBJ23PzHBRqaftfdQGP7yTProEkaSux8Rf3waUpil"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/linfointerdite/posts/pfbid02L1FtjpWep6bvoFrwqXAHvGHqfPmgSibfEwarpy3cFAYBC9scvtvMUSdDEumXe1D1l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02Ke54UW6Ni2oxCSS99tapNJxRpiLGrpkKTyiDvn1h4U56PCamD5SLxzxKKVMA1ifgl&id=1734885230060892"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VM6M7"
    },
    "39": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-interpretations-trompeuses-des-chiffres-de-ce-rapport-de-l-ATIH/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention aux interprétations trompeuses des chiffres de ce rapport de l'ATIH",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-aux-interpretations-trompeuses-des-chiffres-de-ce-rapport-de-l-ATIH/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RR7HP-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://blogs.mediapart.fr/edition/le-travail-en-question/article/111121/la-covid-19-en-2020-cetait-2-des-hospitalisations"
                    },
                    {
                        "@type": "Article",
                        "url": "https://odysee.com/@francesoir:2/MEDupontATIH:e"
                    },
                    {
                        "@type": "Article",
                        "url": "https://resistancerepublicaine.com/2021/11/12/blachier-en-est-baba-en-2020-seulement-2-des-hospitalisations-etaient-liees-au-covid/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/herstalle/status/1458727704229027840"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/CRV.lesite/posts/pfbid0y9s8ziDXtPKPTe5kbiPtG6ApiU7YohMBnUnLtGrMgMNRJarEJJJYn6b8gaQmNgFxl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/FranceSoir/posts/pfbid03vw2e6svbLgrN7cQ1JMLQvgx2Hn4Fmj8BRpHaqGAPYQXS6mkixzThMzCe9iqi1DWl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/LeLibrePenseur.org/videos/914976699140496/"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/PourdireVrai/posts/pfbid0taV4nEDBxAa8tcaSLFYadZqPYE6A2CJYbTv2tWDMyYis7nNfQrK7bLzf77Xk9JRXl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/magazine.nexus/posts/pfbid02XZb9q2iQz1gsS3NRr6gwQkb7C9kM1xXMe2tCCr3upu4iyRV7LwKQ7L765L9mMX8Bl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/maxime.nicolle/posts/pfbid033ZR3rVku18tvA5YS6E4S2f7hrZWGpsTb3vaoqrYD3xkSzX6BrFMDs2ELWnhv3L5al"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RR7HP-1"
    },
    "40": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-ces-experiences-du-Dr-Franc-Zalewski-ne-prouvent-pas-qu-il-y-a-une-forme-de-vie-dans-le-vaccin/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention, ces expériences du \"Dr. Franc Zalewski\" ne prouvent pas qu'il y a \"une forme de vie\" dans le vaccin",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-ces-experiences-du-Dr-Franc-Zalewski-ne-prouvent-pas-qu-il-y-a-une-forme-de-vie-dans-le-vaccin/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TA89U-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "http://aulnaycap.com/2021/10/16/le-docteur-zalewski-decouvre-une-forme-de-vie-dans-le-vaccin-cominarty-de-pfizer/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://mediazone.zonefr.com/videos/la-chose-trouv%C3%A9e-dans-les-vaccins-contre-le-covid-433"
                    },
                    {
                        "@type": "Article",
                        "url": "https://odysee.com/@cQfd:7/La-Chose---Dr-Franc-Zalewski---Sous-Titrage-en-Fran%C3%A7ais:1"
                    },
                    {
                        "@type": "Article",
                        "url": "https://planetes360.fr/vaccin-le-docteur-franc-zalewski-fait-une-revelation-choquante-une-nouvelle-etrangete-observee-au-microscope-dans-le-vaccin-pfizer/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://rumble.com/vov7hj-vostfr-oeufs-avec-tentacules-colores-dans-votre-plat-injectable-de-votre-ma.html"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.cielvoile.fr/2021/10/franc-zalewski-confirme-la-decouverte-du-dr-carrie-madej.html"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TA89U-1"
    },
    "41": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-cet-article-annoncant-que-le-PDG-de-Pfizer-n-est-pas-completement-vaccine-date-de-mars/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention, cet article annonçant que le PDG de Pfizer n'est pas complètement vacciné date de mars",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-cet-article-annoncant-que-le-PDG-de-Pfizer-n-est-pas-completement-vaccine-date-de-mars/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TA7HR",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0aZ1uC68gfddV9vAZcVw7GTsB7aPzZvf84eW8TW2SeB4G59QPmyuPmNq2D8nEi7xul&id=1353729974672757"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TA7HR"
    },
    "42": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-cet-homme-a-truque-sa-photo-pour-faire-une-blague/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention, cet homme a truqué sa photo pour faire une blague",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-cet-homme-a-truque-sa-photo-pour-faire-une-blague/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TN27F-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0n6N8QEuNeVSTxJshpP9GVQ3x6Jr6baTDdTNhKBBXdqE8QjyP8e1bKS3hpfK88dySl&id=100044283797100"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TN27F-1"
    },
    "43": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-les-CDC-americains-recommandent-le-vaccin-anti-Covid-pour-les-ecoliers-mais-ne-peuvent-pas-le-rendre-obligatoire/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Attention, les CDC américains recommandent le vaccin anti-Covid pour les écoliers, mais ne peuvent pas le rendre obligatoire",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Attention-les-CDC-americains-recommandent-le-vaccin-anti-Covid-pour-les-ecoliers-mais-ne-peuvent-pas-le-rendre-obligatoire/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32M23NT",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/AlexSofamous/status/1582825818333491200"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/BanounHelene/status/1582676276347035655"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid027xRSAwxpBCSjSiU8AKuCoj5mE7qPxq2WvBd73qVAKXfTM75Srz9Nwp78vhafhK9ml&id=100008578081088"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32M23NT"
    },
    "44": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Canicule-non-ces-cartes-ne-montrent-pas-que-les-medias-veulent-faire-peur-en-2022/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Canicule : non ces cartes ne montrent pas que les médias veulent faire \"peur\" en 2022",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Canicule-non-ces-cartes-ne-montrent-pas-que-les-medias-veulent-faire-peur-en-2022/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32EW9UW",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/arbredesprit/posts/pfbid07z4WPDBbXuGnj8yjJfjw2mxVRxmyN3ZpWBYhNNfUY12zeNomHGdWQTffcULpLkf8l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/lemagbylodela/posts/pfbid0h9MtPdTetcnBCPAyUcfFR1aEjSkTyNYSLYahMn5vYYvsiyX4MxKTAcMsRjT9Z578l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sebastiaan.roose/posts/pfbid0TA3DY1Xx2vHjqwqJg8u4TsXCxvYeL9pY7DCXshiHGXU5LpZBsffBL77SWVjQDxAcl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32EW9UW"
    },
    "45": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ce-calcul-cense-prouver-une-augmentation-des-malaises-cardiaques-mortels-dans-le-foot-est-trompeur/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Ce calcul censé prouver une augmentation des malaises cardiaques mortels dans le foot est trompeur",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ce-calcul-cense-prouver-une-augmentation-des-malaises-cardiaques-mortels-dans-le-foot-est-trompeur/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9QW9UE",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Legrandeveilmondial/posts/pfbid037Qe8JkSEbE9CpQq398P4GrTP1oQ2G6rbnop3k7XWanTYcABXJkGWKfYEKQX3T48Sl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/collectif.apartheidecoleallevard/posts/pfbid0Csu5jBNxCsKxFQ1Fa9bfPnVyzasqE1BxUYZoJdyPT18iG7KqwpaBq2HyAqhT964Al"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/dominique.dancete/posts/pfbid0tkRUcftgRzcBy1U3j1uPtSTQSXD43yWn5ZEFjx2Bta8Kd5UXUEkRhRkYYLPxp7CZl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/dominique.trolong/posts/pfbid02rEBwa5QHuuuFwkfTYC4SvPThBGMMTkJiqfkB14nKnXQyg9BpZUqGDKLe6VLyMuwJl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/fevrier.emmanuel/posts/pfbid0XtNh97Rp6cqYF1wta2s1FxEUhNTSCmjCjQRRCgcm5wwCz8G8hAirohqRVdgG4yKhl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/franceinfolibre/photos/a.145710849179541/1411602129257067/?type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/franceinfolibre/posts/pfbid02hZiMHbsEV2RArcgHvDuMmDwhMw6wEivW8HjAnewFFVQYYiASRxgXC4A7pbgbn3r1l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/jose.pottier/posts/pfbid029w6L7kSAxxwRSRm6VWAxEtUGnLRCap9DUHB8djhCeME7XJG1JLHop9pmZbtYBNcBl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/nathalie.naturoreflexologue/posts/pfbid02GxtBWWcdVmGMNSm1cNyYL1m4wuAcxHLXpbapFDgvQEKNMjrLmV6DDYUW2iPnfg8wl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/patricia.corsini.779/posts/pfbid02YatbFqtwFUzk7jMLRV6ax2Rosp4E36Hq7B6Vu6Dg4nqNZxiu9Rs3y8K16oRvjxM9l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02ADh8JZ9v5TrVruKeMj9NHVQcmQBqBEfREkDgMBS7phu6NorkFvd3LGyBmdJ5FpJCl&id=100072458131556"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02fG3HJJRzKbea4fP9nPhJBH4GBiJAWEhfDXPbd5KCaLLBXNEKEYykThMAYDUM6xWLl&id=100007829715613"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sortirmonpereducancer/posts/pfbid02sekayHyukzusLBukZu5k8yUByh8BRznebqvmHmvJUisoMVembYmhR51UMTVp2ZJRl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9QW9UE"
    },
    "46": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ce-document-ne-prouve-pas-que-le-vaccin-a-fait-plus-de-morts-que-le-Covid-19-a-Taiwan/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Ce document ne prouve pas que le vaccin a fait plus de morts que le Covid-19 à Taïwan",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ce-document-ne-prouve-pas-que-le-vaccin-a-fait-plus-de-morts-que-le-Covid-19-a-Taiwan/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9QX8KV",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://fr.sott.net/article/38473-A-Taiwan-le-nombre-de-personnes-decedees-apres-leur-vaccination-contre-le-Covid-depasse-le-nombre-de-deces-dus-au-virus-lui-meme"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9QX8KV"
    },
    "47": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ce-logo-est-celui-d-un-sommet-de-l-APEC-et-non-du-Forum-economique-mondial/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Ce logo est celui d'un sommet de l'APEC et non du Forum économique mondial",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ce-logo-est-celui-d-un-sommet-de-l-APEC-et-non-du-Forum-economique-mondial/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.33648DC",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid025yKE8a7TWtT9urAAGZmNUPihj9Ki5GUj6Ee7w6rU8uqEyGk7iDyNQvE9Akf8yf4Ll&id=100085163175685"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.tiktok.com/@marcmercier451/video/7170904258219429126?q=nouveau+logo+forum&t=1672054045596"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.33648DC"
    },
    "48": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ces-images-ne-devoilent-pas-une-mise-en-scene-de-fausses-victimes-en-Ukraine-elles-montrent-des-civils-blesses-par-des-bombardements-a-Kiev/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Ces images ne dévoilent pas une \"mise en scène\" de \"fausses victimes\" en Ukraine : elles montrent des civils blessés par des bombardements à Kiev",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ces-images-ne-devoilent-pas-une-mise-en-scene-de-fausses-victimes-en-Ukraine-elles-montrent-des-civils-blesses-par-des-bombardements-a-Kiev/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32M44GV",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Circonscripti18/status/1580130215241469952"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02W4f97hwp19ANFWLCJKoGidwYpKDX7b9gucoxbfT3B4dRf3oKvRMydEsY9XdheDBVl&id=100081096082036"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0ouyHaDjSNwEFmRKuM2EZHgmtJzn5c9M6tzjDvVvmcvSsDuHesckdTne59cP1HJygl&id=100070273643900"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32M44GV"
    },
    "49": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ces-photos-de-caillots-longs-et-fibreux-ne-prouvent-pas-un-nouveau-risque-lie-aux-vaccins-Covid-19/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Ces photos de \"caillots longs et fibreux\" ne prouvent pas un nouveau risque lié aux vaccins Covid-19",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ces-photos-de-caillots-longs-et-fibreux-ne-prouvent-pas-un-nouveau-risque-lie-aux-vaccins-Covid-19/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32HZ77G",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid029hDuwFDtuKqH6nf9A9J6SHCRu2qqg9vatTNHnannPDmaQ18uuANtaPw12XLzPMj9l&id=100010367881989"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32HZ77G"
    },
    "50": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ces-photos-ne-montrent-pas-les-reactions-de-stars-a-la-gifle-de-Will-Smith-lors-des-Oscars/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Ces photos ne montrent pas les réactions de stars à la gifle de Will Smith lors des Oscars",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ces-photos-ne-montrent-pas-les-reactions-de-stars-a-la-gifle-de-Will-Smith-lors-des-Oscars/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.3277986",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/pixgeeks/posts/pfbid02Bgf9ZTygBmuTukAp85FU1ZGYd1ZPxciAgUz2vxhvYrfA82vgvpTeRfzBWeAcMv3Vl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.3277986"
    },
    "51": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ces-trois-chanteurs-italiens-ne-sont-pas-les-fils-de-grands-tenors/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Ces trois chanteurs italiens ne sont pas les fils de grands ténors",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ces-trois-chanteurs-italiens-ne-sont-pas-les-fils-de-grands-tenors/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32FL62M",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/100070139603486/videos/599641338424673/"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/Karalivesinger/videos/1919071824915790/"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/malistedemusique/posts/pfbid02EKszCaENrHusnbvSFwEEQ9mLNnuxYpZe593wbVMkvfuZAiYChs4AdTcyVxK4cCwdl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02kr4qWrNQdms1wsE6i5VFJ8xYjJ27QR9YTULzgwh5bCCVSKSiaHPhYemUMs1X5B6wl&id=100070139603486"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32FL62M"
    },
    "52": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-declaration-mondiale-sur-le-climat-qui-nie-l-urgence-climatique-vehicule-des-affirmations-trompeuses/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Cette \"déclaration mondiale sur le climat\" qui nie l'urgence climatique véhicule des affirmations trompeuses",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-declaration-mondiale-sur-le-climat-qui-nie-l-urgence-climatique-vehicule-des-affirmations-trompeuses/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32HW8EG",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://lecourrierdesstrateges.fr/2022/08/23/1200-scientifiques-et-universitaires-de-renom-signent-la-declaration-mondiale-sur-le-climat-et-affirment-quil-ny-a-pas-durgence-climatique/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://resistancerepublicaine.com/2022/08/24/1200-scientifiques-persistent-et-signent-il-ny-a-pas-de-rechauffement-climatique/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/CStrateges/status/1561979773538164737"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/PierreMarionnet/status/1561277723980562432"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/_2019_nCoV/status/1561015415035281408"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/philippeherlin/status/1562108036193337344"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.epochtimes.fr/plus-de-1100-scientifiques-professionnels-declarent-ny-a-durgence-climatique-2098454.html"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.europe-israel.org/2022/09/urgence-climatique-il-ny-a-pas-de-consensus-1200-scientifiques-et-experts-du-climat-de-35-pays-signent-un-rapport-contestant-lexistence-dune-urgence-climatique-et-les-rapports/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/giletsjaunesconstituantspagedesecours/posts/pfbid02DDfV7QStyAm1i4SyjiXWYxZr5oKe3dqWrPwZoDDfzDYdTTefarNKPpDoNazYBzJTl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/lenouveaujournal.off/posts/pfbid02HEVzgjBW6KGSDMxVfCL5sxiA5LYRDaXe9zixfg1jXj5HKyJKHXCG6kPGijgYyHodl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/ntdfrancais/posts/pfbid02dzejVLtYJ5BXr8ns1edcTnfx83ZXBe5U4LUqHjb3Xwh6RUfAr7j62xmxEr5BT3T5l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0FW8wMhUnMSp36UhjyoVQU74e8ALLysJgeGgheQetrSSsxVqn8UMyCsi8BHBgz8BYl&id=1282773470"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0eowUH5x1sUHybZxMa2n1bbHpJjZdW2ELvwGj4HwQ7zuwrabhhW1daSLobciyc5sAl&id=106873445039783"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.zejournal.mobi/index.php/news/show_detail/26304/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32HW8EG"
    },
    "53": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-etude-italienne-assurant-montrer-d-etranges-particules-dans-le-sang-apres-la-vaccination-anti-Covid-a-ARN-ne-respecte-pas-le-protocole-scientifique/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Cette étude italienne assurant montrer \"d'étranges particules\" dans le sang après la vaccination anti-Covid à ARN ne respecte pas le protocole scientifique",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-etude-italienne-assurant-montrer-d-etranges-particules-dans-le-sang-apres-la-vaccination-anti-Covid-a-ARN-ne-respecte-pas-le-protocole-scientifique/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32K83FT",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://marie-claire-tellier.over-blog.com/2022/08/les-consequences-de-l-injection-de-c0vid-une-etude-revele-que-94-des-personnes-ayant-recu-l-injection-presentent-des-formations-de-caillots-sanguins-et-des-particules-etrangeres.html"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32K83FT"
    },
    "54": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-image-ne-montre-pas-differents-designs-rejetes-de-la-Tour-Eiffel/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Cette image ne montre pas différents designs rejetés de la Tour Eiffel",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-image-ne-montre-pas-differents-designs-rejetes-de-la-Tour-Eiffel/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32H22FW",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/EcoledeFranceCan/posts/pfbid0jYvyce1dM3uH4UCHeHN97o6UW3Pxba8hAtRvi2WjNEbKLwcEvy9zTTFbG5p5NkE9l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/LesPetitsFrenchies/posts/pfbid02q7eSLJMVFAzbNrDnkrj2fh51utCogtPFfmdKJpx8iJZjxzEMADxB54LZH9Au4ysTl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/alinaslanguagelessons/posts/pfbid07YiyaC5t9isi9PXHsNmbdbYLDBUtw2ydtJQEYSHk96Lb6izexvMyN8m42mrbNQkPl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/henri.courtade/posts/pfbid0cT6m4NuWTupwrDEeniTvyw6soY2vE6tXsPfVMRvmauyHkUAoLdUr5aMP1DeDPkCul"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid023KSMm1h1SZBfAfKb8bqJFrmguRqYj74HLcua34PvSYwheakZ3uKc1wk4pg7RjGysl&id=100011158932553"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32H22FW"
    },
    "55": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-lettre-de-Napoleon-qui-ordonnerait-de-faire-fusiller-des-pyromanes-est-un-faux-selon-les-experts/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Cette lettre de Napoléon qui ordonnerait de faire fusiller des pyromanes est un faux selon les experts",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-lettre-de-Napoleon-qui-ordonnerait-de-faire-fusiller-des-pyromanes-est-un-faux-selon-les-experts/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32FH6R7",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/AuxerreBrigitte/posts/pfbid02mxwLuEgY5uooYbsqZVp8a89aCE6ctFRUByGz4JjgqjHnvxbhYTjQRWaBkCwRhBgbl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/cogne.raphael/posts/pfbid0vRcssoxzqmi8GWTkT8j413Xpom1SbiDKEiDqhT7WzDmK1tW5UQ1Ynm7UjiN77orcl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/frederic.dussaud/posts/pfbid0iEp2N9KcS6rJgsEqQNEoCdCFbWZwmsjzsk6wbeWPoKGudAgmP6vyU7L4XBsTyHxml"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02y5iNyndwBJj7rLRsV84kVJ9nbbFpd97s4GJtyjRLxLLWR7Cpd3BkVB27muASgqbml&id=100011224001765"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/tanguy.audain/posts/pfbid02SjMdYz4inmqx9pzVdr54nGHp35PrSkTqj75rfHhSyXySEd5vC1Ls53uKqzGD7AJsl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32FH6R7"
    },
    "56": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-photo-de-deux-enfants-saluant-des-soldats-ukrainiens-date-de-2016/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Cette photo de deux enfants saluant des soldats ukrainiens date de 2016",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-photo-de-deux-enfants-saluant-des-soldats-ukrainiens-date-de-2016/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32488BY",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Botteroo/posts/pfbid036bTnNS2hNabNoXTyzPnsAwQpfStLdPUFjqmTR13WZtpab7q8aov6A9KFp2ajoMprl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/laboitearimes/posts/pfbid0AkpTJmnww6yKSjZG6w53Pz9zruEx6wV5kWxHh9Gjf42Dc4chH59W1sKfYrfCi8yrl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32488BY"
    },
    "57": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-photo-ne-montre-pas-un-reportage-recent-de-BFMTV-dans-un-hopital-francais/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Cette photo ne montre pas un reportage récent de BFMTV dans un hôpital français",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-photo-ne-montre-pas-un-reportage-recent-de-BFMTV-dans-un-hopital-francais/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9V43TU-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/EBatisseur/status/1469260670902452225"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Gribouille26/posts/pfbid09otMkqAJxwanHrbHdwmqnGEenMWm33cFAqfc7yGK4etGwEJZXpvEJGjSaT8Fns2Zl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/alexandre.vieira.5477272/posts/pfbid02Cgkun3rgExCZ9ePURnLSYD32B6MXGbL13NfBxJBzJDj1SQUV6dWhRrUiH9HSvqFnl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/annie.cluzeau/posts/pfbid02yoYNbQhck351PhRDXX1LjmmMCxoXM5i8kJwSZGpQgHXCdwLmSnCTuAnxLx6264bGl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/ante.pyramide/posts/pfbid029FEMPmxS7J3cex3DwooMafAcohqi9KF3Nb3Sxh9Vmsk4wMNeFmYi4P7pQGJ7k9Gil"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/cecyl.padnom/posts/pfbid0cw4Hd2UiHda5gNYEjTLFtaoNZHiwVSZGkoswPxJgMNXf6HwGaF4d6x2R3idgFqgMl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/flingueur45/posts/pfbid02PYgXEGopv9F4ATVyJPraHQNnivbzLsc3qkjFpr8a3yEYqKZf8ptXSDEBDRJ5dQucl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/Pastafarisme.Europe/permalink/10159699324807829/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/gjconstituants56/permalink/1129209790949511/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/halo.gene64/posts/pfbid029UZ86W2wNX5pQHVrdQe9xazTscSzCePiSZePNNrSMoqfqz5g8SYC1DvnuZKSBzhnl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/melinda.tonarelli/posts/pfbid036SWMYaW5QV5v4gxuK761W9EjGkrThpX9bSuVrwMNbELjFJfqVjdjbAFXwCyCwuHhl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/patrice.dom.505/posts/pfbid0dBN6CozHkBLe1hCmHiEoqgDHK27uEwvyiY7cveHNkatxEeyqbXuTdevRozoUDqU7l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid028HeGyrSFQkGvrjmUXN6GFcYwY1wQ5eSU7NKAbCKUB6Ab5yn2GEE3N7PnHGMxvgdwl&id=100007547057192"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02QFCWFTpDLfR1ds7Rfk4JKg5DASNfYrGFRrtQ2T1mT4FrhzKYKepUvkUDGxvAoNZKl&id=100070534666455"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02uR5ifCAjeDegxzrZSa3pDD2W18QqqqzkQSPvvqbYDThY38aFgYmWoMjzVFweWgR4l&id=100075288008921"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid037kqx8F4YLXZkpvRW8Swt7oF3NqrrURAfakvU3TRxnki2kaMxvzY57jpeBUHF73Qzl&id=100016615545065"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0YgniqFC2ewrFEW3qohL7phzCtqHGW5pnsjYMDEeag9iixX6JCStdBf7P2fvmb85tl&id=100001550586163"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/peter.allenderstoker/posts/pfbid02L4rvNWRDT8isQjTM6wAKzwiiS8Cg7YXAMxwZEXo1f8WTNUduNPFL3n45LfYnWjxvl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/peter.pierre.fouet/posts/pfbid02CP4mmDbBqx6p5w3g2xGyBpsHE3QofrQdG1SEaZM1LCDJcWYSkAH811k2N34GRg28l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/philippe.ody/posts/pfbid02UpMuhYK1RYzVpkBAGWR4w659abrdexwihoJWkrrd2peSESBPofpaUxYUfbNxmQzol"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/popeye.bordeaux/posts/pfbid02k5coH8Z2wsjJseWUHgPY1LJGQxi3tjYoeWwVA1vd6Hdj2ytzwgdh5oHpU7wh5UoHl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/quentin.metayer.90/posts/pfbid0DNBdsfraevsNPyYqB5ULQEXrc9kRCr5rXUJ54uqQzxa9UsiKwkxCaHnoBASf5Fg7l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/stephanie.ang.5/posts/pfbid0KFFGwNFe7ZtMFx5Cffv3u8WQyBBq9vwJdhwrcqiTnTKzvtbkq52HcM555mYvuKXYl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9V43TU-1"
    },
    "58": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-video-a-ete-filmee-en-Afrique-du-sud-en-2017-et-ne-montre-pas-un-tsunami-apres-le-seisme-en-Turquie/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Cette vidéo a été filmée en Afrique du sud en 2017 et ne montre pas un tsunami après le séisme en Turquie",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-video-a-ete-filmee-en-Afrique-du-sud-en-2017-et-ne-montre-pas-un-tsunami-apres-le-seisme-en-Turquie/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.338V38X",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://www.tiktok.com/@ca26041967/video/7197081055248059654"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.338V38X"
    },
    "59": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-video-d-Ursula-von-der-Leyen-diffusee-en-2020-ne-montre-pas-comment-economiser-de-l-eau-en-se-lavant-les-mains/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Cette vidéo d'Ursula von der Leyen diffusée en 2020 ne montre pas comment économiser de l'eau en se lavant les mains",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-video-d-Ursula-von-der-Leyen-diffusee-en-2020-ne-montre-pas-comment-economiser-de-l-eau-en-se-lavant-les-mains/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32JF8NU",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0YcRL5uMwgRCYsg2m3TVamh4o2NpBUK3eRrciANtuZc4s4xDHmWu6XDmTG7XFFHgnl&id=100068848493994"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32JF8NU"
    },
    "60": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-video-d-impressionnantes-failles-dans-le-sol-n-a-rien-a-voir-avec-les-recents-seismes-en-Turquie/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Cette vidéo d'impressionnantes failles dans le sol n'a rien à voir avec les récents séismes en Turquie",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-video-d-impressionnantes-failles-dans-le-sol-n-a-rien-a-voir-avec-les-recents-seismes-en-Turquie/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.339X6FL",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://t.me/leveil2022tchat/79142"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/BPartisans/status/1627377677194653697"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/lereveilcitoyen2/posts/pfbid0aQcAiV23BX27akAs6MisuiAjWEFrGHXBrnqRNvGR1BsNodvhQ7x1akoGspSiGqMVl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0QNxGTqfGrBCRJyuZReQ7TksUxnfh4sdb4zUJDaAHCieAWHA1F7Jo7MTS4YjnPmnpl&id=100086870241078"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.tiktok.com/@jador1major/video/7202053628067073285"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.339X6FL"
    },
    "61": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-video-ne-montre-pas-des-hotesses-italiennes-opposees-a-la-vaccination-contre-le-Covid-19/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Cette vidéo ne montre pas des hôtesses italiennes opposées à la vaccination contre le Covid-19",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-video-ne-montre-pas-des-hotesses-italiennes-opposees-a-la-vaccination-contre-le-Covid-19/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9QZ7F8",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/dominique.clement.520/posts/pfbid02gxf5QYbaUhEcwhpxiCy1MQFym3TyvNuRwzNKtHgBv1AE8sZNwCV5AnJECjeXBkqKl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/olivier.guillemant/posts/pfbid02D5unNFVztpmHHQA3AvDG62CQoYNeTio3FFarV2rGz5HhHu95YfN36Ger9ZkLMKLRl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/razmik.yeghnazary/posts/pfbid0ja2KSfZNdWkR4bLGVJGtJo1yq961rRGJW13XeJtpudWKTxc5hr4npU54V2mxPHWDl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9QZ7F8"
    },
    "62": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-video-ne-montre-pas-le-PDG-de-Moderna-admettre-avoir-produit-100-000-vaccins-anti-Covid-des-2019/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Cette vidéo ne montre pas le PDG de Moderna admettre avoir produit 100.000 vaccins anti-Covid dès 2019",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cette-video-ne-montre-pas-le-PDG-de-Moderna-admettre-avoir-produit-100-000-vaccins-anti-Covid-des-2019/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.339B2RK",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Aliyah01150546/status/1624053771293671425"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/lionel.rousset1/posts/pfbid02JCk6q6sSCfHadKHWJ6qFx4AwxE6MfhVWTnJTzCahH6vydxjC9SDe1oz8DWqn5Uxul"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.339B2RK"
    },
    "63": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cola-feuilles-de-manioc-ou-urine-aucun-de-ces-remedes-ne-guerit-les-morsures-de-serpent/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Cola, feuilles de manioc ou urine: aucun de ces remèdes ne guérit les morsures de serpent",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Cola-feuilles-de-manioc-ou-urine-aucun-de-ces-remedes-ne-guerit-les-morsures-de-serpent/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32N4787",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/keurtisDeparis/posts/pfbid02T7R7Sgt6UqgYskU4Ai124yekmA5zM8SFvyh7Khoeaz3udjpE9Rx5pP6QibWmWJjCl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32N4787"
    },
    "64": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Covid-les-chiffres-des-hospitalisations-et-des-morts-selon-leur-statut-vaccinal-sont-bien-disponibles/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Covid: les chiffres des hospitalisations et des morts selon leur statut vaccinal sont bien disponibles",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Covid-les-chiffres-des-hospitalisations-et-des-morts-selon-leur-statut-vaccinal-sont-bien-disponibles/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32Q64HT",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://mobile.twitter.com/StatChrisCotton/status/1594348480847237120"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Ilangabet/status/1594444244567134215"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32Q64HT"
    },
    "65": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Crise-sanitaire-non-ces-extraits-video-ne-sont-pas-des-mises-en-scene-de-la-pandemie/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Crise sanitaire : non, ces extraits vidéo ne sont pas des mises en scène de la pandémie",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Crise-sanitaire-non-ces-extraits-video-ne-sont-pas-des-mises-en-scene-de-la-pandemie/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.33979Q4",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/silvano_trotta/status/1625103799458078721"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.33979Q4"
    },
    "66": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Dans-les-hopitaux-de-Liege-une-tension-saisonniere-encore-aggravee-par-la-pandemie/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Dans les hôpitaux de Liège, une tension saisonnière encore aggravée par la pandémie",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Dans-les-hopitaux-de-Liege-une-tension-saisonniere-encore-aggravee-par-la-pandemie/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TQ4B8-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02LQX5GzGeZ99rCyDjdm3sMkCk3FtS2KB6bpXomcakDYk1qrXtzX1y956xCCSaLyMMl&id=110207781354066"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TQ4B8-1"
    },
    "67": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/De-la-neige-en-Arabie-saoudite-pour-la-premiere-fois-en-100-ans-Attention-a-ces-fausses-allegations/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "De la neige en Arabie saoudite pour la première fois en 100 ans ? Attention à ces fausses allégations",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/De-la-neige-en-Arabie-saoudite-pour-la-premiere-fois-en-100-ans-Attention-a-ces-fausses-allegations/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.33A76XG",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/DidierDerichard/status/1628717871445467139"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/silvano_trotta/status/1628849119295860737"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.33A76XG"
    },
    "68": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Demande-de-signalement-d-un-individu-non-vaccine-attention-a-ce-formulaire-parodique/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "\"Demande de signalement d'un individu non-vacciné\" : attention à ce formulaire parodique",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Demande-de-signalement-d-un-individu-non-vaccine-attention-a-ce-formulaire-parodique/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VC3FK-3",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/cab2626/status/1475572965190295564"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/250350359176207/permalink/914276799450223/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/436007043255025/permalink/1803752993147083/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/932324854197212/permalink/1083880375708325/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/photo.php?fbid=1743673045835810&set=a.1105118209691300&type=3"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VC3FK-3"
    },
    "69": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Des-fermiers-italiens-mobilises-contre-l-inflation-Non-cette-video-immortalise-une-fete-dans-le-Piemont/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Des fermiers italiens mobilisés contre l'inflation ? Non, cette vidéo immortalise une fête dans le Piémont",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Des-fermiers-italiens-mobilises-contre-l-inflation-Non-cette-video-immortalise-une-fete-dans-le-Piemont/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32G974J",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0pJ2nuABuud8SXPXsonKKbmT5KP7NQ2n5psSt5nTp8hrBtf8zsz5NNEsaXJNNFH9sl&id=100071449693931"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.youtube.com/watch?v=GxSK-meOD68"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32G974J"
    },
    "70": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Des-theories-infondees-attribuent-le-seisme-en-Turquie-au-programme-americain-HAARP/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Des théories infondées attribuent le séisme en Turquie au programme américain HAARP",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Des-theories-infondees-attribuent-le-seisme-en-Turquie-au-programme-americain-HAARP/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.33996L9",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/DidierDerichard/status/1622849827246686215"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/mmtchi/status/1622742464015597570"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.33996L9"
    },
    "71": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Du-plastique-present-dans-des-semoules-de-ble-Attention-a-cette-video-trompeuse/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Du plastique présent dans des semoules de blé ? Attention à cette vidéo trompeuse",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Du-plastique-present-dans-des-semoules-de-ble-Attention-a-cette-video-trompeuse/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32GY6B9",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://t.me/johntrump17/45213"
                    },
                    {
                        "@type": "Article",
                        "url": "https://t.me/vaccingoy/17791"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/BfnTvv/status/1561404648681979904"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02ghUbm93obV5L7iUpNJeXy9WNd1qcaYXkbY4VmLwbUujGU9iLz7JyZLVtEYXz8RKcl&id=101373064820791"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0F5ZkE6fVUCT9ugcW6BD3BZqwLryBEcwqAGfNje5cufborLozFoFWaXQMnCzDcrmBl&id=1495446827163309"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32GY6B9"
    },
    "72": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Effets-secondaires-femmes-enceintes-non-les-Pfizer-documents-ne-revelent-pas-que-le-vaccin-Covid-est-dangereux/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Effets secondaires, femmes enceintes : non, les \"Pfizer documents\" ne révèlent pas que le vaccin Covid est dangereux",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Effets-secondaires-femmes-enceintes-non-les-Pfizer-documents-ne-revelent-pas-que-le-vaccin-Covid-est-dangereux/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.329L398",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://lemediaen442.fr/les-essais-secrets-du-vaccin-de-pfizer-en-partie-devoiles/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://resistance-mondiale.com/pfizer-savait-que-leur-vaccin-allait-tuer"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.329L398"
    },
    "73": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Elon-Musk-n-a-pas-licencie-une-responsable-de-Twitter-en-direct-pendant-une-emission-de-radio/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Elon Musk n'a pas licencié une responsable de Twitter en direct pendant une émission de radio",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Elon-Musk-n-a-pas-licencie-une-responsable-de-Twitter-en-direct-pendant-une-emission-de-radio/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32N483W",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid036a3SPoDdJfNZFHH7gLkMUqbvoKXUnuoCzJcTC3K8HiLayA4DKQLUCd7eovRn7Fw9l&id=100075392892183"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0hhFSjaCk8jtfX1GkBdEAbmJTLseuURJGP2DXCW3RPEDezx8G8movYZ8PKwJdrnncl&id=100066914018465"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/sammy.ronnie.5/posts/pfbid0eFWF28S3z7BA5Aukxe1nNjBpoAZMDh7D7HGak1fM9HtVce3GdaRANpLvJ9vEn7z8l"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32N483W"
    },
    "74": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Gazoduc-Nord-Stream-un-enqueteur-suedois-retrouve-mort-Attention-a-cette-rumeur/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Gazoduc Nord Stream : un enquêteur suédois retrouvé mort ? Attention à cette rumeur",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Gazoduc-Nord-Stream-un-enqueteur-suedois-retrouve-mort-Attention-a-cette-rumeur/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32L98NZ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Circonscripti18/status/1579218736095318017"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/hugo.terapia.31/posts/pfbid02pNWS8FEWYP49LpNXZ4k5m2jnXuHrtmGVgrYkbXYUj4SL87YPmi67oGKbhB2F2taJl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32L98NZ"
    },
    "75": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Il-n-y-a-pas-de-vaccin-Rougeole-Oreillons-Rubeole-Covid-a-l-ordre-du-jour-en-France/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Il n'y a pas de vaccin Rougeole-Oreillons-Rubéole-Covid à l'ordre du jour en France",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Il-n-y-a-pas-de-vaccin-Rougeole-Oreillons-Rubeole-Covid-a-l-ordre-du-jour-en-France/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32HB8KJ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/FLyMachabert/status/1563912970945568768"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32HB8KJ"
    },
    "76": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Il-n-y-pas-de-greve-nationale-en-Israel-pour-protester-contre-la-vaccination-anti-Covid/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Il n'y pas de grève nationale en Israël pour protester contre la vaccination anti-Covid",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Il-n-y-pas-de-greve-nationale-en-Israel-pour-protester-contre-la-vaccination-anti-Covid/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RJ4LZ-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid046m5f7AYJoud3RP43Jg6LzzYVS4dksX7RTpxpgU5GNAAqX8JbXXgdLGWFhnRbUfal&id=100014053716302"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RJ4LZ-1"
    },
    "77": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Joe-Biden-guide-par-une-personne-aveugle-Non-cette-sequence-video-a-ete-tronquee/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Joe Biden guidé par une personne aveugle ? Non, cette séquence vidéo a été tronquée",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Joe-Biden-guide-par-une-personne-aveugle-Non-cette-sequence-video-a-ete-tronquee/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32KB3K6",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/THEFLOWER008/status/1573657889948024836"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/MarcelEn442/posts/pfbid0dRZWXvTtbLpxi3o8WzxbgxZggJr5pyGx5ttoMDS8kAS65qyz4mcMTp7M8QuMbg3Al"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/florent.david.925/posts/pfbid0DWNg9dpaSZdVpSFLzucM3mhkYaw1CN7RrFDf2PizmoEsJtCT5BvWN6qsoMtAUCkhl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32KB3K6"
    },
    "78": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-OTAN-a-t-elle-rompu-un-accord-passe-a-la-fin-de-la-Guerre-froide-prevoyant-qu-elle-n-etendrait-pas-ses-frontieres-a-l-Est/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "L'OTAN a-t-elle rompu un accord passé à la fin de la Guerre froide prévoyant qu'elle n'étendrait pas ses frontières à l'Est ?",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-OTAN-a-t-elle-rompu-un-accord-passe-a-la-fin-de-la-Guerre-froide-prevoyant-qu-elle-n-etendrait-pas-ses-frontieres-a-l-Est/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.324B4H4",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://cogiito.com/a-la-une/le-spiegel-retrouve-une-preuve-ecrite-des-promesses-de-lotan-de-ne-pas-setendre-a-lest/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/holste_max/status/1498707804999331841"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.agoravox.fr/tribune-libre/article/un-document-prouve-que-l-otan-ne-239593"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.324B4H4"
    },
    "79": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-Ukraine-acquise-a-l-ideologie-neonazie-Attention-a-ces-publications-reprenant-le-narratif-du-Kremlin/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "L'Ukraine acquise à l'idéologie néonazie ? Attention à ces publications reprenant le narratif du Kremlin",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-Ukraine-acquise-a-l-ideologie-neonazie-Attention-a-ces-publications-reprenant-le-narratif-du-Kremlin/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.324Q3AK",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/InvestigAction/posts/pfbid0216pea2hwhL8wpBZTJCGPCiAFwjMC7eAuBGts8wy6BWpxZj1S41vLp7tB2La6nYil"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/nonauvaccin/posts/pfbid0d7ehkggrLkvXv427hwfD7rWvt13Wb4SqxeEMtu97aaKtvJAALRsjYNfbZdXuYhU7l"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/vousvoulezvraimentsavoir/posts/pfbid02MKGVAsonxVthntTqqxAk5toxYFoAGav7W4L6rLyjuUyyspBReRnMQ6mmAzGSc8D8l"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.les-crises.fr/a-l-onu-les-etats-unis-et-l-ukraine-refusent-de-condamner-le-nazisme/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.324Q3AK"
    },
    "80": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-agence-de-recherche-medicale-americaine-n-a-pas-recommande-recemment-l-ivermectine-pour-traiter-le-Covid-19/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "L'agence de recherche médicale américaine n'a pas recommandé récemment l'ivermectine pour traiter le Covid-19",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-agence-de-recherche-medicale-americaine-n-a-pas-recommande-recemment-l-ivermectine-pour-traiter-le-Covid-19/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32HU7A2",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/WikiStrikeOfficiel/posts/pfbid07MauxkjyJC7PsSFA5H4H6ueEm7YaSuTBsASaRkgUdKQw1aoy2KwiptHDf1ArqjW8l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/lynda.letallec/posts/pfbid0FVhbptTgdxaDrt81MvFrKfAen5pN1kjRkco6X8A1iHh8QKqKFQbrkES19JNYPLEEl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32HU7A2"
    },
    "81": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-aide-humanitaire-francaise-vers-l-Afghanistan-n-est-pas-versee-au-regime-taliban/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "L'aide humanitaire française vers l'Afghanistan n'est pas versée au régime taliban",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-aide-humanitaire-francaise-vers-l-Afghanistan-n-est-pas-versee-au-regime-taliban/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32GN3EA",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/RosskopfNicolas/posts/pfbid06ZPXbnrCkrTYwop56WsrqtYn5pE7hYzn1L9p9Rd5BCTuFV1gs1HwhWRJXUnB3HMbl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/gerard.minati/posts/pfbid02NNkdgyiudasXTmby284FfjMqvsk7ogfqDSvMsdz9hZ2uADB27i4ibMLLChqo8vzyl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32GN3EA"
    },
    "82": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-armee-et-la-police-autrichiennes-n-ont-pas-officiellement-appele-a-rejoindre-la-manifestation-du-20-novembre-a-Vienne/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "L'armée et la police autrichiennes n'ont pas officiellement appelé à rejoindre la manifestation du 20 novembre à Vienne",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-armee-et-la-police-autrichiennes-n-ont-pas-officiellement-appele-a-rejoindre-la-manifestation-du-20-novembre-a-Vienne/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RY6NG-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/LaFranceEnColere/posts/pfbid0UHTNQAyrHfXEdReCUU2LHo966Czomv6KYVHAzbfu5gnyKFVa1erPeJZoRdkTqnKwl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/michel.bernasconi.5/posts/pfbid0X2nyM6n8cijNJ35oGAtj1SQF1NzsHuMqUdZrffHgqWABA64cyEEMM4Zv1ygZHKwQl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/quandquiquoicomment/posts/pfbid02FFwQgtppPoZJoyVVR6pgRQ8VBfhaS17wJGhe2bn6pzziAGKsMHhD5uthyPa4Rxmhl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RY6NG-1"
    },
    "83": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-hydrogene-une-source-d-energie-naturelle-et-non-polluante-disponible-en-abondance-sur-Terre-C-est-faux/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "L'hydrogène : une source d'énergie naturelle et non-polluante disponible en abondance sur Terre ? C'est faux",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-hydrogene-une-source-d-energie-naturelle-et-non-polluante-disponible-en-abondance-sur-Terre-C-est-faux/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32CV6VX",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/pierre.gaudin.1/posts/pfbid02dSKnk7r9fGa2nDiCaCbHY2BSrwniBgwBZBHGjo35UVspY91YHVsbMgXLi7CPQxPHl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32CV6VX"
    },
    "84": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-hydroxychloroquine-va-arriver-en-Guadeloupe-attention-a-cette-video-trompeuse/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "\"L'hydroxychloroquine va arriver en Guadeloupe\" : attention à cette vidéo trompeuse",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/L-hydroxychloroquine-va-arriver-en-Guadeloupe-attention-a-cette-video-trompeuse/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RR2HL",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/nousautresmedia/videos/1015596942536793/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RR2HL"
    },
    "85": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-France-pays-N-1-de-la-censure-sur-Facebook-Une-presentation-des-donnees-trompeuse/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "La France, pays \"N°1 de la censure\" sur Facebook ? Une présentation des données trompeuse",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-France-pays-N-1-de-la-censure-sur-Facebook-Une-presentation-des-donnees-trompeuse/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32WF6TJ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/marc.landersse/posts/pfbid0USQmnnsNQvG5ZzaWMjYVfFaeuwW7PZAX7DuCBymu4d5iwVfqVkzbfughnxFrjxLql"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02YP6XMC2NpqAfXFFNb8cyL7tpeFJB8FDLdx4pH8E13qrJ3z23tQ79yC9XVn5jv36Pl&id=100074920810965"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/raym.raymond.773/posts/pfbid02nZmvaeoYPpgrGHS4whKwKjwJu948YK2ejyhNzFVKTWCKULaAVQNbMyAjbRmuo7rgl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32WF6TJ"
    },
    "86": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-NASA-confirme-que-le-rechauffement-climatique-est-une-fraude-car-l-Antarctique-gagne-de-la-glace-C-est-faux/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "La NASA \"confirme que le réchauffement climatique est une fraude\" car l'Antarctique gagne de la glace ? C'est faux",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-NASA-confirme-que-le-rechauffement-climatique-est-une-fraude-car-l-Antarctique-gagne-de-la-glace-C-est-faux/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32GD3N8",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "http://www.citoyens-et-francais.fr/2018/02/la-nasa-confirme-que-le-rechauffement-climatique-est-une-fraude-l-antarctique-gagne-112-milliards-de-tonnes-de-glace-par-an.html"
                    },
                    {
                        "@type": "Article",
                        "url": "https://lesmoutonsrebelles.com/la-nasa-confirme-que-le-rechauffement-climatique-est-une-fraude-lantarctique-gagne-112-milliards-de-tonnes-de-glace-par-an/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/CStrateges/status/1556015420477407234"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/JohanneC16sept/status/1114968556603674625"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Krieger66362259/status/1555944621234069505"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/guylaine.curretti.56/posts/pfbid0vq6kccseH7MBT3b5LT8uCNXmBuLKbK6zCaWdxcBnheGQ3xVfwLGYH3inQ3Ekewepl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0RuCHmbVAyAXRkAvDXRG8fNxPJBG8aSxtCUNUjhW5SiJEJSJ5XWBPGtZPSaKQyGFfl&id=100074022956189"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.finalscape.com/la-fraude-du-rechauffement-climatique-frauda-privind-incalzirea-globala-the-global-warming-fraud/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32GD3N8"
    },
    "87": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-Nattokinase-pour-neutraliser-les-vaccins-anti-Covid-C-est-infonde-et-peut-etre-dangereux/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "La Nattokinase pour neutraliser les vaccins anti-Covid ? C'est infondé et peut être dangereux",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-Nattokinase-pour-neutraliser-les-vaccins-anti-Covid-C-est-infonde-et-peut-etre-dangereux/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.33779CA",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://forum.libertes.ca/viewtopic.php?t=2583"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/silvano_trotta/status/1612925315109584901"
                    },
                    {
                        "@type": "Article",
                        "url": "https://vk.com/wall334722730_103867"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.buymeacoffee.com/logixca/effet-degradant-de-la-nattokinase-sur-la-proteine-spike-du-sras-cov-2"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/groups/1090209138046243/permalink/1777226046011212/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.33779CA"
    },
    "88": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-double-infection-grippe-et-Covid-surnommee-flurona-n-est-ni-inedite-ni-une-fusion-de-deux-virus/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "La double infection grippe et Covid surnommée \"flurona\" n'est ni inédite ni une \"fusion\" de deux virus",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-double-infection-grippe-et-Covid-surnommee-flurona-n-est-ni-inedite-ni-une-fusion-de-deux-virus/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VK2AP-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://www.ohmymag.com/sante/flurona-les-premiers-cas-de-cette-maladie-qui-melange-grippe-et-covid-19-sont-apparus_art147316.html"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VK2AP-1"
    },
    "89": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-douleur-liee-a-l-accouchement-est-subjective-elle-ne-se-mesure-pas-en-unites-ni-en-os-brises/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "La douleur liée à l'accouchement est subjective: elle ne se mesure pas en unités ni en \"os brisés\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-douleur-liee-a-l-accouchement-est-subjective-elle-ne-se-mesure-pas-en-unites-ni-en-os-brises/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32DD34H",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/1411319649159061/photos/a.1413518642272495/3028605087430501/?type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Bailleul.Romain/posts/pfbid02yQPXSShPvsJpBaX5B4uF9dMK24YT2BPPqVWyEc81efsxk7HEXQ7GWWq3tE5tyPMKl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/liberetoideteschaines/posts/pfbid031tSHvXZ2cGDrSQDmdBxhkY23qMcewFhTnj2UD9BCoWDTS1eSCArbcRGb6Eh5y4bql"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/noemiiedubee/posts/pfbid0LZoZifxkjmHTs7VgmKCh1Wbeu5JkxZSgB7dP15g5DnwoZYQSjuxwZjhspYRV4kPRl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02cQNKarVsyx3ygfY8XoUVG18cK271G3wEsgiapPWAFS4e9vHmSqXQva399oeSFmc6l&id=1411319649159061"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32DD34H"
    },
    "90": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-fonte-acceleree-de-la-calotte-glaciaire-du-Groenland-est-bien-due-aux-activites-humaines/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "La fonte accélérée de la calotte glaciaire du Groenland est bien due aux activités humaines",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-fonte-acceleree-de-la-calotte-glaciaire-du-Groenland-est-bien-due-aux-activites-humaines/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32L37W2",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/a_marabelle/status/1577216493036900352"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/christian.andrieux.737/posts/pfbid0pw44EdQQnZsyhQTao5NqzBkFMHUTKYmqebGYZLjBjhBRWjagxN9xKJtCnbVX3uAul"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/groups/426526817556358/permalink/1974633482745676/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/laurent.grimler/posts/pfbid02a1taBsVeovk8hM5K1H2QaxHHa9ieuph4DMGVfALVf7Ji3YA556fgoivzD2f7JyA6l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/pierre.jacotin.3/posts/pfbid02DkMPgMXZqfrwUJKFTAEUMwSNZbKDm9SwQDLX78emVPRtTTZUNrHT3thK5FhNdJbul"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32L37W2"
    },
    "91": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-justice-belge-n-a-pas-suspendu-le-pass-sanitaire/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "La justice belge n'a pas suspendu le pass sanitaire",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-justice-belge-n-a-pas-suspendu-le-pass-sanitaire/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9UM9X2-6",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://lecourrier-du-soir.com/coup-de-theatre-en-belgique-la-justice-dechire-le-pass-sanitaire-et-inflige-5-000-euros-damende-au-gouvernement-wallon/"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/FloconNougat/posts/pfbid01J9W6a1DocLW4uRdvM2pzB8Xc1C7ZrUgKG9sQKuicVB2oriyRCuGBnYYFVgS1HNNl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9UM9X2-6"
    },
    "92": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-moyenne-des-temperatures-a-Paris-entre-aout-et-septembre-1895-etait-de-20-C-pas-de-37-C/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "La moyenne des températures à Paris entre août et septembre 1895 était de 20°C - pas de 37°C",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-moyenne-des-temperatures-a-Paris-entre-aout-et-septembre-1895-etait-de-20-C-pas-de-37-C/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32FF4TC",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/liciinfo/posts/pfbid02U2AYmp4Limgdt2UeqqvZ7x5J1m5rimJE4yLMEDbG4D3RmgYtVX2aKHSSHYj8ntNjl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32FF4TC"
    },
    "93": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-surmortalite-en-France-en-2022-n-est-pas-attribuee-aux-vaccins-anti-Covid/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "La surmortalité en France en 2022 n'est pas attribuée aux vaccins anti-Covid",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-surmortalite-en-France-en-2022-n-est-pas-attribuee-aux-vaccins-anti-Covid/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.336T66Z",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://lemediaen442.fr/surmortalite-inhabituelle-en-france-les-crematoriums-tirent-la-sonnette-dalarme-debordes-par-lafflux-de-deces/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.336T66Z"
    },
    "94": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-surveillance-de-toutes-nos-communications-Internet-et-mobile-legalisee-Une-interpretation-trompeuse-d-un-decret/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "La surveillance de \"toutes nos communications Internet et mobile\" légalisée ? Une interprétation trompeuse d'un décret",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-surveillance-de-toutes-nos-communications-Internet-et-mobile-legalisee-Une-interpretation-trompeuse-d-un-decret/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32M287E",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://planetes360.fr/a-partir-du-21-octobre-letat-va-surveiller-toutes-vos-communications-internet-ordinateur-et-mobile/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/YvesPDB/status/1583591541087490048"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.instagram.com/p/Cj_lEFJNV-K/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32M287E"
    },
    "95": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-variole-du-singe-fomentee-par-Bill-Gates-attention-a-cette-interpretation-trompeuse-d-une-simulation-d-epidemie/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "La variole du singe \"fomentée\" par Bill Gates : attention à cette interprétation trompeuse d'une simulation d'épidémie",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/La-variole-du-singe-fomentee-par-Bill-Gates-attention-a-cette-interpretation-trompeuse-d-une-simulation-d-epidemie/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32BK62Y",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://1scandal.com/un-document-de-2021-prouve-que-bill-gates-avait-fomente-lattaque-de-variole-du-singe-pour-le-15-mai-2022/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://exoconscience.com/une-simulation-de-la-variole-du-singe-a-ete-faite-par-les-mondialistes-lannee-derniere/manipulations-gouvernance-mondiale/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/celeste.lavil/posts/pfbid02JoN3BM7zVi81dEEFoLZB5PhNztuik6Bbm9Bp7N9rgpqWxJfKTEhFspp4HApgALSfl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/fabrice.bernerd.1/posts/pfbid0zmTWdAPHfKgnZS7r24NuxZ6rNj7oqVUdagTMgZzkLYMMUQMCNPcJM76Vh3LTMhGNl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/jeanfrancois.oviode/posts/pfbid0MJqEYXKxWpRMPXF6g6toQBR9keTHJ2eGQL4AWYmXWmnQxQqwTt7GJkEUHyXhPA4Nl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0FN4BbTzMp7wQ1cKsciYa8tftDncN8bkP51juL2xyYeFNqJYkhjYqUbdKXQz1kYJXl&id=100000322997818"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32BK62Y"
    },
    "96": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-canular-du-transport-electrique-attention-a-cette-video-virale-sur-des-scooters-abandonnes/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "\"Le canular du transport électrique\" : attention à cette vidéo virale sur des scooters \"abandonnés\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-canular-du-transport-electrique-attention-a-cette-video-virale-sur-des-scooters-abandonnes/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32ZR6BW",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/koko.korinne/posts/pfbid02HdYV2Fnr8x2bz3CAG3W95mm1whpp6BXC1v8pGnVFPnSPnwqwPguUiG12FPUC6Dw5l"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32ZR6BW"
    },
    "97": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-changement-climatique-est-bien-reel-contrairement-a-ce-qui-est-avance-dans-cette-video/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Le changement climatique est bien réel, contrairement à ce qui est avancé dans cette vidéo",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-changement-climatique-est-bien-reel-contrairement-a-ce-qui-est-avance-dans-cette-video/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32G96NN",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/CalamyJane/status/1551577485225168897"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/SinedWarrior/status/1548908034876923904"
                    },
                    {
                        "@type": "Article",
                        "url": "https://vk.com/video599120238_456256564"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/OrwellHuxleyEtNous/posts/pfbid0MA6UV5JtQfBwqAHsYknH7VG5xuNXJrXKEgNaFW3XxJvRhtKJS4P8NproBPfNu8Pml"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32G96NN"
    },
    "98": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-debut-d-ete-le-plus-froid-en-Arctique-depuis-64-ans-Attention-aux-conclusions-de-ce-texte/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Le début d'été le plus froid en Arctique depuis 64 ans ? Attention aux conclusions de ce texte",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-debut-d-ete-le-plus-froid-en-Arctique-depuis-64-ans-Attention-aux-conclusions-de-ce-texte/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32FF87L",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "http://reseauinternational.net/arctique-debut-dete-le-plus-froid-en-64-ans/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32FF87L"
    },
    "99": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-dereglement-climatique-est-bien-d-origine-humaine-et-non-du-a-l-activite-solaire-et-de-la-Lune-contrairement-a-ce-qu-affirme-Piers-Corbyn/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Le dérèglement climatique est bien d'origine humaine, et non dû à l'activité solaire et de la Lune, contrairement à ce qu'affirme Piers Corbyn",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-dereglement-climatique-est-bien-d-origine-humaine-et-non-du-a-l-activite-solaire-et-de-la-Lune-contrairement-a-ce-qu-affirme-Piers-Corbyn/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32JF2PD",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://cogiito.com/a-la-une/le-climat-change-constamment-et-na-rien-a-voir-avec-lhomme-les-scientifiques-du-climat-sont-sur-le-train-de-sauce-pour-obtenir-des-fonds/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://gettr.com/post/p1qcvd26813"
                    },
                    {
                        "@type": "Article",
                        "url": "https://lesmoutonsrebelles.com/piers-corbyn-astrophysicien-et-meteorologue-affirme-que-les-fanatiques-du-climat-sont-des-acharnes-en-quete-dargent/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/10121Ws/status/1569049699344064512"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Elpis_R/status/1568320439910375425"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.aubedigitale.com/rien-a-voir-avec-lhumanite-un-astrophysicien-affirme-que-les-fanatiques-du-climat-sont-des-acharnes-en-quete-dargent/"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/BabylonDecodedFrance/posts/pfbid0Naz82u9q3HmydBvtw1z4VNVswBrdeckQJt21dBSyXozKJJRT3HmhsVt4EDPTarevl"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.wikistrike.com/2022/09/piers-corbyn-astrophysicien-et-meteorologue-affirme-que-les-fanatiques-du-climat-sont-des-acharnes-en-quete-d-argent.html"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32JF2PD"
    },
    "100": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-droit-au-mariage-pour-tous-annule-par-la-CEDH-Attention-a-l-interpretation-erronee-d-une-decision-de-2016/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Le droit au mariage pour tous annulé par la CEDH ? Attention à l'interprétation erronée d'une décision de 2016",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-droit-au-mariage-pour-tous-annule-par-la-CEDH-Attention-a-l-interpretation-erronee-d-une-decision-de-2016/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32M797C",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/remy.bert.3/posts/pfbid033DKarSXU2ARJHuATUYT6HMKN1PqjaVq3j1cvCLWnXdndvmFB8TkVQvEFeeppbwUil"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32M797C"
    },
    "101": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-moteur-a-eau-une-invention-non-polluante-aux-grandes-performances-energetiques-C-est-faux/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Le \"moteur à eau\" : une invention non-polluante aux grandes performances énergétiques ? C'est faux",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-moteur-a-eau-une-invention-non-polluante-aux-grandes-performances-energetiques-C-est-faux/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32NM4B2",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Rublev18/status/1575365588930756608"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/vpauline006/status/1591835851008401408"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/groups/596575598442084/permalink/756463029120006/"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02e4Fm82o6vysxgmtnJJjXZZSJbrHSaYz8XZ9xMnUT1wK9aWcDNRTTbwkD4wiTCrYdl&id=1592230215"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0BT1Qk7tujWorTysbsHRa26Woz5VqFcTd6nwiVJTKz9UTi5SdbTuoCyyaKYYnNGWpl&id=100074485961364"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0f4nvLebN8XDug49BswpAk2nxkL6t9GRgiYKJLFtoY9cHsMXUjY6npEtVvyLsSJ28l&id=100011712306784"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/toufic.khedairia/posts/pfbid02z53oWxEWjMydjYjXQA1ZumGfNMwezgr4XR1RNps1Edk6t4ieiNEPJjKQeSuDDBXTl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32NM4B2"
    },
    "102": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-petrole-et-l-augmentation-rapide-de-la-concentration-en-CO2-ont-bien-un-effet-deletere-sur-le-climat/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Le pétrole et l'augmentation rapide de la concentration en CO2 ont bien un effet délétère sur le climat",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-petrole-et-l-augmentation-rapide-de-la-concentration-en-CO2-ont-bien-un-effet-deletere-sur-le-climat/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.337V64D",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Aliyah01150546/status/1618483768091881473"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Cyrille68695905/status/1620027034507571201"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Elpis_R/status/1617527676021112842"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/truchotphilipp1/status/1618996425475629058"
                    },
                    {
                        "@type": "Article",
                        "url": "https://vk.com/video619957860_456240501"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/VincentL.James.Panam/posts/pfbid0JPzajCWPFyw6kGdGptV7TTttufkw1FPe2gM9hmk2MNWLq8wHoqq7Asfkxf6hihF9l"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/graziella.isabettini/posts/pfbid0DMdxxf5i1ZsNG4bWzcqyiTB4uJmkgxySddoMWm2XrHmvcv5hm9Ph2FtZuWNjrAQNl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/guyclnn/posts/pfbid02PaDCb7NfuxBaDApHgETymhYVx9aTcxkjtN2HQeNzRn5ZbUDRJFrpgbYXSqzqugsTl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/hugo.stultjens.1/posts/pfbid02wrcpmrJep2rRbxVsjxtZp5gUaKuzBrs12Xb9QM8bAx3GbdKoPQ1vvpVVPPxuUrRvl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/lionel.rousset1/posts/pfbid02YPkXeQZ2Pu6xrMrprkB2aDnaa4W4GL5rT2YbsQh6RhXUqJHDBqM2jEzZqsoNTBcSl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0f2ia4oFeVUUVNHDHZxNnmgsAUburK4UVzkLWppgV6Uow31jweG7g6gtWCZRgUwGcl&id=100081096082036"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.337V64D"
    },
    "103": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-prix-Nobel-Yoshinori-Ohsumi-n-a-pas-recommande-le-jeune-pour-guerir-le-cancer-et-Alzheimer/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Le prix Nobel Yoshinori Ohsumi n'a pas recommandé le jeûne pour guérir le cancer et Alzheimer",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-prix-Nobel-Yoshinori-Ohsumi-n-a-pas-recommande-le-jeune-pour-guerir-le-cancer-et-Alzheimer/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32L47ZC",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/laurent.navarro.35/posts/pfbid02LFEhAzkuUxd6nVpuXNy7ddQNwfsc5M4Kt6hBJH9HU8o3YzMDyGn7gW4y4ApjFUe8l"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.observelemonde.com/2022/05/18/autophagie-quand-le-corps-humain-a-faim-il-se-mange-eliminant-toutes-les-cellules-malades-cancers-alzheimer-vieillissement-etc/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32L47ZC"
    },
    "104": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-vaccin-illegal-et-dangereux-quatre-fois-plus-de-morts-chez-les-vaccines-au-Royaume-Uni-attention-a-ces-propos-de-Christian-Perronne/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Le vaccin \"illégal\" et dangereux, quatre fois plus de morts chez les vaccinés au Royaume-Uni : attention à ces propos de Christian Perronne",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Le-vaccin-illegal-et-dangereux-quatre-fois-plus-de-morts-chez-les-vaccines-au-Royaume-Uni-attention-a-ces-propos-de-Christian-Perronne/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9T66WQ-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://crowdbunker.com/v/NfQBHPu6Ns"
                    },
                    {
                        "@type": "Article",
                        "url": "https://crowdbunker.com/v/iQ5eHPdu"
                    },
                    {
                        "@type": "Article",
                        "url": "https://lactudissidente.com/le-pr-christian-perronne-se-lache-completement-sur-cnews/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://lemediaen442.fr/le-pr-perronne-sur-cnews-en-grande-bretagne-les-vaccines-meurent-4-fois-plus-que-les-non-vaccines/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://vk.com/video-196706353_456239959"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.businessbourse.com/2021/11/22/est-ce-que-les-vaccins-protegent-des-formes-les-plus-graves-professeur-perronne-absolument-pas-cest-linverse-qui-se-produit-langleterre-montre-linverse-israel-montre-linverse/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.bvoltaire.fr/la-charge-du-professeur-perronne-contre-le-vaccin-anti-covid/"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/Inspiration.Guadeloupe/posts/pfbid02Eh4pTteexGAN8J7X3ArctPmZYBRag6Ln89rKFaj94jFgxmHKhKmYFcXJnBKLWzrgl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/Inspiration.Guadeloupe/videos/198616602432326/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/LePaveLorrain/posts/pfbid0eqaWTMuje36LmBiUxE6yjqGWjoq5rWmXxreE8crvqLUupUXXeD8ZQUbLV1Y8nA17l"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/ntdfrancais/posts/pfbid02f2VsGQV33LpSs4mVX6VgL2sYDG3NMVz96z2uYRdTgf2eFaiT2eNuZE9GxvyqWsBbl"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.lelibrepenseur.org/covid-19-interview-du-pr-christian-perronne-sur-cnews-21-nov-2021/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.wikistrike.com/2021/11/pr-christian-perronne-le-vaccin-ne-protege-absolument-pas-des-formes-graves-c-est-meme-tout-l-inverse-qui-se-produit.html"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.youtube.com/null"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.youtube.com/watch?v=bj6PcWBgVN4"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.youtube.com/watch?v=qE2pQ8s6JlE"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9T66WQ-1"
    },
    "105": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Les-frontieres-de-la-France-fermees-a-partir-du-1er-novembre-Une-interpretation-erronee-d-un-dispositif-Schengen/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Les frontières de la France fermées \"à partir du 1er novembre ?\" Une interprétation erronée d'un dispositif Schengen",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Les-frontieres-de-la-France-fermees-a-partir-du-1er-novembre-Une-interpretation-erronee-d-un-dispositif-Schengen/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32M9948",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Vpauline006/status/1584445644529287169"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid037Lbm9FWaEk93Df7eDmNYCAewuGYLhs6pjQ2EAUzgWKMCC3YboP58G7VFNZHJhd1Tl&id=100085798128428"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0GJ1Ghaq2RrasxyRPDPBrZuEEAmRk6cmYE6rqFZnMTEYyW75S4fFYF5vmFTQymnHsl&id=100084418611621"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0sN3VSGmTK78wY3vp3ygCwBd4CT3q3sQtz71T1fHHEv5Ws2jDgg6J2vTA1eprKDmwl&id=100078503439839"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32M9948"
    },
    "106": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Les-multinationales-imposees-entre-0-et-15-Attention-a-ce-raccourci/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Les multinationales imposées entre 0 et 15% ? Attention à ce raccourci",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Les-multinationales-imposees-entre-0-et-15-Attention-a-ce-raccourci/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32JA7HZ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/vincent.trepan.9/posts/pfbid02AuZ72Xdevy52go9Mwd7cfbhZDGxvs2vut1N4RFx1LFeExZqAFCKhuignmpV4LdtKl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32JA7HZ"
    },
    "107": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Les-roux-qui-disparaitraient-a-cause-du-rechauffement-climatique-itineraire-et-retour-d-une-rumeur-infondee/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "\"Les roux qui disparaîtraient à cause du réchauffement climatique\" : itinéraire et retour d'une rumeur infondée",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Les-roux-qui-disparaitraient-a-cause-du-rechauffement-climatique-itineraire-et-retour-d-une-rumeur-infondee/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32M44XY",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://citations.tn/le-saviez-vous/le-saviez-vous-les-roux-vont-disparaitre-dici-2060-dapres-le-national-geographic/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://hitek.fr/actualite/disparition-des-roux_3197"
                    },
                    {
                        "@type": "Article",
                        "url": "https://mobile.twitter.com/SavoirDuMonde/status/1581778424133488640"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/SavoirDuMonde/status/1189162843788271618"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/SavoirDuMonde/status/1469453284431781889"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/lafemmedomineOFF/posts/pfbid02WaoMLQcWPixCZBj3FEvcDhnPsPdNmATDSNuvE8oBNjK3kAmjkXaZqQnQwXZvKVutl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32M44XY"
    },
    "108": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Les-sagas-Matrix-et-Terminator-plagiees-de-l-uvre-d-une-scenariste-afro-americaine-C-est-faux-selon-la-justice/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Les sagas \"Matrix\" et \"Terminator\" plagiées de l'œuvre d'une scénariste afro-américaine? C'est faux, selon la justice",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Les-sagas-Matrix-et-Terminator-plagiees-de-l-uvre-d-une-scenariste-afro-americaine-C-est-faux-selon-la-justice/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32B34VV",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/legamguiratoofficial/posts/pfbid0khmUTSGbfn9gxgxd7WLEBHEekBmUq1DcBi7tn1NYSnNZ7kJVKyNSTXqC2iTt2kqel"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32B34VV"
    },
    "109": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Les-vaccins-anti-Covid-adaptes-a-Omicron-pas-testes-sur-les-humains-Attention-a-ces-allegations-trompeuses/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Les vaccins anti-Covid adaptés à Omicron \"pas testés sur les humains\" ? Attention à ces allégations trompeuses",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Les-vaccins-anti-Covid-adaptes-a-Omicron-pas-testes-sur-les-humains-Attention-a-ces-allegations-trompeuses/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32JV94Z",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://t.me/LeGrandReveil/9497"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/GabinJean3/status/1570358440219770882"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/f_philippot/status/1572473177795862528"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32JV94Z"
    },
    "110": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Mbappe-face-a-six-joueurs-adverses-pendant-le-quart-de-finale-France-Angleterre-C-est-un-photomontage/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Mbappé face à six joueurs adverses pendant le quart de finale France-Angleterre ? C'est un photomontage",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Mbappe-face-a-six-joueurs-adverses-pendant-le-quart-de-finale-France-Angleterre-C-est-un-photomontage/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.333942H",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Rouumms/status/1601689607485079553"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/1520052414905419/permalink/3436567999920508/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/164664795581084/permalink/475526737828220/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.333942H"
    },
    "111": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Mortalite-la-France-sortie-de-la-plateforme-Euromomo-Un-probleme-de-donnees-temporaire/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Mortalité : la France \"sortie\" de la plateforme Euromomo ? Un problème de données temporaire",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Mortalite-la-France-sortie-de-la-plateforme-Euromomo-Un-probleme-de-donnees-temporaire/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.334W2NT",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/cathy.pinheiro.7/posts/pfbid02LZoUpDRVU9XTPfPaxay5Fu6tqV7XroHYF1rzi3xbqRziu5b31TFfM8qRrFZciMa7l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/michel.bollo/posts/pfbid0dTRC3NJ4NcSmQWd8xKBcmsFsgi2EDiQaAq31eoDJ5LsCxgufmyH87zLD8MA2sNQRl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.334W2NT"
    },
    "112": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/N-ouvrez-pas-la-fenetre-attention-a-ces-pretendus-conseils-a-suivre-a-bord-d-une-voiture-immergee/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "\"N’ouvrez pas la fenêtre\" : attention à ces prétendus conseils à suivre à bord d'une voiture immergée",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/N-ouvrez-pas-la-fenetre-attention-a-ces-pretendus-conseils-a-suivre-a-bord-d-une-voiture-immergee/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32C94JK",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/AllFleetCars/posts/pfbid0PEzSgfSVxEsyjevC7ikkAmrDQki6KbyNf7seZo6PvdeW6Ra5DXCMkgendUy39Lwfl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/aline.fauvel.5/posts/pfbid025KkGSrUzA2NaVt1thsf6yBpLRAP48AD5XDN3VK79zeru4FMRdCrnEfJq5RAzAGRrl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/angie.pallentier.1/posts/pfbid0EzYNcmwrmKEvFLgAFJwLHiQtVjFcEfgStETH22u7KGKgLHiZ7MVf3GDQDSaD2pe9l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/bedadurire2020/posts/pfbid0vo8iHjebjCi5GQ2bSEvH96sQTVxzqK4AKnvtHCC1HtA4CQnnmSaiPc9Ph1v8rKGHl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/lasouedraogo7/posts/pfbid0skS2M48MU7MJfCrK6xmkGc6pGocznj22Ghamfimqb1Lvgow4YrGWGBo6yeuiydAxl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/lcatona/posts/pfbid03GpQ3NUabJHxrEqcZ1EcefFq9wJPTAM75AHgepL3cq9fYiZjk3ngsS2mgtcoCkNCl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/maitey.stdenis/posts/pfbid0Rh5DiLMHmBgV2K2vsB97NBKd3Z2oQ3LSmTEtaRv8Bmi81NG2jBtYXj2xUTQBnqowl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02VB13ccKK3fqHNMnUfaWSqsHHbtRhmSN39J4m9WStwfATctmzx7Cmbxq5FSaVYY88l&id=153605088322714"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/semieremorque/posts/pfbid0rrtHfPtjGyzZdupkksWsMmyMNwR6nBhEocqbxwtMcap3SH7edcRREkwTtVGYsVBxl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sophie.lagache.969/posts/pfbid0oH4LBidcbG24QFenL8PtmG3QQ88rn2KmyrUxqYoLd9JVNAksLRiuF2a2mMRGWkjMl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32C94JK"
    },
    "113": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-22-500-gilets-jaunes-n-ont-pas-ete-prives-de-leur-droit-de-vote/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, 22 500 gilets jaunes n'ont pas été privés de leur droit de vote",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-22-500-gilets-jaunes-n-ont-pas-ete-prives-de-leur-droit-de-vote/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.328L927",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/MichaelVllt/posts/pfbid02usWbJEpCJr114bqZzhasS9eLEkaA7g1tsFb78NZB3YqDaKWVS6Sh6ykPVZY3SQK3l"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/groups/654772748695082/permalink/1134640627374956/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.328L927"
    },
    "114": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Christine-Lagarde-n-a-pas-annonce-la-fin-de-l-argent-liquide-dans-l-UE/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, Christine Lagarde n'a pas annoncé la fin de l'argent liquide dans l'UE",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Christine-Lagarde-n-a-pas-annonce-la-fin-de-l-argent-liquide-dans-l-UE/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.334X7TN",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/yaher_m/status/1605301796003581953"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0Sp44UvRC9EtUtWBk8vQunggzrbnaVjkKjCzUzy37rRXw7xRLWQjQ1VBShQdGEmUkl&id=100078728119357"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.tiktok.com/@raim8772/video/7171947490458045702?item_id=7171947490458045702"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.334X7TN"
    },
    "115": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Emmanuel-Macron-n-est-pas-arrive-en-tete-sur-100-des-appareils-de-vote-electronique/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, Emmanuel Macron n'est pas arrivé en tête sur \"100% des appareils de vote électronique\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Emmanuel-Macron-n-est-pas-arrive-en-tete-sur-100-des-appareils-de-vote-electronique/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32937HT",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://mobile.twitter.com/Jaspe_rouge/status/1517895929944326149"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/MarquisedesAng4/status/1518839767932227584"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32937HT"
    },
    "116": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Gabriel-Attal-n-a-pas-annonce-la-mise-en-place-du-vote-electronique-pour-l-election-presidentielle/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, Gabriel Attal n'a pas annoncé la mise en place du vote électronique pour l'élection présidentielle",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Gabriel-Attal-n-a-pas-annonce-la-mise-en-place-du-vote-electronique-pour-l-election-presidentielle/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9T839Y-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/PhilippeMurer/status/1462808046229508106"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.businessbourse.com/2021/11/23/gabriel-attal-annonce-que-le-gouvernement-va-mettre-en-place-le-vote-electronique-pour-la-presidentielle-pire-que-le-vote-par-correspondance-il-permettra-des-fraudes-massives-inverifiables-tous-le/"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/francoise.gasc.5/posts/pfbid02QgRgF3X3xPSshkY9RqnWJw2kDAA821FfAiXFPY6WeKe5d5kC21tuREN2fg3t7fzAl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/groups/248472082749268/permalink/974227180173751/"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/jeanchristophe.mathiot/posts/pfbid0jZuz4Tobhbk66LYRmSBaLZnriNdZgVb2VBoT2sZEtYs8dBFhDgAQxke1z9pDmCSel"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/jeanclaude.butstraen/posts/pfbid026vuKyjGk49zxMkrKqvWbH3R9vdKMsb4wMLPjRLVZJftPmQXBb2Vvpgp2zcHQdMCml"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02451hVsq5ruZVgDphtSb4U1C2YfwokLZztmgsDUKm1S2YQeQuaCGseoWpPMYqDeLxl&id=100069996758766"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02pFjiPgSUyxkh1L8EVVThFBshdAtHpv4HbHeaFaJQQUu5E1kcRQy61oYj5SgBrtVcl&id=348812011910"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0344aJVqupiYwmiKhordfKSnWyjVHzAgZvbWj6mccpgQNJ3LTofcpTqkYYrEUYBbFUl&id=100072396501047"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid08vtGYx4TaPdiz8sHraU96so7Tcc1VxpfwpwdvyWEHKm4QejwHFnjBP83vtkAiwrvl&id=100008250454375"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sonjagsc1970/posts/pfbid02Et6bZbWzZUB9CNeVDYe75x7DtiHoSnJn63hVgpMtUTaAwVvzGQHBvZsH9pdeba3cl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/sophrologie.provence.5/posts/pfbid036czTjGbYNXReZ2k4oZiwQXJhuRVzpAfthZLTvJLXr44HRkYTcKZECyEss2Vfi3Lgl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9T839Y-1"
    },
    "117": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Klaus-Schwab-n-a-pas-ete-arrete-par-la-police-en-Suisse/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, Klaus Schwab n'a pas été arrêté par la police en Suisse",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Klaus-Schwab-n-a-pas-ete-arrete-par-la-police-en-Suisse/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RV8XZ-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://beesbuzz.com/blog/3049/klaus-schwab-arr%C3%AAt%C3%A9-%C3%A0-son-domicile-en-suisse-alors-que-la-tendance-est-au-g/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://ns2017.wordpress.com/2021/11/14/klaus-schwab-arrete-a-son-domicile-en-suisse-alors-que-la-tendance-est-au-pandemie-conservative-beaver/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://ns2017.wordpress.com/2021/11/15/klaus-schwab-arrete-qua-fait-le-president-du-wef-klaus-schwab-a-ete-arrete-hier-a-son-domicile-de-cologny-en-suisse/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid07YweLbbS1X68NHYQaxUEkKdu7HrQoSj4KsYpbDbnTFHo1uFu4VsgXgVE2tBRjiEil&id=100074485961364"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RV8XZ-1"
    },
    "118": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Klaus-Schwab-n-a-pas-felicite-les-dirigeants-de-l-UE-pour-avoir-mis-des-puces-dans-l-ensemble-de-la-population/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, Klaus Schwab n'a pas félicité les dirigeants de l'UE pour avoir mis des puces dans l'ensemble de la population",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Klaus-Schwab-n-a-pas-felicite-les-dirigeants-de-l-UE-pour-avoir-mis-des-puces-dans-l-ensemble-de-la-population/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32M94T2",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid022d93WECAsXfnLitz9kPPbS5RTCnbznAdviisHVutfEUS3CTZB8BEZpqTxaCHUxb8l&id=100008135322380"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02wiD4s1YuVBeYBBawpcn6vpwz5rFLVaKJkybCt5cwNMXBmQ8QkNBocaxsz4uPzm6il&id=100069122473555"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0WsBYE2is5jqc7sRDnLbXkkXfzA5gzfJNXMD5HQrPqfs1mLv2zqppMPD4cyJbC4mNl&id=100005925138389"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32M94T2"
    },
    "119": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Sante-Publique-France-n-a-pas-revu-a-la-baisse-le-bilan-des-deces-lies-au-Covid-19/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, Santé Publique France n'a pas revu à la baisse le bilan des décès liés au Covid-19",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Sante-Publique-France-n-a-pas-revu-a-la-baisse-le-bilan-des-deces-lies-au-Covid-19/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9UM38A-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://lecourrierdesstrateges.fr/2021/12/11/selon-sante-publique-france-il-y-a-moins-de-55-000-morts-du-covid-en-france-depuis-2019/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9UM38A-1"
    },
    "120": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Viktor-Orban-n-a-pas-annonce-que-la-Hongrie-allait-quitter-l-UE/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, Viktor Orban n'a pas annoncé que la Hongrie allait \"quitter l'UE\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Viktor-Orban-n-a-pas-annonce-que-la-Hongrie-allait-quitter-l-UE/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.336X7G6",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Emma71425143/status/1609669035276263424"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/humourbiglol/status/1609912655543783425"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/bartalli.sud/posts/pfbid09E96UCwx6ajKCQzkjzTjw5gNTwJuLbBdYm38MV1jZD6bmejpaxF7vT22yTbzF263l"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/gorsse/posts/pfbid0a7a2zsHCMpiM2HUWUpRC8ADnC2ZAB4UXcjF4Z4HZZsQTH5G27PThVMZx5djRXJ9il"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.336X7G6"
    },
    "121": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Vladimir-Poutine-n-a-pas-ignore-la-poignee-de-main-d-Emmanuel-Macron/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, Vladimir Poutine n'a pas ignoré la poignée de main d'Emmanuel Macron",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Vladimir-Poutine-n-a-pas-ignore-la-poignee-de-main-d-Emmanuel-Macron/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.9YM7U4",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/nabil.mahjoubi/posts/pfbid0BT1SBMY1aJnG3YCsEG7BC4rd4GT1hB5CrZy7gjjJVuLYk1Gdm6K2h4SJUMQDkCWTl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.9YM7U4"
    },
    "122": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Volodymyr-Zelensky-n-a-pas-vendu-17-millions-d-hectares-de-terres-agricoles-ukrainiennes-a-des-multinationales-americaines/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, Volodymyr Zelensky n'a pas vendu 17 millions d'hectares de terres agricoles ukrainiennes à des \"multinationales américaines\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-Volodymyr-Zelensky-n-a-pas-vendu-17-millions-d-hectares-de-terres-agricoles-ukrainiennes-a-des-multinationales-americaines/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32KN6HY",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://lecourrierdesstrateges.fr/2022/08/16/des-entreprises-americaines-se-sont-largement-appropriees-les-terres-agricoles-ukrainiennes/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/KitineChristi4/status/1554855171393523719"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/LoetitiaH/status/1562160605255041025"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/NoirDhaysir/posts/pfbid02gWfYJJyDXYCzqzdgkcKuHKdavxSsuY7TWgdFA4FM7Beof287BxCDqdgaP8yHv8d9l"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/dlrmoselle.dlrthionville/posts/pfbid02TcMhKdXULXUpsZDPbGQQa5EEaaZt5okPLe4VCnn3a6JAWQsi1NRo9MC9ZGtryz1Ql"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/elisabeth.descoteixgaillot/posts/pfbid0c17CWue3g7DGGY1G5CR7b8A4eFZJTHmSJrZVLdknpaw3iCUzj7ETyu69m3E46cNHl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/patrick.emile.923/posts/pfbid0UGFhBwgL5K6t3yAkNXrKdFdfk3GQpLKizMa5J2QVWGxRqsi5UW1kzxJ3BAB4HNuPl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/serge.henry.60/posts/pfbid02cS1LKtpVufypCSjFDr6uBg9m9GS2JDL16APRD5bSeSGnmXfKLBKRQuPuheg57FiGl"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.librairie-tropiques.fr/2022/08/se-faire-du-ble-en-ukraine.html"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32KN6HY"
    },
    "123": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-ce-drapeau-fait-de-cheveux-ne-fait-pas-reference-aux-manifestations-en-Iran/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, ce drapeau fait de cheveux ne fait pas référence aux manifestations en Iran",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-ce-drapeau-fait-de-cheveux-ne-fait-pas-reference-aux-manifestations-en-Iran/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32LM6HT",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/mompontet/status/1573967346019991552"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/yassinebarkech/status/1574187859887677442"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/11Pipinette1/posts/pfbid0uqewpnF67vyXqT6Te5zj1zcyBYMVFCoCTniwXmepcbccvm2YzTqLiBo8Xn4BxELJl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0DQFz9XCJJ1jeiZSdCGXzaaTySTP6gfCFodA5Z4rhXvpKxwCxfyhNzzPAPb8yyJf4l&id=100009086748153"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/philippe.veyrier.1/posts/pfbid02AHJBNUhaYx6hvxyzmqJBKa1SUnDK3pSRM2h7SNFUjRyLW9q1yiEHupRCbCimHVmPl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32LM6HT"
    },
    "124": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-ce-pretre-mexicain-qui-s-est-evanoui-lors-d-une-messe-n-est-pas-mort-apres-avoir-ete-vaccine-contre-le-Covid/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, ce prêtre mexicain qui s'est évanoui lors d'une messe n'est pas mort après avoir été vacciné contre le Covid",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-ce-pretre-mexicain-qui-s-est-evanoui-lors-d-une-messe-n-est-pas-mort-apres-avoir-ete-vaccine-contre-le-Covid/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TF6BT-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Diogene_2020/status/1463253536553193474"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Krieger66362259/status/1463603201815584770"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Maya29854628/status/1463218567311204363"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/deosangel/posts/pfbid0EnRFh3Xmsj85pGrZCdTChgJaUAoU27PPW6ri5LQHphahcYobVB4Aa4HJd3ZmWpQ4l"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/franck.kerdraon.94/posts/pfbid02h4fS2TU5hUJfhUc2FoyPU1yS88M5i39a8kikv7zvXbXhjRsaskLxwViPRTNY31B3l"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/groups/1266342927037715/permalink/1572668176405187/"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/patricia.corsini.779/posts/pfbid0bwcXhf8ModWgs7Qu6CLZgawjGRmjexwTiQGf5FTNvnGgRcSJJXKYFQYQYryTCRhfl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02KSVfLFjN97jscE8AQLokwYLY4AGXRiUkSdyvbCRNw1NNwjuWsab1npsd12rW35tAl&id=100075265621122"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0YRwGmgYgPw9pgva2Goau6fyoFxH5JebLbHNgjDVN885nh7ZXc5QL4hsmtSydcCsml&id=100070732513728"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/rick.messai.5/posts/pfbid02GcF3bScKsiSm9FX4HTaRSUk2NGzQJAEo9idHYU15vk9GLRqNMmvNifGMiQV7cm4sl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/viviane.vandewalle/posts/pfbid0mXbsZSUz8iH84dZWkJjWDfwxhkcf53ourLiT4etjyiY6Pez9Gs6fauXRsMHFe1fol"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TF6BT-1"
    },
    "125": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-ces-chiffres-britanniques-ne-prouvent-pas-les-vaccins-sont-inefficaces/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, ces chiffres britanniques ne prouvent pas les vaccins sont inefficaces",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-ces-chiffres-britanniques-ne-prouvent-pas-les-vaccins-sont-inefficaces/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32F429B",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://fr.sott.net/article/40409-Royaume-Uni-90-des-deces-dus-au-COVID-depuis-avril-sont-survenus-parmi-les-personnes-triplement-vaccinees"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32F429B"
    },
    "126": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-ces-images-ne-montrent-pas-l-ex-footballeur-Didier-Drogba-en-train-de-se-convertir-a-l-islam/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, ces images ne montrent pas l'ex-footballeur Didier Drogba en train de se convertir à l'islam",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-ces-images-ne-montrent-pas-l-ex-footballeur-Didier-Drogba-en-train-de-se-convertir-a-l-islam/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32N96YK",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/maroclife01/posts/pfbid02TKkshbAdPFmaV5fk4VFqPoez51x4Bv5YuEUcKDugS4jjG61bjm8BRfuiqcBGp7y9l"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32N96YK"
    },
    "127": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-araignee-n-est-pas-consideree-comme-etant-mortelle-pour-l-homme/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, cette araignée n'est pas considérée comme étant mortelle pour l'homme",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-araignee-n-est-pas-consideree-comme-etant-mortelle-pour-l-homme/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RN9E4-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid09XWCuCK1sJMHXPxMptNQDY4Ujpk4Rv1UwYjgtLpW6Uxb2NYx28TWNnKihVTXpeFxl&id=100063456546486"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RN9E4-1"
    },
    "128": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-etude-ne-montre-pas-une-augmentation-de-la-mortalite-infantile-due-a-la-vaccination-anti-Covid/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, cette étude ne montre pas une augmentation de la mortalité infantile due à la vaccination anti-Covid",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-etude-ne-montre-pas-une-augmentation-de-la-mortalite-infantile-due-a-la-vaccination-anti-Covid/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.33677QA",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://t.me/aubontouite_francais/2936"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Dukaandy1/status/1607546519665737728"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Fart47404663/status/1607321944197844992"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/aston_bebere/status/1607435877973729281"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/kouliomj.richard/posts/pfbid02fiFVAwZu8QTMnCiXoWv8ESqWN8ELaJpptYMJeibBCGhWDoW6VDcv1pzhQzvr7s2tl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.33677QA"
    },
    "129": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-mannequin-n-est-pas-entree-au-Guinness-des-Records-pour-sa-couleur-de-peau-tres-sombre/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, cette mannequin n'est pas entrée au Guinness des Records pour sa couleur de peau très sombre",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-mannequin-n-est-pas-entree-au-Guinness-des-Records-pour-sa-couleur-de-peau-tres-sombre/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9U463J-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02JwLQguaSRfvzdmQjtMHZKaSCQBGph8cue6zuYSMAfcPfbFxYGuZh81tTbMMpHPyhl&id=100010289118883"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0pw44EdQQnZjcyMV4DMaXPuFAfQJaaQr2FRbwrMLgGBrNjYPxDRaCm1Kn6zJxjUt1l&id=100011158932553"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9U463J-1"
    },
    "130": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-photo-d-Adolf-Hitler-et-d-Eva-Braun-n-a-pas-ete-publiee-dans-le-magazine-Vogue-en-1939/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, cette photo d'Adolf Hitler et d'Eva Braun n'a pas été publiée dans le magazine Vogue en 1939",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-photo-d-Adolf-Hitler-et-d-Eva-Braun-n-a-pas-ete-publiee-dans-le-magazine-Vogue-en-1939/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32FV4GT",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Myrbeck/posts/pfbid02oqPC2V8jxTUdgK4NkwRp4gMPKEEEFNPXWoMsFoaS6rnFbcmxiK4DfEuY7FrwZQnUl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/PackCJD/posts/pfbid028XBh1kPCgn1ZDNMzYXNDaFxXutTA4Y8wLuTYa7fMSEYvdBgsnpihJg36gjzD25Erl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/cyrille.germain.7/posts/pfbid0rzxzZA6x8tmyoLJDdGViSLPHhzmt96Foy71XN9B2YdGay7ydWmUPgJFZm2ceWiXhl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/frederic.schlesser1/posts/pfbid07WsJ4kFiNNiH4YqQsC19Xwnjfed6webAaNvY2QxbLQBMXDKo7mK7pnizjT9L5ApLl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/laura.keffelec/posts/pfbid0nuyqJby7R2hfPPn2SCxjk5ArtCwGTtoMnZfCe5mWP9k4WkPFyyurRshZNVQSKaAel"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid028tbDUhx8VDFh51jAdtRpoepM8ZUvvHhApQStt2npHapg9tdjdfvQfYjQRrsWwZR1l&id=100017105118269"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32FV4GT"
    },
    "131": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-photo-ne-montre-pas-un-homme-politique-bresilien-corrompu-ligote-a-un-poteau-par-ses-concitoyens/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, cette photo ne montre pas un homme politique brésilien corrompu ligoté à un poteau par ses concitoyens",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-photo-ne-montre-pas-un-homme-politique-bresilien-corrompu-ligote-a-un-poteau-par-ses-concitoyens/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32C2863",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Fin2Games/status/1533087879588610049"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Soonx3/photos/a.273666745999998/946015915431741/?type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/contempteur/photos/a.429576134052883/429576080719555/?type=3"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32C2863"
    },
    "132": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-potion-a-base-de-miel-ne-soigne-pas-le-VIH-et-l-hepatite/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, cette potion à base de miel ne soigne pas le VIH et l’hépatite",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-potion-a-base-de-miel-ne-soigne-pas-le-VIH-et-l-hepatite/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32GD6BR",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/MamanAnitiye/posts/pfbid022XTeATJnkyhA9QuK6KikNTtjNwJoZdLRGnWzdxpFcvaLhxdRUjY6nXSXc9bLWbEql"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Pharmacievillage/posts/pfbid02SgJGqJw2o5tLgQ65Je3iF2EdAQCPn1HAEarLkmWEVgi85Wjzx52eZptLeYopMAKCl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32GD6BR"
    },
    "133": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-video-d-un-faux-cadavre-n-est-pas-une-mise-en-scene-de-l-armee-ukrainienne-a-Boutcha/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, cette vidéo d'un faux cadavre n'est pas une mise en scène de l'armée ukrainienne à Boutcha",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-video-d-un-faux-cadavre-n-est-pas-une-mise-en-scene-de-l-armee-ukrainienne-a-Boutcha/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32873VJ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/pretreSn/posts/pfbid0mcxFKNTwdDP9z4sb9rRn7BBeAQEhaCwBamK8ywyQhtCfBoAKe8ufyAvRFnnmyhnvl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32873VJ"
    },
    "134": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-video-d-un-immeuble-qui-s-effondre-n-a-pas-ete-filmee-apres-le-tremblement-de-terre-en-Turquie/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, cette vidéo d'un immeuble qui s'effondre n'a pas été filmée après le tremblement de terre en Turquie",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-video-d-un-immeuble-qui-s-effondre-n-a-pas-ete-filmee-apres-le-tremblement-de-terre-en-Turquie/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.338V3Y8",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://www.tiktok.com/@gabrielfanguin/video/7196986862249069829?q=turquie+tremblement+de+terre&t=1675938571861"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.338V3Y8"
    },
    "135": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-video-d-un-pretre-frappe-dans-une-eglise-ne-s-est-pas-deroulee-en-France/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, cette vidéo d'un prêtre frappé dans une église ne s'est pas déroulée en France",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-video-d-un-pretre-frappe-dans-une-eglise-ne-s-est-pas-deroulee-en-France/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.339R7EB",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/GWGoldnadel/status/1627940880811458562"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.339R7EB"
    },
    "136": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-video-ne-montre-pas-un-depute-francais-pointant-pour-ses-collegues-absents/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, cette vidéo ne montre pas un député français pointant pour ses collègues absents",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-video-ne-montre-pas-un-depute-francais-pointant-pour-ses-collegues-absents/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.329E2VY",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://gettr.com/post/p16okq037fc"
                    },
                    {
                        "@type": "Article",
                        "url": "https://t.me/HocineLeDZ/4250"
                    },
                    {
                        "@type": "Article",
                        "url": "https://t.me/akounamatatatv/15986"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/HTTP_404_NotF/status/1517161210843746305"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/atembaldo/posts/pfbid0AufXKBvh8aVpqFt9FunPCb8CbaZk89ScF8NACDrcMCZDv1iisTRC9UUATQPWEvKLl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0GXsjkZKWAsJaDrosxLGEz4t3rtQhcTFwKLMPrbCHDRsKGx2S8Hz5zNkx9E4ZT4pYl&id=100069996758766"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.tiktok.com/@skywatchh/video/7089697481369357573?preview_pb=0&share_item_id=7089697481369357573"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.329E2VY"
    },
    "137": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-video-ne-montre-pas-un-faux-camp-ukrainien-a-Nantes/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, cette vidéo ne montre pas un \"faux camp ukrainien\" à Nantes",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-cette-video-ne-montre-pas-un-faux-camp-ukrainien-a-Nantes/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32649JV",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid06pF16b8eram2bsnNHQsx3bdQr1TY7LNyxR2CT8ZprDkkSB4JrT3iUCdVwwGYxKnfl&id=100078090192273"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32649JV"
    },
    "138": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-des-brigades-de-la-mort-n-ont-pas-ete-envoyees-dans-des-EHPAD-pour-euthanasier-les-personnes-agees-avec-du-Rivotril/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, des \"brigades de la mort\" n'ont pas été envoyées dans des EHPAD pour \"euthanasier\" les personnes âgées avec du Rivotril",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-des-brigades-de-la-mort-n-ont-pas-ete-envoyees-dans-des-EHPAD-pour-euthanasier-les-personnes-agees-avec-du-Rivotril/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32WG98T",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/GillesWell/status/1597342670380478464"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/HamelinMd/status/1589552735766343681"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/LeMediaEn442/posts/pfbid0DJ9GiAvvJbUmyuYxH8NJgRKmbggSD3dTDfwLmn2KRYSBrxYifckrWBYDLGjTLSKEl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/groups/1816453735269260/permalink/3372590162988935/"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/groups/250350359176207/permalink/1138106583733909/"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/groups/284878825782712/permalink/1187084672228785/"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/groups/ericzemmourpresident2027/permalink/1100399803966891/"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid034V38p1LEqFno4nJYGQ6bZoiMduZ2iR2qvNnVNaNmjDXxLAKbgTb8c5JtKY5P5kj9l&id=433992737021860"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0828rf4XKB2SbRgygiz1XdXkBRgYL6c2bGenG9EhJbm9cnJfftiKt5vP98v569ANSl&id=100085850476294"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0QEsZa5T3zF6R7V465Rf57BWCzoueqECffsDXJqARLHBC7ncFxLpdw6SUX6ykwZ5ol&id=100064692520555"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32WG98T"
    },
    "139": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-des-documents-de-Pfizer-divulgues-par-la-FDA-ne-revelent-pas-que-les-vaccins-ont-cause-3-de-mortalite-lors-des-essais-cliniques/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, des documents de Pfizer divulgués par la FDA ne révèlent pas que les vaccins ont causé \"3% de mortalité\" lors des essais cliniques",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-des-documents-de-Pfizer-divulgues-par-la-FDA-ne-revelent-pas-que-les-vaccins-ont-cause-3-de-mortalite-lors-des-essais-cliniques/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9V68HQ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "http://reseauinternational.net/la-justice-americaine-oblige-la-fda-a-divulguer-les-documents-pfizer-cest-explosif/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/FLyMachabert/status/1466706329469345795"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/PaulMaxit/status/1466383582260350976"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.medias-presse.info/la-justice-americaine-oblige-la-fda-a-divulguer-les-documents-pfizer-cest-explosif/150511/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9V68HQ"
    },
    "140": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-des-meres-sans-pass-sanitaire-ne-sont-privees-de-voir-leur-bebe-a-l-hopital-de-Lucerne-en-Suisse/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, des mères sans pass sanitaire ne sont \"privées de voir leur bébé\" à l'hôpital de Lucerne, en Suisse",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-des-meres-sans-pass-sanitaire-ne-sont-privees-de-voir-leur-bebe-a-l-hopital-de-Lucerne-en-Suisse/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9QZ6D3",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://emakrusi.com/video/41-20-10-2021-des-mamans-privees-de-voir-leur-bebe/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://odysee.com/-41----20.10.2021----Des-mamans-priv%C3%A9es-de-voir-leur-b%C3%A9b%C3%A9...:868e45bd6ac3922d421f2e5d0ae83554b29e2193"
                    },
                    {
                        "@type": "Article",
                        "url": "https://t.me/Diffusionlibre/766"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Titithebest4/status/1450891362367311874"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/guy.nadales.1/posts/pfbid02gaNssxzTFctzys9dXNpDfRQKsaR31jGqhLr1oLjJYuzFenT3q5Sf7yJL6QmcJ4Mel"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.tiktok.com/@twinizbiche/video/7021609985524223238"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.youtube.com/watch?v=FB7Qz0Kg4-M"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.youtube.com/watch?v=u7cUpglHe7M"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9QZ6D3"
    },
    "141": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-des-taxes-sur-les-paiements-par-carte-bancaire-ne-font-pas-disparaitre-l-argent-apres-50-transactions/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, des \"taxes\" sur les paiements par carte bancaire ne font pas \"disparaître\" l'argent après 50 transactions",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-des-taxes-sur-les-paiements-par-carte-bancaire-ne-font-pas-disparaitre-l-argent-apres-50-transactions/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32NG8KV",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/EricArchambaul7/status/1589020779332521986"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/LoeilJaune/posts/pfbid0KBRaYGqXcv8ZKSKBhBAZAH3GWwAhvPADmPoCwACStYaCV585F4hym9NenDwCoRAyl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/brunchcoffeehuy/posts/pfbid021qpMe7yhbsFpzdaqD17pPtZGRDVjEEETb3AZy6bpdYUmUyyPrAno9oA6TNMvR3Fgl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/emmanuelle.temple/posts/pfbid0hyCEdAPqgGJfDisnjhup6hVPiJ7VWv5DoVNW3jsdjgK7AgfLJ1eBfMaU4UgqgZPml"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/284182619499733/permalink/830042351580421/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/mariecatherine.vincenti/posts/pfbid02nbxcEhu2xg8P3NtLrPAUrDXXRP5TfRJ3LzfuppJ7LLxpp5nfnRCwx9XVtr3VsGYYl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/maryangelgwadalove/posts/pfbid0MJqEYXKxWuvQDa6SjsY2CChzZhMBe8L3qUMcSKaooziXNiUazLLsijtfQo1qcdYQl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/pierrick.argaud/posts/pfbid0TB8ZN35hKEiBzcPfGiCwgZQYVKNdfEpgFiHn3s17nCBjbsCShXWFwhVxZZx7FMGil"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/thierry.schoenauer/posts/pfbid0EH3MiXWQ9SoB4wSnYzQtBV8QLfAExZkiGbG22iuz6ao3tqyKbEcgENk4NJqLKn2dl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32NG8KV"
    },
    "142": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-il-n-est-pas-illegal-pour-les-services-hospitaliers-de-demander-un-test-covid-negatif-avant-une-intervention/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, il n'est pas illégal pour les services hospitaliers de demander un test covid négatif avant une intervention",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-il-n-est-pas-illegal-pour-les-services-hospitaliers-de-demander-un-test-covid-negatif-avant-une-intervention/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32GN2J9",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Julia97962/status/1559796591086690304"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/eric.buzin/posts/pfbid0bTmHek2jEHfnFS3EHqsGWSSZm5K1KVtafp9v9JgXwCrU9VQXVs1bH1ELteLsSoMcl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/oihana.kinka.52/posts/pfbid0cdN9cCDDtics2oBHFZUT57bBEM2XwY72Mjju6Y7MfVRHb96dYTrKsf2GHuTffkmpl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32GN2J9"
    },
    "143": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-il-n-y-a-pas-118-000-deces-de-jeunes-Americains-attribues-au-vaccin-Covid/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, il n'y a pas 118.000 décès de jeunes Américains attribués au vaccin Covid",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-il-n-y-a-pas-118-000-deces-de-jeunes-Americains-attribues-au-vaccin-Covid/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32ZW4XQ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "http://expose-news.com/2022/11/30/usa-118k-children-died-suddenly-covid-vaccine/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://lesdeqodeurs.fr/le-cdc-confirme-discretement-quau-moins-118-000-enfants-et-jeunes-adultes-sont-morts-subitement-aux-etats-unis-depuis-le-lancement-des-vaccins-covid/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32ZW4XQ"
    },
    "144": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-il-n-y-a-pas-eu-un-nombre-record-de-faillites-d-entreprises-en-France-en-2022/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, il n'y a pas eu un nombre \"record\" de faillites d'entreprises en France en 2022",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-il-n-y-a-pas-eu-un-nombre-record-de-faillites-d-entreprises-en-France-en-2022/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.3386296",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/FCOUILBAULT1/status/1618502190108401665"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/christian.weiszberger/posts/pfbid0LatuYhWW2BeQYrsu2BePwVJyPYnheMrHFNNPppuS7zLPUxBFoeV3iJbsT3nEFf4Cl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/groups/178123932307526/permalink/5673851386068059/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.3386296"
    },
    "145": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-il-n-y-a-pas-plus-de-morts-a-cause-des-vaccins-Covid-19-que-de-la-maladie-en-Australie/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, il n'y a pas plus de \"morts à cause des vaccins Covid-19\" que de la maladie en Australie",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-il-n-y-a-pas-plus-de-morts-a-cause-des-vaccins-Covid-19-que-de-la-maladie-en-Australie/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9T66VA",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "http://reseauinternational.net/plus-daustraliens-sont-morts-a-cause-des-vaccins-covid-19-que-de-morts-de-covid-19-en-2021-selon-les-donnees-officielles/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9T66VA"
    },
    "146": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-il-n-y-pas-un-million-de-Francais-victimes-de-myocardites-suite-a-la-vaccination-Covid/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, il n'y pas un million de Français victimes de myocardites suite à la vaccination Covid",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-il-n-y-pas-un-million-de-Francais-victimes-de-myocardites-suite-a-la-vaccination-Covid/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.338E4BT",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/LaureGonlezamar"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/framcoise.loustalot/posts/pfbid02FfkG95MgnCChzKg6fJZWbF7P9sa5NZdrw681KgYqWW1m2AayQidrrVebX7C9f1B6l"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.338E4BT"
    },
    "147": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-l-Allemagne-n-en-a-pas-fini-avec-les-bus-electriques/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, l'Allemagne n'en a pas \"fini\" avec les bus électriques",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-l-Allemagne-n-en-a-pas-fini-avec-les-bus-electriques/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TQ7KM-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/simon.jeanjacques/posts/pfbid0tYxMzA1F7diydyVU4ktQfTnkDsfbspkVGfbBDg6SiK6wPsDsyifdSBjLbWDKhEGWl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TQ7KM-1"
    },
    "148": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-l-ambassadeur-de-France-en-Ukraine-n-a-pas-demissionne/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, l'ambassadeur de France en Ukraine n'a pas démissionné",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-l-ambassadeur-de-France-en-Ukraine-n-a-pas-demissionne/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32LP67J",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/DSauvebois/status/1582484297239638019"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Krieger66362259/status/1582629338830163968"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32LP67J"
    },
    "149": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-l-homme-d-affaires-de-Cologne-victime-d-un-crash-d-avion-n-etait-pas-responsable-de-l-entretien-des-gazoducs-Nord-Stream/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, l'homme d'affaires de Cologne victime d'un crash d'avion n'était pas responsable de l'entretien des gazoducs Nord Stream",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-l-homme-d-affaires-de-Cologne-victime-d-un-crash-d-avion-n-etait-pas-responsable-de-l-entretien-des-gazoducs-Nord-Stream/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32LK9VD",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://mobile.twitter.com/BOCKPATRICK4/status/1576177091636518912"
                    },
                    {
                        "@type": "Article",
                        "url": "https://mobile.twitter.com/LeDuArno1/status/1576179920317091842"
                    },
                    {
                        "@type": "Article",
                        "url": "https://t.me/AntiMacronVSGreatReset/48476"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/jeanaimarre_13/status/1575910373844058112"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32LK9VD"
    },
    "150": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-l-importante-couverture-de-neige-dans-l-hemisphere-nord-ne-signifie-pas-que-les-emissions-de-CO2-ont-diminue/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, l'importante \"couverture de neige dans l'hémisphère nord\" ne signifie pas que les émissions de CO2 ont diminué",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-l-importante-couverture-de-neige-dans-l-hemisphere-nord-ne-signifie-pas-que-les-emissions-de-CO2-ont-diminue/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32W22NZ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Elpis_R/status/1597168976270065664"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/dominique.crochard.9/posts/pfbid02GVFdfEfecqq6kHeyGUKoVm4cnkTFWFrRwPf17u9XAFdj2GR9DDhNo2hZChhp1nFLl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02j6W258puQjWhPni3xCAj7EfLdnZjrVG57sp6zEkJGt77uE3w8EUqqU6RHUtYWQsKl&id=100086870241078"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/surkif.surkif/posts/pfbid0dNKUEqZCRa5EtteZmLFyEbR5qcfKnjEpt1T8qt1VWoVVov3m8XfeYAFeG2Nwnjil"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32W22NZ"
    },
    "151": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-l-intendant-de-l-equipe-ghaneenne-n-avait-pas-oublie-les-maillots-de-l-equipe-pour-le-Mondial/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, l'intendant de l'équipe ghanéenne n'avait pas oublié les maillots de l'équipe pour le Mondial",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-l-intendant-de-l-equipe-ghaneenne-n-avait-pas-oublie-les-maillots-de-l-equipe-pour-le-Mondial/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32W28CT",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Footballautopsie/posts/pfbid035LqXNRVUAjqZ6mzuaQSR5XNH9TR5AMvY1SPDNaexHy3Jy4chCTn4R7jkPUvAWFe5l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/lemagpsg/posts/pfbid0TP2z68M8WQQQ1Cv4EBKoiQiYV7XPBJjNaHQpBomN1x1R2QdAdXx5PzL1LMaWhxAWl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32W28CT"
    },
    "152": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-l-oxygene-ne-guerit-pas-le-cancer/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, l'oxygène ne guérit pas le cancer",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-l-oxygene-ne-guerit-pas-le-cancer/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.33A88XA",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/semineraliser/posts/pfbid0JUMx3JhNPd2RD7RWgbAWtFqBC2PeyFg9k6oErH8EUEfVLuFBHJjiEPpb54LWsM87l"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.33A88XA"
    },
    "153": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-la-Confederation-suisse-n-appelle-pas-a-denoncer-son-voisin-qui-chaufferait-trop-son-logement/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, la Confédération suisse n'appelle pas à \"dénoncer\" son voisin qui chaufferait trop son logement",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-la-Confederation-suisse-n-appelle-pas-a-denoncer-son-voisin-qui-chaufferait-trop-son-logement/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32J92TB",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://t.me/AntiMacronVSGreatReset/46943?comment=429331"
                    },
                    {
                        "@type": "Article",
                        "url": "https://t.me/INSIDETHETRUTH/3586"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/pasyli/status/1569206558298365952"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32J92TB"
    },
    "154": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-la-Cour-supreme-du-Canada-n-a-pas-accepte-l-action-mondiale-pour-crimes-contre-l-humanite-de-Reiner-Fuellmich/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, la Cour suprême du Canada n'a pas accepté l'\"action mondiale pour crimes contre l'humanité\" de Reiner Fuellmich",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-la-Cour-supreme-du-Canada-n-a-pas-accepte-l-action-mondiale-pour-crimes-contre-l-humanite-de-Reiner-Fuellmich/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VC3FE-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://brigittebouzonnie.substack.com/p/laction-judiciaire-engagee-par-reiner"
                    },
                    {
                        "@type": "Article",
                        "url": "https://brigittebouzonnie.substack.com/p/le-proces-mondial-pour-crimes-contre"
                    },
                    {
                        "@type": "Article",
                        "url": "https://odysee.com/@La_v%C3%A9rit%C3%A9_excite_la_col%C3%A8re:2/Reiner-Fuellmich---LInde-et-LAfrique-poursuivent-Bill-Gates-en-justice:1"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/jeanbrice.verbe/posts/pfbid0355smMtjSpfep2NUQ3eDg1JoMf57UfQDevzCAEv23ti7LnGAmqPbufo7DyDQcaj1Vl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/kems29/posts/pfbid0253uowU3fYUveD6hGcs2RcPVirg3GSm6XFqxzJim68pCqBBEZCmZotXEwqYHMmquUl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0HFV4bmsdt6L2ALzVpzCbqY3jNKWkgpNqhqVUZz8mLNfpus1Y4RSPmLy312qJ7Enpl&id=100011143366348"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sibille.arto/posts/pfbid0yC3oDXfvcehut7e1mZTyTD9gQSW2GpFBDZoszvRmCP2zXJYRFRFi2BUaomTeEjefl"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.profession-gendarme.com/laction-mondiale-pour-crimes-contre-lhumanite-engagee-par-reiner-fuellmich-contre-loms-a-ete-juge-recevable-par-la-cour-superieure-de-justice-du-canada-le-proces-commence/comment-page-2/#comments"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VC3FE-1"
    },
    "155": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-la-Federal-Aviation-Administration-n-a-pas-assoupli-le-controle-medical-des-pilotes-a-cause-des-vaccins-anti-Covid/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, la Federal Aviation Administration n'a pas assoupli le contrôle médical des pilotes à cause des vaccins anti-Covid",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-la-Federal-Aviation-Administration-n-a-pas-assoupli-le-controle-medical-des-pilotes-a-cause-des-vaccins-anti-Covid/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.337Q6L6",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/restonszen69/status/1615499375827947520"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/silvano_trotta/status/1615422641979985941"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/christiane.quilici/posts/pfbid02bqH4bSpAgrKtL7sH1TSbUX3XXqY9cQMe2YB7Vk5LmzJ2j2Zxc6e5APKMxTdHU5ocl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.337Q6L6"
    },
    "156": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-la-France-n-a-pas-viole-le-protocole-de-Minsk-en-livrant-des-armes-a-l-Ukraine/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, la France n'a pas \"violé le protocole de Minsk\" en livrant des armes à l'Ukraine",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-la-France-n-a-pas-viole-le-protocole-de-Minsk-en-livrant-des-armes-a-l-Ukraine/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32GA3CT",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/AlienorAubigne/status/1556676340874616837"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Marc59931845/status/1556373073439477762"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/dragonduclos/status/1556027587754958848"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/yohan.debacker/posts/pfbid0t5S9X5p3ASoY26WhjEszbfEYj8ik5i6BWxNBsJDXZxhKBeZGfXMZ14zzLSAPNDRBl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32GA3CT"
    },
    "157": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-la-possibilite-de-recourir-au-pass-sanitaire-n-a-pas-pris-fin-le-15-novembre/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, la possibilité de recourir au pass sanitaire n'a pas pris fin le 15 novembre",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-la-possibilite-de-recourir-au-pass-sanitaire-n-a-pas-pris-fin-le-15-novembre/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RW7CV-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/sandrafellous_/status/1460372536919740417"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02zR9HxF73Z6s5dqmQ5FwutiqAxwquNiPcyQHp1pAG1LqE98rSPHSQicuXFTvzs8Tsl&id=1353729974672757"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RW7CV-1"
    },
    "158": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-Canada-ne-va-pas-imposer-un-traitement-psychiatrique-aux-non-vaccines/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le Canada ne va pas imposer un traitement psychiatrique aux non-vaccinés",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-Canada-ne-va-pas-imposer-un-traitement-psychiatrique-aux-non-vaccines/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32T62RJ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/_samedi_/status/1593932493857718273"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/charlotte.dupanier/posts/pfbid029n8xANBkgBdvxUhwAJnBEsB3KX188yk4vopSEFSgJVdCAgLQiWTE1LAbrG363TuGl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0ofSpE2iK4o4ka4DwGYnQWQTr2pyWsay4UGkZAZRYw85kyLz5pmrHkkk4PZKTrrrJl&id=100010484319413"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/photo.php?fbid=1286550765465916&set=a.115207945933543&type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/robert.huret/posts/pfbid02LNZ5paKogea7prg8c44kbFEpf8PromFsLbhLho2L18miB1h92eYJQjzMvNDzZpQyl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32T62RJ"
    },
    "159": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-Forum-de-Davos-n-a-pas-appele-a-decriminaliser-la-pedophilie/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le Forum de Davos n'a pas appelé à \"décriminaliser la pédophilie\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-Forum-de-Davos-n-a-pas-appele-a-decriminaliser-la-pedophilie/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.336R97V",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Alekes___/status/1610979673923543043"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/EricArchambaul7/status/1612416919474245632"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.apar.tv/societe/le-forum-economique-mondial-declare-que-les-pedophiles-sauveront-lhumanite/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02eZSx5uQNcDQ1vi6Be5hAmW4fHcj9GL8mKAMcqpz5GCBEzL6CnsCAzU4Luhn6uSel&id=100076660639980"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0pZDDg6TV7dyAMNNjUYzipLithgWJtFaogwJxf7AYzCnpFEBZbMQJghh2qeKr33UBl&id=100081219830858"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.google.com/url?q=https%3A%2F%2Fcogiito.com%2Fa-la-une%2Fle-forum-economique-mondial-dit-que-le-seul-moyen-de-sauver-lhumanite-est-de-liberer-les-pedophiles%2F&sa=D&source=docs&ust=1673447205704917&usg=AOvVaw1ICe0p9f2AfNZ4-HJT-jgI"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.336R97V"
    },
    "160": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-G20-n-a-pas-lance-un-passe-vaccinal-international-qui-empecherait-les-non-vaccines-de-voyager/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le G20 n'a pas lancé un passe vaccinal international qui empêcherait les non-vaccinés de voyager",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-G20-n-a-pas-lance-un-passe-vaccinal-international-qui-empecherait-les-non-vaccines-de-voyager/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32YX4FY",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://www.leslignesbougent.org/petitions/non-au-retour-du-passeport-vaccinal-10275/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32YX4FY"
    },
    "161": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-Parlement-europeen-n-a-pas-cree-un-fonds-d-indemnisation-pour-les-victimes-de-la-vaccination-anti-Covid/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le Parlement européen n'a pas créé un fonds d'indemnisation pour les victimes de la vaccination anti-Covid",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-Parlement-europeen-n-a-pas-cree-un-fonds-d-indemnisation-pour-les-victimes-de-la-vaccination-anti-Covid/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RB4XM-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "http://aulnaycap.com/2021/11/06/le-parlement-europeen-demande-lindemnisation-des-victimes-de-la-vaccination/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Juju220963/status/1455202559740846082"
                    },
                    {
                        "@type": "Article",
                        "url": "https://vk.com/wall525881628_4442"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9RB4XM-1"
    },
    "162": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-Rassemblement-national-n-a-pas-fait-recompter-les-votes-apres-le-second-tour-de-la-presidentielle/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le Rassemblement national n'a pas fait recompter les votes après le second tour de la présidentielle",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-Rassemblement-national-n-a-pas-fait-recompter-les-votes-apres-le-second-tour-de-la-presidentielle/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32962GJ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/JannickRobert/status/1518980519597420545"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/photo.php?fbid=10227496437535644&set=a.10203354478161748&type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/robert.dirringer/posts/pfbid02cFJcFGVgmaTEfEC8FdoG3buSTSh5TC8ohgzPuoNR3NXfXfRGLvcW5jXP4VBD72cJl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/yves.pascal.1232/posts/pfbid02VTPCUFAc92uvPbRumcpCfN5cPgUt2AEAu4pxcVPuR391X7gpQHNLTaJio7dcek3gl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32962GJ"
    },
    "163": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-SADS-ou-syndrome-de-la-mort-subite-des-adultes-n-a-pas-ete-cree-pour-justifier-des-morts-liees-au-vaccin-anti-Covid/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le SADS ou \"syndrome de la mort subite des adultes\" n'a pas été créé pour justifier des morts liées au vaccin anti-Covid",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-SADS-ou-syndrome-de-la-mort-subite-des-adultes-n-a-pas-ete-cree-pour-justifier-des-morts-liees-au-vaccin-anti-Covid/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32E26N6",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://marie-claire-tellier.over-blog.com/2022/06/les-morts-subites-dues-aux-injections-de-vaxx-ins-sont-desormais-si-courantes-qu-on-leur-a-attribue-un-nom-de-syndrome-le-syndrome-de-mort-subite-des-adultes-sads.html"
                    },
                    {
                        "@type": "Article",
                        "url": "https://t.me/leveil2022tchat/30748"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/CarolineCloutierartiste/posts/pfbid02V4LfGFH4R6QgEoBGbKNshvHmN82tfu5gmNv6QYpUuQYUciZcv7nFBc832QwfMjFDl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/VoieNature/posts/pfbid09gExxeL5yfa5dpirbLkpLHLozbzTjPvSie7jAVormgzebR9rp6sWCY5Xkko59zWGl"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.profession-gendarme.com/les-morts-subites-causees-par-le-vaccin-sont-maintenant-si-courantes-quils-lui-ont-attribue-un-nom-de-syndrome-le-syndrome-de-la-mort-subite-de-ladulte-sads/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32E26N6"
    },
    "164": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-directeur-de-l-OMS-n-a-pas-ete-arrete-par-Interpol-l-affirmation-vient-d-un-article-satirique/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le directeur de l'OMS n'a pas été \"arrêté par Interpol\" : l'affirmation vient d'un article satirique",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-directeur-de-l-OMS-n-a-pas-ete-arrete-par-Interpol-l-affirmation-vient-d-un-article-satirique/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32FW7MC",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "http://cristalain.over-blog.fr/2022/07/le-directeur-de-l-oms-arrete-par-interpol-pour-crimes-contre-l-humanite-et-genocide.25/07/2022.html"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32FW7MC"
    },
    "165": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-drapeau-offert-par-Zelensky-au-Congres-americain-ne-porte-pas-l-embleme-des-SS/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le drapeau offert par Zelensky au Congrès américain ne porte pas l'emblème des SS",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-drapeau-offert-par-Zelensky-au-Congres-americain-ne-porte-pas-l-embleme-des-SS/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.33679PM",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/bruno.bouteville.50/posts/pfbid07XQxym2b1g3JaHFv9c8iLQoxNE75AMRUBHybzCMij2Lua4N2GVWPM6CgcYRPGFPYl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/tousavecvladimirpoutine/permalink/531959768965197/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/lionel.rousset1/posts/pfbid0ijkcF5xzHugCoRj9vnhzTqqjqPhiVaLFp6tXho12ao9UqzjP8J1rwcy3tKsruJwxl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid022eZN3dN96wy61bDWNCLCbSVVew27HJN3NjVKJgA6KwZm1xJoF3WCYRWxvkktXAr9l&id=100083253580904"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.33679PM"
    },
    "166": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-fondateur-du-Forum-de-Davos-n-a-pas-ecrit-que-des-epidemies-elimineraient-4-milliards-de-mangeurs-inutiles/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le fondateur du Forum de Davos n'a pas écrit que des épidémies élimineraient 4 milliards de \"mangeurs inutiles\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-fondateur-du-Forum-de-Davos-n-a-pas-ecrit-que-des-epidemies-elimineraient-4-milliards-de-mangeurs-inutiles/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32BZ9TQ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/carolinenavion/posts/pfbid02PEzMnCuEgMiKvbf5DnJd6C9RKtD8YiAMH523ZeoKJZ4gmnR31nYtxQGv473m3evzl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/danny.chichinskas/posts/pfbid0EGPNrYcrR44ttSC51XfdK3Ub8Rp5roYZnePr8NGdRPkQUf5doaqAdPZdPsR5kZqMl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/jack.salmont/posts/pfbid0HS5UjS5mvyFnjccHL1a8asSAj31Ha1keLJY3Cvhy9Bb1zyywmJqYU8qKKHh3BfDwl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02Bgz9i5EzyRfAZiauXPZSATuQX1AFpMr5ypqSLqfZYDDakUJm1HZT7UcpsXFoxsAJl&id=100009532571824"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/www.uff.quebec/posts/pfbid0Zcr9KZnUCRJpjHBFWTcvsWPQPmuny8LcrJKEdiKQPrriVN8icHf98hUY5iwhFxNAl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32BZ9TQ"
    },
    "167": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-jus-de-carotte-ne-soigne-pas-le-cancer-du-sein/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le jus de carotte ne soigne pas le cancer du sein",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-jus-de-carotte-ne-soigne-pas-le-cancer-du-sein/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32EB24J",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0TKydNTDSWriTaS4dctbjruwXVscz3wkvasHWF2g3AspRCsKyXvfNQLXzXhH1vWHjl&id=141575666249768"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32EB24J"
    },
    "168": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-nombre-de-morts-Covid-19-n-a-pas-ete-reevalue-a-la-baisse-en-Italie/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le nombre de morts Covid-19 n'a pas été réévalué à la baisse en Italie",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-nombre-de-morts-Covid-19-n-a-pas-ete-reevalue-a-la-baisse-en-Italie/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9QZ397",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://www.francesoir.fr/societe-sante/italie-seuls-29-des-morts-du-covid-19-ont-effectivement-succombe-au-virus"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.medias-presse.info/grand-remous-en-italie-pour-linstitut-superieur-de-la-sante-italien-le-covid-a-tue-moins-que-la-grippe/147824/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9QZ397"
    },
    "169": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-nouveau-QR-code-figurant-sur-la-carte-electorale-ne-peut-pas-servir-a-truquer-l-election/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le nouveau QR code figurant sur la carte électorale ne peut pas servir à \"truquer l'élection\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-nouveau-QR-code-figurant-sur-la-carte-electorale-ne-peut-pas-servir-a-truquer-l-election/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.327X8VW",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/AKMEMETEAU/status/1512319123858108417"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/FrancaisMarc/status/1509947214365437955"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/jacquehenri5/status/1509965603037237256"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/55874MM/posts/pfbid029q5x4bvZuQabQtu448qXKUpkTYPmuHcJQusLnXoirs7dueqDWDFPPXMfhaYFYTgKl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/cali.samazan.1/posts/pfbid02tQDZtij7QwhkgrGtVux6sFTyPVumSaCveCaVXdVrztuGGLrCUwQz6dhudDMnJUSgl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/gigi.lamano.71/posts/pfbid0GSrN9EbsU2wz1TYKB5J3xzRvypX7XdNei3o5j2XX7rFVjEKVfKwQ337hDk8ydAMml"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/nadine.santi.54/posts/pfbid02fwFHAJ2BSnUDJC6HDiSnwTBPiFokWGyscCfBBShVCYJQRoh31uAugwu79TWQMT8Ql"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.327X8VW"
    },
    "170": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-port-d-un-bracelet-n-est-pas-devenu-obligatoire-pour-les-non-vaccines-en-Israel/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le port d'un bracelet n'est pas devenu obligatoire pour les non-vaccinés en Israël",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-port-d-un-bracelet-n-est-pas-devenu-obligatoire-pour-les-non-vaccines-en-Israel/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VA3DC-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/FLyMachabert/status/1472954646356451328"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/JeMouth/status/1473034894334996487"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Nicodoze/posts/pfbid02BttYzvsLKknmcUkerXJLL6cJGbFMKxCEpudxdF4DPXL3GjitkkHTFCZuGad1g1ccl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/alain.meyerabbatucci/posts/pfbid02iqKbJCZLCsS18315s2djBLWrQTd3xnJLnu5J63gJAwQ4x6W8JQvRih73EuTaEuPnl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/edouardantibes/posts/pfbid02fqTYSKP2QLEsmH4ekaPXVBBdiKgpqs1mB7TkSR9yr6YLD2NpY7p41mWFyFqiG5sAl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/fleur.muller.moisson/posts/pfbid02j3SfMThDR4Z4YotttNU7TAqh39adje226QkLu4wmbApudWMFxcQHkeNukR5NpHhBl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/openmade/posts/pfbid0Chdfk8S8wVb35gtbQVpvDS9yb37hXrmqxfqKzyXUbqEBZ2ENhvxA8wu3FM7jW2RHl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9VA3DC-1"
    },
    "171": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-professeur-Christian-Cabrol-n-est-pas-decede-en-janvier-2022-dans-le-silence-mediatique/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le professeur Christian Cabrol n'est pas décédé en janvier 2022 \"dans le silence médiatique\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-professeur-Christian-Cabrol-n-est-pas-decede-en-janvier-2022-dans-le-silence-mediatique/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.9WZ2DR",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/funkyfamily83/posts/pfbid02oeF6yp9jG7ZnzesZKUtwY1pU1N1RGFPzgGJGAJLVjncRxtSwstxF7QpuP6j6nrqil"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0cWGTAFnyPL41Gqf8B3LGaZVypiMPPAH2Z2EL3PA5J5DFGJCrPgVriVrQK49p9ERzl&id=100017609044969"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/photo.php?fbid=1286288481889901&set=a.818637291988358&type=3"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.9WZ2DR"
    },
    "172": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-soleil-n-est-pas-responsable-a-95-du-rechauffement-climatique/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le soleil n'est pas responsable à 95% du réchauffement climatique",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-soleil-n-est-pas-responsable-a-95-du-rechauffement-climatique/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32CA3HZ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0EkzuiQihojWCzEhEaUA7qmYjT3N6Mh2nS3zBgRWatHAhcw1zT8ksm4FeB6pDENZwl&id=100067794635600"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32CA3HZ"
    },
    "173": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-syndrome-dont-souffre-Celine-Dion-n-est-pas-du-au-vaccin-Covid-selon-les-experts/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le syndrome dont souffre Céline Dion n'est pas dû au vaccin Covid, selon les experts",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-syndrome-dont-souffre-Celine-Dion-n-est-pas-du-au-vaccin-Covid-selon-les-experts/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.333A9N4",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://ilestencoretemps.fr/celine-dion-sa-mysterieuse-maladie-liee-au-vaccin-contre-le-covid-revelation-choc-de-bob-kennedy-jr/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.333A9N4"
    },
    "174": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-vaccin-Gardasil-contre-les-infections-a-papillomavirus-n-est-pas-dangereux-et-inefficace-expliquent-les-experts/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, le vaccin Gardasil contre les infections à papillomavirus n'est pas \"dangereux et inefficace\", expliquent les experts",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-le-vaccin-Gardasil-contre-les-infections-a-papillomavirus-n-est-pas-dangereux-et-inefficace-expliquent-les-experts/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.336H38R",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/AlienorAubigne/status/1604446088886370305"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/CaudeHenrion/status/1605651782335463429"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/catherine.renaudin.5245/posts/pfbid02imPY5fkLwsGy9otdiYFFUa2W9CZj3YSZJPV5tmGTuN2wRGzM5uW3rGccPmej2wRBl"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.francesoir.fr/opinions-tribunes/ne-vaccinez-ni-filles-ni-garcons-par-gardasil-un-vaccin-dangereux-et-inefficace"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.336H38R"
    },
    "175": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-dirigeants-mondiaux-n-ont-pas-visite-un-musee-d-art-satanique-lors-du-sommet-de-l-Otan-a-Madrid/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, les dirigeants mondiaux n'ont pas visité un musée d'art satanique lors du sommet de l'Otan à Madrid",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-dirigeants-mondiaux-n-ont-pas-visite-un-musee-d-art-satanique-lors-du-sommet-de-l-Otan-a-Madrid/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32E27C9",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/LaPinkRes/status/1543178939325186048"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/_Bilderberg_/status/1543126966731243522"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32E27C9"
    },
    "176": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-fonctionnaires-europeens-ne-partent-pas-a-la-retraite-a-50-ans-avec-9000-euros-de-pension/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, les fonctionnaires européens ne partent pas à la retraite à \"50 ans\" avec \"9000 euros\" de pension",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-fonctionnaires-europeens-ne-partent-pas-a-la-retraite-a-50-ans-avec-9000-euros-de-pension/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.329R8BQ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/fabien.roussel.184881/posts/pfbid0o7LZgSpa88tCV7pQKCqdabFkvMMuiyS556iix3BxgpL5UzHAp6fU8R7ygm8hsgApl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/fabrice.boutte.7/posts/pfbid0ahCwU46gTLT8vs4qddv3sXFhaF2gotiTHL73KQJqymMEaDHSGEGtZWoSC1NXNPwZl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/gilles.rousselot.77/posts/pfbid027KHp23MSXgzeG16RDTajF8EfVbiYe3w6k3h1mBSQ2dg4Ay5qL3rAZyJ7YQpVNeNkl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/guy.bay.522/posts/pfbid0zaRkxhA3u12Ygndb5ViuLunHiw7Wg9FEVMUwPBf5BN9zDPs31LksP98dXitgAkA6l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/laurence.raudin/posts/pfbid0m6GKKBkAv23JyZ1QPjog8vqzrdUTiBFxM7VhU4fuoQuiSfgwRYSMJkva4xubD5vSl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/machao.telemchao.9/posts/pfbid038FEqewHwiRhMsksLU1z3Hy1gCJEvqKE4i9XNEAmuJb5sh5CmttYDMkacHboFvhtPl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/samuel.lefevre.94/posts/pfbid0trkqPC2WSTFZTU3hd2cE46kHhZPPiotZY4uG9MSaeUqELz4qjsSmF6nncjpnRzJnl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sylvie.moreau.1297/posts/pfbid02pM669cRSUHG87LqD8enHDjgDiV5HFsduGZPVBuYNrLdYYtpJWQTXURn6trhhJkuRl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.329R8BQ"
    },
    "177": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-normes-de-l-Union-europeenne-n-interdisent-pas-la-vente-de-cerises-de-plus-de-2-centimetres/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, les \"normes de l'Union européenne\" n'interdisent pas la vente de cerises de plus de 2 centimètres",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-normes-de-l-Union-europeenne-n-interdisent-pas-la-vente-de-cerises-de-plus-de-2-centimetres/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32GX2MK",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/JeanPierre.DADOO/posts/pfbid0Y9t9VtbovaFjSXRQTi7haDGt9vW1MLXS8zxhHcvorx7pLYm6bYyL51TmHWUg7Dhul"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Olivier.ASTRE.AOS83/posts/pfbid04Eqoz71s1HZgZWfKu1cYZfpztpt7rR2H7D5EATRFFD57w21GRaggCZhDtMw2UZwLl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/castiel.duparadis/posts/pfbid02FU4XcdEuHLaXrdPpdHMuzpVXQGmhyHokRfq8Z2p8VWiAywuCvKsY5j3enGSfjvyHl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32GX2MK"
    },
    "178": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-operateurs-telecoms-ne-vont-pas-couper-internet-a-distance-via-les-box/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, les opérateurs télécoms ne vont pas couper internet à distance via les box",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-operateurs-telecoms-ne-vont-pas-couper-internet-a-distance-via-les-box/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32L43Y4",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/BOROWSKIMIKE/status/1579397708942807040"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32L43Y4"
    },
    "179": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-panneaux-annoncant-la-presence-de-radars-ne-vont-pas-etre-supprimes/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, les panneaux annonçant la présence de radars ne vont pas être supprimés",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-panneaux-annoncant-la-presence-de-radars-ne-vont-pas-etre-supprimes/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32AX4LG",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/franck.nathan.1/posts/pfbid0367HZc9JqrReT4WZdWeJv31n2ihdXnj8Ba6BESCA3buf7SZwU2TYyQpqWKMFSgVSBl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02QdhM7DHnar6iS8A7CgoDPnDCoJKbgEZpWv8gWLBkKvtZSU6FzrBXX6yLQbxEgY45l&id=100063455449641"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32AX4LG"
    },
    "180": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-personnes-opposees-au-vaccin-n-ont-pas-un-nouveau-code-dans-leur-dossier-medical/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, les personnes opposées au vaccin n'ont pas \"un nouveau code\" dans leur dossier médical",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-personnes-opposees-au-vaccin-n-ont-pas-un-nouveau-code-dans-leur-dossier-medical/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.338B2NQ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/NiusMarco/status/1618634305743499265"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/christophe_bord/status/1619102422223261699"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02g8iLvLdR5tHPK1bC1SS12DWnfs2VF8sFMDCEfNB3d9f4SNZMfG6iuV6Yb5uuaz1il&id=100077269145437"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/ysameilu.saura.santoro/posts/pfbid037rXL2nJpcTiqhqq6vkAMQ1UcWMu6mfyvSa9WTvFyXkvPANvaJvsKYZ86NoEHm39Wl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.338B2NQ"
    },
    "181": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-vaccins-Covid-ne-provoquent-pas-le-sida/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, les vaccins Covid ne provoquent pas le sida",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-vaccins-Covid-ne-provoquent-pas-le-sida/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.327B2Q3",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://cogiito.com/societe/des-millions-de-vaccines-covid-19-contractent-le-sida-dr-elizabeth-eads/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://planetes360.fr/warning-les-chiffres-sont-effrayants-des-millions-de-personnes-triplement-vaccinees-attrapent-le-sida-arretez-de-vous-faire-vacciner-le-bilan-est-catastrophique-dr/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.businessbourse.com/2022/03/29/warning-les-chiffres-sont-effrayants-des-millions-de-personnes-triplement-vaccinees-attrapent-le-sida-arretez-de-vous-faire-vacciner-le-bilan-est-catastrophique-dr-elizabet/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.profession-gendarme.com/des-millions-de-vaccines-covid-19-contractent-le-sida-dr-elizabeth-eads/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.327B2Q3"
    },
    "182": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-vaccins-contre-le-Covid-n-injectent-pas-de-lames-de-rasoir-dans-le-flux-sanguin/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, les vaccins contre le Covid n'injectent pas de \"lames de rasoir dans le flux sanguin\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-les-vaccins-contre-le-Covid-n-injectent-pas-de-lames-de-rasoir-dans-le-flux-sanguin/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9UB4H4-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://cogiito.com/a-la-une/les-vaccins-covid-injectent-des-lames-de-rasoir-dans-le-flux-sanguin-et-les-laboratoires-et-les-politiques-le-savent/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://olivierdemeulenaere.wordpress.com/2021/12/01/andreas-noack-des-nano-lames-de-rasoir-dans-le-vaccin/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.etresouverain.com/2021/12/02/cogiito-les-vaccins-covid-injectent-des-lames-de-rasoir-dans-le-flux-sanguin-et-les-laboratoires-et-les-politiques-le-savent/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.infoslibres.info/2021/12/01/les-vaccins-covid-injectent-des-lames-de-rasoir-dans-le-flux-sanguin-et-les-laboratoires-et-les-politiques-le-savent/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9UB4H4-1"
    },
    "183": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-tousser-intensement-n-est-pas-la-solution-en-cas-d-infarctus-du-myocarde-previennent-des-experts/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, tousser intensément n'est pas la solution en cas d'infarctus du myocarde préviennent des experts",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-tousser-intensement-n-est-pas-la-solution-en-cas-d-infarctus-du-myocarde-previennent-des-experts/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32FN2C6",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/LeSaviezVousOfficial/photos/a.435992139778362/549346625109579/?type=3"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/photo.php?fbid=10151207578718999&set=a.434351253998&type=3"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/vincent.neveux.71/posts/pfbid0utAf4gF1K33qvt6aXYBwj3BMVfHUPA1a9TqK9WzcTiAr334paujLmJRGojJvou1Jl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32FN2C6"
    },
    "184": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-un-arrete-n-autorise-pas-des-coupures-d-electricite-cet-hiver/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, un arrêté n'autorise pas des coupures d'électricité cet hiver",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-un-arrete-n-autorise-pas-des-coupures-d-electricite-cet-hiver/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32KL8GD",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/CorinneReverbel/status/1575428982002126848"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Bollene.84/posts/pfbid0n2sS9kkawLwCU4c6QyBRGEug5DPWhxsGgPbbu33atKTfxx5NPvuRwRZiJJoxseNPl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/gersende.geraud/posts/pfbid0zSnPbjxvkXqzGB9Hie6kfajyAHo68W5kEoYFtq7hDe7w4xzbj8ov2vWUeW5zUB8dl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02UjSr3Bi3opGuar2XovxHRGzELGEh2XtE8ZWyjfp7PN3jXy5D8HE9iPApDtueLnqdl&id=100010821190928"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32KL8GD"
    },
    "185": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-un-arrete-n-autorise-pas-des-pedocriminels-a-devenir-assistants-maternels/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, un arrêté n'autorise pas \"des pédocriminels\" à devenir \"assistants maternels\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-un-arrete-n-autorise-pas-des-pedocriminels-a-devenir-assistants-maternels/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32ZB7NR",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/RomanAude/status/1599114199145193472"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/josycesarini/status/1599357429355270144"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/florian.pires.104/posts/pfbid0AQPxisf6KygaWw7zp7isLQG7RV8cRbo7Q9qhPGnLSeCFQ7o2wcERRF2ynL5zzAavl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/freresdissidents/posts/pfbid05mjqb5NQhV6MZv7FEE8U6VLRq35PWLfKCo5fgmwWbhTsqQU1Q6jdq31Aw3wkDfH6l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sandra.flandin/posts/pfbid03a5CXPiyGsp59NLuWBBzXn72uicNhAzvmp5SbRVGjDqZircEFHPBXhjsGQW1kBLPl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32ZB7NR"
    },
    "186": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-un-echange-Twitter-entre-Greta-Thunberg-et-Andrew-Tate-n-a-pas-permis-de-localiser-l-influenceur-avant-son-arrestation/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, un échange Twitter entre Greta Thunberg et Andrew Tate n'a pas permis de \"localiser\" l'influenceur avant son arrestation",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-un-echange-Twitter-entre-Greta-Thunberg-et-Andrew-Tate-n-a-pas-permis-de-localiser-l-influenceur-avant-son-arrestation/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.336A8D4",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/creapills/status/1608781225623425024"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.336A8D4"
    },
    "187": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-un-film-intitule-le-variant-Omicron-n-est-pas-sorti-en-1963/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, un film intitulé \"le variant Omicron\" n'est pas sorti en 1963",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-un-film-intitule-le-variant-Omicron-n-est-pas-sorti-en-1963/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TU478",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/chantal.lelievre1/posts/pfbid02t7j8XMQF4xhQFQkh8XJA5PyUCH47LwbK5Cu2ivoaJKLRs54kvCxYXz1vPCqVNyutl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/christine.moulin3/posts/pfbid02qp45yHc6k8Xf4mwxZvPDFHASQBy9jFzNKrNdR1BcMEmk9Xetsbn47cvo5zHSftwLl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/960617117610735/permalink/1544671352538639/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/imad.hbaili.507/posts/pfbid02wvSXAwimJbrM9Fj43w8QaBh7sETyPv6qnzrsEUfF8vptB3QB5KYVA3D8t7kgeNfql"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02UDCH13eUedexPAoM1SuF8jUTnB1PP4u5ePo7sdUemwAA4N8i8x6YPkCNU8FMSmc5l&id=100011328413838"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9TU478"
    },
    "188": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-un-rapport-confidentiel-de-Pfizer-ne-liste-pas-des-centaines-d-effets-secondaires-de-son-vaccin-contre-le-Covid-19/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, un \"rapport confidentiel\" de Pfizer ne liste pas des centaines d'effets secondaires de son vaccin contre le Covid-19",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-un-rapport-confidentiel-de-Pfizer-ne-liste-pas-des-centaines-d-effets-secondaires-de-son-vaccin-contre-le-Covid-19/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.324T2DV",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/daniel.gagnon.3323457/posts/pfbid04GbA7M6FrpqdfvyLYHLbyaccMqjMau9vbCMovmd9tVFFSrXNpdfKWaqG2La3fxGNl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.324T2DV"
    },
    "189": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-un-vehicule-electrique-n-est-pas-a-l-origine-de-l-incendie-de-la-Teste-de-Buch-comme-l-a-affirme-Elisabeth-Borne/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, un véhicule électrique n'est pas à l'origine de l'incendie de la Teste-de-Buch comme l'a affirmé Elisabeth Borne",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-un-vehicule-electrique-n-est-pas-a-l-origine-de-l-incendie-de-la-Teste-de-Buch-comme-l-a-affirme-Elisabeth-Borne/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32ET3UL",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/BOROWSKIMIKE/status/1547987875198693377"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/LineMercier2/status/1547657998864027649"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32ET3UL"
    },
    "190": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-une-carte-meteo-de-la-France-n-a-pas-ete-rougie-pour-manipuler-l-opinion/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, une carte météo de la France n'a pas été rougie pour \"manipuler\" l'opinion",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-une-carte-meteo-de-la-France-n-a-pas-ete-rougie-pour-manipuler-l-opinion/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32CW76G",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/lereveildatlas/status/1537374225446707201"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/DegageMacron/posts/pfbid02gHzkTZnFzeLMk5C4GLskGJHQhX26YejXtz74Ght2exJh5hriMQWpDkuVgdczLy6hl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/hseize/posts/pfbid02kVXz7WqgG66yDCDAiqVpgQhVvFSkbbeJzN1R9KUEMxwxv1VHAA2tJx8k99XG3h3Rl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid055LBx67oCoquV91vPay7aV2hEvaVUBRUsEYpKo2ib3r3qNXkPGQ3TN6Zo8vCxpVUl&id=242847229165787"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sylvie.badre.3/posts/pfbid0dsLNskahgu9jqV9Terjcp6n5M7AALnUXkjoMoy5wNm4cN6oCkNJ88yuMPGP5XBYEl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32CW76G"
    },
    "191": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-une-enquete-de-Cash-investigation-sur-Alstom-n-a-pas-ete-deprogrammee/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, une enquête de Cash investigation sur Alstom n’a pas été \"déprogrammée\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-une-enquete-de-Cash-investigation-sur-Alstom-n-a-pas-ete-deprogrammee/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.323L9Q3",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/francois.devaulx/posts/pfbid0rMwjDgtTG6MiTLd5JAeZBxC79mLoy4MEWqrZKDmkEneoEJFnmXCHscAavHyLteaRl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.323L9Q3"
    },
    "192": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-une-etude-canadienne-ne-montre-pas-que-les-antivax-sont-plus-dangereux-sur-la-route/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, une étude canadienne ne montre pas que les 'antivax' sont plus dangereux sur la route",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-une-etude-canadienne-ne-montre-pas-que-les-antivax-sont-plus-dangereux-sur-la-route/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.336F7HN",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://detours.canal.fr/covid-19-les-antivax-seraient-beaucoup-plus-dangereux-sur-la-route-selon-une-etude/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://korii.slate.fr/et-caetera/automobile-antivax-beaucoup-plus-accidents-route-graves-autres-72-pourcents-securite-routiere-sante-publique"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.336F7HN"
    },
    "193": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-une-etude-nordique-ne-prouve-pas-que-la-vaccination-Covid-cause-5-fois-plus-de-myocardites-que-le-virus-lui-meme/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, une étude nordique ne prouve pas que la vaccination Covid cause 5 fois plus de myocardites que le virus lui-même",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-une-etude-nordique-ne-prouve-pas-que-la-vaccination-Covid-cause-5-fois-plus-de-myocardites-que-le-virus-lui-meme/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.338P4LH",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/tatiann69922625/status/1622300595800477698"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/christophewyns/posts/pfbid0StRRo2cBH3ATrJBHfJLUMfj77uUFmNwBfKFSkEn85LPUwirvBgWCFTbQRdAC65hSl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.338P4LH"
    },
    "194": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-une-etude-publiee-n-a-pas-demontre-qu-il-n-y-a-aucun-lien-entre-CO2-et-rechauffement-climatique/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, une \"étude publiée\" n'a pas démontré qu'il n'y a \"aucun\" lien entre CO2 et réchauffement climatique",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-une-etude-publiee-n-a-pas-demontre-qu-il-n-y-a-aucun-lien-entre-CO2-et-rechauffement-climatique/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.336L2PD",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://t.me/trottasilvano/28882"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/silvano_trotta/status/1610328107722104838"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.336L2PD"
    },
    "195": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-une-nouvelle-loi-australienne-ne-punit-pas-uniquement-les-non-vaccines-qui-eternuent-ou-toussent-en-public/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Non, une nouvelle loi australienne ne punit pas \"uniquement les non-vaccinés\" qui éternuent ou toussent en public",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Non-une-nouvelle-loi-australienne-ne-punit-pas-uniquement-les-non-vaccines-qui-eternuent-ou-toussent-en-public/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9V8227-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/KARIMAMARKHODJ1/status/1469749066401988612"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Reine_Margot2/status/1469989450923061248"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/SchaefferMarly1/status/1469794256701251591"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/BabylonDecodedFrance/posts/pfbid06CRN6swUWXkGPtApEzyvsDfU9Rx8kBLppCnyQfRzoCGs8reE8kVhAErMPTSoNZmvl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0KeWUumejhCRarc2ukar5hEAhKV6ik9rJjH3spm4uUQpSLqgH8xKPgdNXQMTU8Q7Ql&id=100075724751211"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/tvlanguedoc/posts/pfbid0zf1o3CratVTzTu9JL1XcSenX4YX1LQ2cZ9YvvGUchSL6C2epYgJGUwL2qyV3y3wFl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9V8227-1"
    },
    "196": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Olivier-Veran-et-Eric-Woerth-elus-grace-a-une-fraude-au-vote-electronique-Une-tricherie-impossible/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Olivier Véran et Eric Woerth élus grâce à une fraude au vote électronique ? Une tricherie impossible",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Olivier-Veran-et-Eric-Woerth-elus-grace-a-une-fraude-au-vote-electronique-Une-tricherie-impossible/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32CZ79X",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/CStrateges/status/1539214704865951744"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/JorgeSimon94/status/1538772352665796611"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/marseille_jeff/status/1539224111246876676"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/dominiqueyogayantra/posts/pfbid025wnYmjYcWvUHnWb7nNqUGyc6Nbu2w7eg57CShv7TV2LWGs6CvczccBGvERUTBRbjl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32CZ79X"
    },
    "197": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Pas-de-lien-entre-les-emissions-CO2-dans-l-atmosphere-et-le-rechauffement-climatique-C-est-faux/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Pas de lien entre les émissions CO2 dans l'atmosphère et le réchauffement climatique ? C'est faux",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Pas-de-lien-entre-les-emissions-CO2-dans-l-atmosphere-et-le-rechauffement-climatique-C-est-faux/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32BN72X",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/jean.bourret.7/posts/pfbid02V1pyTavF4ZFj6LgNJ4McrXJ9Av7AUsB6F2XjwP2GYkZ4aoQWgMnssWY2b171RCynl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/jean.bourret.7/posts/pfbid02q1rhcKiLCgi4PTgS62WEPuBa5J4JMh5GPoTGccp82ja2LgJUjHVMfW6k9xEQ3ADkl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/photo.php?fbid=5000338850093443&set=a.253887178071991&type=3"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32BN72X"
    },
    "198": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Proces-Maxwell-attention-cette-image-de-CNN-montrant-Justin-Trudeau-a-ete-retouchee/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Procès Maxwell : attention, cette image de CNN montrant Justin Trudeau a été retouchée",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Proces-Maxwell-attention-cette-image-de-CNN-montrant-Justin-Trudeau-a-ete-retouchee/",
            "sameAs": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9UP64C-1",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/adetlili.raphavue/posts/pfbid0ZRpPf6ZES4fb4rnVDeSRUL4K4hwAunN4J6SFWzwwuSMsk95a5A5AKxy6WgqLPnf2l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/astro.postrock/posts/pfbid02M9SS9sXBFD95o9f9PQBtPQrYK5jkCTYH1tszBaWDkRfSSVDhAUpQ8sFiupbxit3kl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/http%253A%252F%252Fdoc.afp.com%252F9UP64C-1"
    },
    "199": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Retour-d-une-infox-affirmant-que-Jean-Luc-Melenchon-gagne-un-salaire-mensuel-de-36-000/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Retour d'une infox affirmant que Jean-Luc Mélenchon gagne un salaire mensuel de 36.000 €",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Retour-d-une-infox-affirmant-que-Jean-Luc-Melenchon-gagne-un-salaire-mensuel-de-36-000/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.329K6KQ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/ariane.deboismesnil/posts/pfbid0Vh31MZmVnAFVJJ5T1EKNEMiy444eP45aTWB1noN9VeGaFc7CLhciyqADFEi3QvQol"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/eddie.benoit.9/posts/pfbid02HM43etTyo1kEGw7DZuYDc4rJmHCdMDjiaf2Bp9enPFztoMy5M4mcNjyGhfx99NQHl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/francis.manein/posts/pfbid036KjfFFM9guL66jRpT73MRFdUpa4KadMvk1jWgnzSagr2cdt72fE7UAuuHrm5dKdol"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/gerard.curnier/posts/pfbid02UTHQpReWFPmCLTYVb5AuYHfxYXT1CK3XJY7jqbuY8ZhDu2WUS2waZndT8QvdmUUXl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/guy.caulliez/posts/pfbid04pUjtXUSwqpZpM8KVhtcL1iGFmomtTWcBnLLz9sYjUZa31mTY7qoQsdrxArdkendl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/jeanlouis.seguenot.9/posts/pfbid02sdYum4gPYoymN7oJKsiCFA9yBKu9FN9axfLStLDr9AarmUxGFvscE7vPD4qND85zl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/olivier.tournemile/posts/pfbid054trRH6hVKN4QCv8dEPXA7eg9wvZCBugq7SHnoSpT3WZ6fKA2dwMadp1Fo9vnjZdl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02FAUiyzjBpJRSxwrs6CpWL4TkQ3zAWqCmbfb9BckvvXZz5e8EJ9iQJicVZJTkThjfl&id=774558606"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.329K6KQ"
    },
    "200": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Rien-ne-demontre-que-le-pissenlit-serait-cent-fois-plus-efficace-que-la-chimiotherapie-pour-guerir-la-leucemie/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Rien ne démontre que le pissenlit serait \"cent fois plus efficace\" que la chimiothérapie pour guérir la leucémie",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Rien-ne-demontre-que-le-pissenlit-serait-cent-fois-plus-efficace-que-la-chimiotherapie-pour-guerir-la-leucemie/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.33773H4",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/gabrielkomi.anato/posts/pfbid0pdaazCeUFQVKfnGx7TmFUHdQ1YJtuNSeudkEvWzwZvwteEMsPXQjETodTharnjn2l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sophia.can/posts/pfbid02ey7WQ862GKVqafNFcm6N6SEZBaoW6pqYx1sk9fYKUjmnWwGL1mUDspA7gZf5mgLZl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.33773H4"
    },
    "201": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Rouler-un-jour-sur-deux-pour-limiter-la-facture-d-essence-Attention-a-cette-fausse-citation-pretee-a-Bruno-Le-Maire/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Rouler \"un jour sur deux\" pour limiter la facture d'essence ? Attention à cette fausse citation prêtée à Bruno Le Maire",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Rouler-un-jour-sur-deux-pour-limiter-la-facture-d-essence-Attention-a-cette-fausse-citation-pretee-a-Bruno-Le-Maire/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32682FE",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Garuda25/posts/pfbid02RbPnLaCr4CGh7FH2uegkN6RBTsHjv5kbekyhaUmWbMV9udjcmTxQHcAra5Cm7oF4l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Pascaloup777/posts/pfbid02UWZSJWHk6giQud2aFUQa3VQGaChf7wbqD4SpcgEsUxTZRSbFC6DdyLvhfemwE2M8l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/pierre.poy/posts/pfbid04XSdc9NhxeeJxxfQN8N5ZHx5SEY6rUShJogf8NBFth4tBrpF36uXHwsSj41Zq4qsl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/victor.simon.315/posts/pfbid02SjTwVxBPsphtwWtYNq6thfN7B3BF4E9vunWZ1bGDFodLQR3bidYhY5zGyUpFdrEul"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32682FE"
    },
    "202": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Se-lever-brutalement-peut-provoquer-une-insuffisance-cardiaque-fatale-Non-repondent-des-experts/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Se lever brutalement peut provoquer une insuffisance cardiaque fatale? Non, répondent des experts",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Se-lever-brutalement-peut-provoquer-une-insuffisance-cardiaque-fatale-Non-repondent-des-experts/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.329H8W2",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/Certains.Posts.Peuvent.Heurter.Les.Plus.Cons/posts/pfbid02arbeMVkEhovQhTit9YvW7n22qYJgdX9F3kXKCDncFeUnN3EvPWuEpYjF1hUfaZbyl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid035oNjPfthm4okestp55rbAzzcZNbBx1RWREEkt6rbM4BtN5QTDAjZuvzyBuFHw8uxl&id=191504051430554"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.329H8W2"
    },
    "203": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Turquie-la-photo-d-un-chien-tentant-de-sauver-son-maitre-dans-des-decombres-date-d-avant-le-tremblement-de-terre-du-6-fevrier/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Turquie : la photo d'un chien \"tentant de sauver son maître\" dans des décombres date d'avant le tremblement de terre du 6 février",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Turquie-la-photo-d-un-chien-tentant-de-sauver-son-maitre-dans-des-decombres-date-d-avant-le-tremblement-de-terre-du-6-fevrier/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.338R6DB",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/LIslamMaReligionn/posts/pfbid0228xoJhqDWiY2uWKZxnQtXqGNSb8EKzzR5bpyN8NRRokZsC6U9XLxQCWHJeqEdbd8l"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid07wfBPzDeww4qgrTqZxHJj5Bz7crD21JhHqGRsPDVM2bkWomhPipuywJx8yK5FnJpl&id=100064326446324"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.338R6DB"
    },
    "204": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ukraine-Non-la-decouverte-de-cadavres-a-Boutcha-n-est-pas-une-mise-en-scene-avec-des-figurants/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Ukraine : Non, la découverte de cadavres à Boutcha n'est pas une \"mise en scène\" avec des \"figurants\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ukraine-Non-la-decouverte-de-cadavres-a-Boutcha-n-est-pas-une-mise-en-scene-avec-des-figurants/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.327M9YC",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/BotrytisC/status/1510596395899760647"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02PxAM6cSGgCfTkYWJ3rfpz3zYdAdLxRFpzA9JfjEbf9qEwYmfbjKvbk76PdYS8GmVl&id=100077799203452"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.327M9YC"
    },
    "205": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ukraine-cet-homme-aux-tatouages-nazis-n-est-pas-un-prisonnier-de-guerre-mais-un-detenu-photographie-au-Belarus-en-2005/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Ukraine : cet homme aux tatouages nazis n'est pas un prisonnier de guerre, mais un détenu photographié au Bélarus en 2005",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Ukraine-cet-homme-aux-tatouages-nazis-n-est-pas-un-prisonnier-de-guerre-mais-un-detenu-photographie-au-Belarus-en-2005/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32FU9DD",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02C8YsocqsUCzYvPgSzcxdf7gJcWW2NmeYiwNRr3CjSPTuWnAvy4dC24EVhgCTf3ml&id=100007395190443"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32FU9DD"
    },
    "206": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Un-centre-commercial-ukrainien-ferme-depuis-longtemps-au-moment-d-une-frappe-russe-Plusieurs-elements-montrent-le-contraire/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Un centre commercial ukrainien \"fermé depuis longtemps\" au moment d'une frappe russe ? Plusieurs éléments montrent le contraire",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Un-centre-commercial-ukrainien-ferme-depuis-longtemps-au-moment-d-une-frappe-russe-Plusieurs-elements-montrent-le-contraire/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32EC8YH",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0zfLoBp7ufwboAvq9Qietu8Nu7YnnXFjqFvXxSF7JY6xThPQphnuJGgm51HvmzXYWl&id=115241179889331"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32EC8YH"
    },
    "207": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Un-tweet-des-Republicains-appelant-a-cesser-d-envoyer-des-cheques-de-zero-euro-a-Valerie-Pecresse-C-est-un-montage-parodique/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Un tweet des Républicains appelant à cesser d'envoyer \"des chèques de zéro euro\" à Valérie Pécresse ? C'est un montage parodique",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Un-tweet-des-Republicains-appelant-a-cesser-d-envoyer-des-cheques-de-zero-euro-a-Valerie-Pecresse-C-est-un-montage-parodique/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.328B62P",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/897575937000345/permalink/5010960128995218/"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.328B62P"
    },
    "208": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-augmentation-historique-de-1788-des-troubles-menstruels-et-de-732-des-AVC-dus-aux-vaccins-anti-Covid-Ces-calculs-sont-trompeurs/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Une \"augmentation historique\" de \"1788%\" des troubles menstruels et de \"732%\" des AVC dus aux vaccins anti-Covid ? Ces calculs sont trompeurs",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-augmentation-historique-de-1788-des-troubles-menstruels-et-de-732-des-AVC-dus-aux-vaccins-anti-Covid-Ces-calculs-sont-trompeurs/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32AY4NM",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://crowdbunker.com/v/eXwmjNQi6a"
                    },
                    {
                        "@type": "Article",
                        "url": "https://t.me/chloefinfosofficiel/1902"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/MyriamHebuterne/status/1528191240335917057"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/NaraShi13876794/status/1528024501333762049"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/verity_france/status/1527940931483230208"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/sosmaires/posts/pfbid0Zo7ZJcjHTvcbtjCJG7TZ6Di7GG2rCnd3T93APNCtasL6cZekhncwwwaGcVGB95oNl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32AY4NM"
    },
    "209": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-conference-de-Greta-Thunberg-annulee-a-cause-de-la-tempete-aux-Etats-Unis-Il-s-agit-d-un-article-parodique/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Une conférence de Greta Thunberg annulée à cause de la tempête aux Etats-Unis ? Il s'agit d'un article parodique",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-conference-de-Greta-Thunberg-annulee-a-cause-de-la-tempete-aux-Etats-Unis-Il-s-agit-d-un-article-parodique/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.33676F4",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/groups/426526817556358/permalink/2043983969143960/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/sophie.lagirafe.58555/posts/pfbid0H1PxDdWi7usLZfG5NQwNrNuJzajd3hF3syLb7TiroBax5hRAxMDY9JETKd6hqC9Pl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.33676F4"
    },
    "210": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-epidemie-de-sterilite-en-France-due-aux-vaccins-Les-affirmations-infondees-de-Christian-Perronne/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Une \"épidémie de stérilité\" en France due aux vaccins ? Les affirmations infondées de Christian Perronne",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-epidemie-de-sterilite-en-France-due-aux-vaccins-Les-affirmations-infondees-de-Christian-Perronne/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32AX369",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://planetes360.fr/pr-perronne-il-y-a-une-epidemie-de-sterilite-chez-les-femmes-de-30-ans-vaccinees-contre-le-covid/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.businessbourse.com/2022/05/13/pr-perronne-il-y-a-une-epidemie-de-sterilite-chez-les-femmes-de-30-ans-vaccinees/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.egaliteetreconciliation.fr/Pr-Perronne-Il-y-a-une-epidemie-de-sterilite-chez-les-femmes-de-30-ans-vaccinees-contre-le-covid-68200.html"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32AX369"
    },
    "211": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-facture-d-energie-multipliee-par-cinq-pour-les-Francais-dans-les-prochains-mois-C-est-trompeur/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Une facture d'énergie multipliée par cinq pour les Français dans les prochains mois ? C'est trompeur",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-facture-d-energie-multipliee-par-cinq-pour-les-Francais-dans-les-prochains-mois-C-est-trompeur/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32HA8GJ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/NicolasMeilhan/status/1563126715060473866"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.businessbourse.com/2022/08/26/nicolas-meilhan-les-gens-ne-realisent-pas-encore-limpact-de-prix-de-lenergie-multiplies-par-20-en-gros-votre-facture-va-etre-multipliee-par-5-donc-si-vous-payez-200e-par-mois-pour-le-gaz-et-l/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/bonnaire.romain/posts/pfbid036k6ABD1nsoTjTyzmFiUr18UhNvoahmZMsUEqoAjPHakmmzRi4XEqB9WQpuryhENGl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/jflouhaut/posts/pfbid02mRbS355De7R8GZWWYenwedtpyxA6n1ZVuStijhXc4Hd2FVY1q133mqPyfSsZ3HYAl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02b1LMYUV78fYYhaBzRkDL1YNGisqXrWsP1xsCFw8oatmJSL1xJe4zM3NS9D6Ucprgl&id=1673316859649983"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32HA8GJ"
    },
    "212": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-goutte-d-huile-pour-etouffer-une-tique-Un-conseil-recurrent-l-ete-mais-fermement-deconseille-par-les-experts/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Une goutte d’huile pour étouffer une tique ? Un conseil récurrent l'été, mais fermement déconseillé par les experts",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-goutte-d-huile-pour-etouffer-une-tique-Un-conseil-recurrent-l-ete-mais-fermement-deconseille-par-les-experts/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32F48AL",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/ange.arlandis/posts/pfbid0BSa5DJsp276sK4htb3wPD2gCz25p9V1Z3wqggpeUTqyQXVwHrcT8u1yXZHbHVSTJl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32F48AL"
    },
    "213": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-inflation-a-12-deux-fois-superieure-aux-chiffres-de-l-Insee-Attention-a-ces-affirmations/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Une inflation à 12%, deux fois supérieure aux chiffres de l'Insee ? Attention à ces affirmations",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-inflation-a-12-deux-fois-superieure-aux-chiffres-de-l-Insee-Attention-a-ces-affirmations/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32HG26Q",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://planetes360.fr/eric-revel-la-realite-de-linflation-nest-pas-a-un-chiffre-mais-bien-deux-12-%EF%BF%BC/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/BOROWSKIMIKE/status/1564935388023738368"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/NCASTELLANI30/status/1564854511495159810"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0p1yfdNF3SPWdZp9CFdQYmvqyDmShetKRThuUZEs2yTUHPRxkJycHBCipkpmbE9Bml&id=100072418957948"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/victor.mefe/posts/pfbid02cYzkG6mBAdkNNUZrUXWTNXYcjW2yLJtnNmL9VdP3HJD2WnsJAmmSNWqBrBdmEC2Yl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32HG26Q"
    },
    "214": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-loi-empechera-de-devenir-proprietaire-a-partir-de-2025-attention-aux-infox-sur-la-proposition-de-loi-Lagleize/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "\"Une loi empêchera de devenir propriétaire à partir de 2025\" : attention aux infox sur la proposition de loi Lagleize",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-loi-empechera-de-devenir-proprietaire-a-partir-de-2025-attention-aux-infox-sur-la-proposition-de-loi-Lagleize/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.328J9PJ",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/LionDuNet/status/1514288130718842886"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/brunolp30/status/1515597646911705089"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/nubis66/status/1514970916903661570"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/FrancenColere/posts/pfbid034GUjDwBFugFbevRhsi7KQ8eZVArBp74AtimivDP4YLk2FAmjXMREsfHeK8uTqCLRl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/chris.mazallon.1/posts/pfbid0sDXT1hY8jsbjZ7WLarH9Yzo2C35rrfPc5U2QhCv8axNwfXGF9eS34GkysQuLAHSbl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/elisabeth.picardquervel/posts/pfbid02tLBCjDoT4fME3u4H8JpNBGMsn4aM5SvxAktzcsGAgyFu7snTwe514V8ZKtNKpKZel"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/jacky.roche/posts/pfbid02mg1YZphUBiiCnNysN7A2T2LfPDLRoL71uRutzde9hRtNij9ws5q4LxA7mJT1UCeNl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/luc.etib/posts/pfbid0JTGcDH9d7LzbgZW1mTikB35vBMoHVUNZDNaMqr1HFNH4PNn3sCgntg9iaTatAqBHl"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/paulo.chevy.35175633/posts/pfbid0dLDADE82wbPj4VLkUjo92ZwDHNzedaJXdx43o9x2Ybpp9YnC91g5CB7YERr9aAahl"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid028scBbeX4HvjZYtsJxwBzHy4GSZfzZd1UYXDZtEmpZS7XNZHKepFYHpeeSMkSLQc9l&id=100063486369524"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02pZKVb5K6cM7obVsJwmxjZLXetNf55qSLgxavq8SRLK41xLNgxm3tjmA5mhmZPubul&id=100080571519806"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.328J9PJ"
    },
    "215": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-meteorite-qui-tombe-dans-la-mer-baltique-Attention-cette-video-est-un-montage/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Une météorite qui tombe dans la mer baltique? Attention, cette vidéo est un montage",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-meteorite-qui-tombe-dans-la-mer-baltique-Attention-cette-video-est-un-montage/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.333A979",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02JvgRpvgthRG8Sbgfb7vgA3awJwtnaVrdtk9VdhjYJiwde7Wnp9DZuvu5YEQyc7Thl&id=100070670930297"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.333A979"
    },
    "216": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-photo-d-incendie-en-Russie-detournee-pour-alimenter-la-theorie-complotiste-de-l-adrenochrome/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Une photo d'incendie en Russie détournée pour alimenter la théorie complotiste de l'adrénochrome",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-photo-d-incendie-en-Russie-detournee-pour-alimenter-la-theorie-complotiste-de-l-adrenochrome/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.337L3V7",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "http://groupementdhumanistes.centerblog.net/4391-poutine-detruit-un-laboratoire-adrenochrome-en-ukraine"
                    },
                    {
                        "@type": "Article",
                        "url": "http://profidecatholica.com/2023/01/21/poutine-detruit-un-laboratoire-dadrenochrome-en-ukraine/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://annabellascom.wordpress.com/2023/01/21/poutine-detruit-un-laboratoire-dadrenochrome-en-ukraine/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://beesbuzz.com/blog/5922/poutine-d%C3%A9truit-un-laboratoire-dadr%C3%A9nochrome-en-ukraine/"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Patrick58916424/status/1616547920358133763"
                    },
                    {
                        "@type": "Article",
                        "url": "https://vk.com/@uncensoredfd-poutine-detruit-un-laboratoire-dadrenochrome-en-ukraine"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.337L3V7"
    },
    "217": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-usine-d-uterus-artificiels-C-est-une-video-de-fiction-et-c-est-scientifiquement-impossible-a-ce-jour/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Une usine d'utérus artificiels ? C'est une vidéo de fiction, et c'est scientifiquement impossible à ce jour",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Une-usine-d-uterus-artificiels-C-est-une-video-de-fiction-et-c-est-scientifiquement-impossible-a-ce-jour/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.336U9NP",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Cultination_/status/1605553797832486913"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/wydgher/posts/pfbid02TAoUJyH7G45EvsKjBnnz1tFuaP3nfx9KeCMcJ7t1SaqEJMqdRvhnPYNx4ArPosCxl"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.tiktok.com/@omniscience.ai/video/7185280090689883397?item_id=7185280090689883397"
                    },
                    {
                        "@type": "Article",
                        "url": "https://www.youtube.com/watch?v=hVf-3wpkWS8"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.336U9NP"
    },
    "218": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Va-t-on-manger-des-insectes-sans-le-savoir-Attention-a-ces-affirmations-trompeuses/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Va-t-on \"manger des insectes sans le savoir\" ? Attention à ces affirmations trompeuses",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Va-t-on-manger-des-insectes-sans-le-savoir-Attention-a-ces-affirmations-trompeuses/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.337Q2QM",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/OrwellHuxleyEtNous/posts/pfbid02cNcztr4ay9Psv4ZTLx2fEjGX1Ks8HkzdJosnrqbZsCKFi6M4Me3GwghdfREhkTEwl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/groups/veganedefrance/permalink/1211818256398868/"
                    },
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/jean.saulnier.16/posts/pfbid0BJ42njeVSyUyqYrGMNPabhc5hR5zkq2gv1jATAPXLrVZxBg2UuvF32idBXFwHccgl"
                    },
                    {
                        "@type": "SocialMediaPosting",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid0ByoehGjMXxo7QSgfvVKoc8TmVtDaWpMCwgt4S4CZ4iFhXxZP7HZGhxN9jxYRdfQtl&id=100064671949490"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.337Q2QM"
    },
    "219": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Vaccins-Covid-attention-aux-fausses-affirmations-autour-de-supposees-morts-subites/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Vaccins Covid: attention aux fausses affirmations autour de supposées \"morts subites\"",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Vaccins-Covid-attention-aux-fausses-affirmations-autour-de-supposees-morts-subites/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.32WU8WB",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/Fart47404663/status/1597557165698347008"
                    },
                    {
                        "@type": "Article",
                        "url": "https://twitter.com/slamgot/status/1591175786866044929"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/100044677073910/videos/653198023153974/"
                    },
                    {
                        "@type": "VideoObject",
                        "url": "https://www.facebook.com/permalink.php?story_fbid=pfbid02SeYuGqDY6sUT11A6iicbb4Uhn6dB8JfDU4dUFX7tfgWZVvXb5NrHrPwE9ee4Uswvl&id=100080967882586"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.32WU8WB"
    },
    "220": {
        "link": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Videos-detournees-photos-recyclees-regain-de-desinformation-autour-du-conflit-russo-ukrainien/",
        "claim-review": {
            "@context": "https://schema.org",
            "@type": "ClaimReview",
            "claimReviewed": "Vidéos détournées, photos recyclées : regain de désinformation autour du conflit russo-ukrainien",
            "url": "https://defacto-observatoire.fr/Medias/Factuel/Fact-checks/Videos-detournees-photos-recyclees-regain-de-desinformation-autour-du-conflit-russo-ukrainien/",
            "sameAs": "https://factuel.afp.com/doc.afp.com.323Q7N9",
            "itemReviewed": {
                "@type": "Claim",
                "appearance": [
                    {
                        "@type": "ImageObject",
                        "url": "https://www.facebook.com/fabien.dusseaux/posts/pfbid02VaovW2VHGY7dnjzukndHi3CMxTXK1TLos52ywFJmhogwLBHPiLx77dgqrrPegJLrl"
                    }
                ]
            }
        },
        "original-url": "https://factuel.afp.com/doc.afp.com.323Q7N9"
    }
}</content>
    <filesize>399916</filesize>
  </attachment>
</xwikidoc>

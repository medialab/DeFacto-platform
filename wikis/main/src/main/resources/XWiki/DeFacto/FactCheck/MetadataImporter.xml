<?xml version="1.1" encoding="UTF-8"?>

<xwikidoc version="1.4" reference="XWiki.DeFacto.FactCheck.MetadataImporter" locale="">
  <web>XWiki.DeFacto.FactCheck</web>
  <name>MetadataImporter</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>MetadataImporter</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}

// Notes: invalid author type sometimes: Personne, still present in https://factuel.afp.com/doc.afp.com.3277986
// Issue with Dans-les-hopitaux-de-Liege-une-tension-saisonniere-encore-aggravee-par-la-pandemie which has two ClaimReview in the merged JSON
// same with Attention-a-cette-alerte-sur-une-arnaque-telephonique-permettant-de-pirater-des-telephones-a-distance-via-un-simple-appel
// Attention-a-cette-video-virale-du-medecin-Robert-Malone-sur-la-vaccination-des-enfants
// but it's ok since only the first one is taken into account

import java.net.URLEncoder
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

def updateFactCheckObject(reference, publishDate, newUrlScheme, guid, claimReviewJson, claimReviewData, url) {
  if (xwiki.exists(reference)) {
    def page = xwiki.getDocument(reference)
    def claimReviewObj = page.getObject('XWiki.DeFacto.Review.ClaimReviewClass')
    out.println(claimReviewObj)
    if (claimReviewObj == null) {
      claimReviewObj = page.newObject('XWiki.DeFacto.Review.ClaimReviewClass')
    }
    if (claimReviewData != null) {
      claimReviewObj.set('claimReviewed', claimReviewData.claimReviewed)
      def itemReviewed = claimReviewData.itemReviewed
      claimReviewObj.set('itemReviewedAuthorName', itemReviewed?.author?.name)
      if (itemReviewed?.author != null) {
        def type = itemReviewed.author.get('@type')
        if (type != null) {
          if (type == "Personne") {
            type = "Person"
            claimReviewJson = claimReviewJson.replace('"@type":"Personne"', '"@type":"Person"')
          }
          claimReviewObj.set('itemReviewedAuthorType', type)
        }
      }
      claimReviewObj.set('itemReviewedAuthorUrl', itemReviewed?.author?.url)
      claimReviewObj.set('itemReviewedAppearanceUrl', itemReviewed?.appearance)
      if (itemReviewed?.datePublished != null) {
        def formatter = xwiki.jodatime.getDateTimeFormatterForPattern('yyyy-MM-dd')
        def date = formatter.parseDateTime(itemReviewed.datePublished).toDate()
        claimReviewObj.set('itemReviewedDatePublished', date)
      }
      claimReviewObj.set('reviewRatingValue', claimReviewData.reviewRating?.ratingValue)
      claimReviewObj.set('reviewRatingAlternateName', claimReviewData.reviewRating?.alternateName)
      claimReviewObj.set('json', JsonOutput.prettyPrint(claimReviewJson))
    }
    def factCheck = page.getObject('XWiki.DeFacto.FactCheck.FactCheckClass')
    //factCheck.set('guid', guid);
    def link = factCheck.getValue('link')
    //if (link == null || link == '') {
      //factCheck.set('link', 'https://factuel.afp.com/' + url);
      if (newUrlScheme) {
        link = guid.substring(7)
        link = link.replace('/', '.')
        link = 'https://factuel.afp.com/' + link
        factCheck.set('link', link);
        //out.println("Link: " + link)
        page.save("Mise à jour de l'URL d'origine")
      }
    //}
    //page.save("Mise à jour des métadonnées ClaimReview et du guid")
  } else {
    out.println('')
  }
}

if (request.action == "run") {
  def jsonSlurper = new JsonSlurper()
  def dataPage = xwiki.getDocument('Administration.Data.WebHome')
  def dataAttachment = dataPage.getAttachment('factchecks_merge_afp_defacto.json')
  def data = dataAttachment.getContentAsString()
  def items = jsonSlurper.parseText(data)
  def formatter = xwiki.jodatime.getDateTimeFormatterForPattern('dd/MM/yyyy HH:mm')
  def refDate = formatter.parseDateTime('21/01/2022 01:00').toDate()

  out.println("|=Index|=Publication date|=ID|=Reference|=Guid|=Version|=URL|=ClaimReview|=ClaimReview obj")
  items.eachWithIndex { item, index -&gt;
    if (index &lt; 200) {
      def guid = item.guid;
      def encodedGuid = URLEncoder.encode(guid);
      encodedGuid = URLEncoder.encode(encodedGuid);
      def publishDate = formatter.parseDateTime(item.publish_date).toDate()
      def isAfterRefDate = publishDate &gt; refDate
      out.println("|$index|$publishDate $isAfterRefDate|$item.id|[[$item.reference]]|$item.guid|$item.version|https://factuel.afp.com/$encodedGuid|(((")
      def claimReviewJson = item.claim_review
      def claimReviewData = null
      if (claimReviewJson != null &amp;&amp; claimReviewJson.trim() != '') {
        claimReviewData = jsonSlurper.parseText(claimReviewJson)
        def pretty = JsonOutput.prettyPrint(claimReviewJson)
        //out.println("{{code}}$pretty{{/code}}\n\n{{code}}$claimReviewData{{/code}})))|(((")
        out.println(")))|(((")
      } else {
        out.println(')))|(((')
      }
      // Update guid and ClaimReview
      updateFactCheckObject(item.reference, publishDate, isAfterRefDate, item.guid, claimReviewJson, claimReviewData, encodedGuid)
      out.println(')))')
    }
  }
}
{{/groovy}}</content>
  <attachment>
    <filename>factchecks_merge_afp_defacto.json</filename>
    <mimetype>application/json</mimetype>
    <charset>UTF-8</charset>
    <author>xwiki:XWiki.Admin</author>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>226050</filesize>
  </attachment>
  <object>
    <name>XWiki.DeFacto.FactCheck.MetadataImporter</name>
    <number>0</number>
    <className>XWiki.XWikiRights</className>
    <guid>77a9a62d-9d72-4d2b-abe8-fa355bf97622</guid>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAdminGroup</groups>
    </property>
    <property>
      <levels>view</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
</xwikidoc>

<?xml version="1.1" encoding="UTF-8"?>

<xwikidoc version="1.4" reference="XWiki.DeFacto.Une.HomeSheet" locale="">
  <web>XWiki.DeFacto.Une</web>
  <name>HomeSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="XWiki.DeFacto.Macros"/}}

{{velocity}}
#if ($xcontext.action == 'view')
  #set ($discard = $xwiki.ssx.use('XWiki.DeFacto.Une.HomeSheet'))
  #set ($discard = $xwiki.jsx.use('XWiki.DeFacto.Une.HomeSheet'))
  #set ($uneConfigPage = $xwiki.getDocument('XWiki.DeFacto.Une.UneConfig'))
  #set ($uneConfig = $uneConfigPage.getObject('XWiki.DeFacto.Une.UneConfigClass'))

(% class="defacto-home" %)(((
  (% class="defacto-home-block defacto-home-about" %)(((
     = $services.localization.render('defacto.une.whatIsDeFacto') =
     (% class="box defacto-box" %)(((
       #if ($services.security.authorization.hasAccess('view', 'Administration.WebHome'))
         {{html clean="false"}}
           &lt;a class="defacto-action-edit" href="$xwiki.getURL('XWiki.DeFacto.Une.QuiSommesNous', 'edit')" role="button"&gt;
            &lt;span class="defacto-action-edit-icon"&gt;$services.icon.renderHTML('pencil')&lt;/span&gt;
           &lt;/a&gt;
         {{/html}}
       #end

       {{include reference="XWiki.DeFacto.Une.QuiSommesNous"/}}

    )))
  )))

  (% class="defacto-home-block defacto-home-explorer" %)(((
    = $services.localization.render('defacto.une.agenda') =

    {{carousel reference="Actus.Carousel.WebHome" maxTextLength="150" mode="vertical"/}}
    (% class="defacto-section-link" %)(((
      [[+ Toutes les actus&gt;&gt;Actus.WebHome]]
    )))

    = $services.localization.render('defacto.une.toolbox') =

    {{carousel reference="Explorer.Carousel.WebHome" maxTextLength="150" mode="vertical"/}}

    (% class="defacto-section-link" %)(((
      [[+ Tous les tutos et outils&gt;&gt;Explorer.WebHome]]
    )))

    = $services.localization.render('defacto.une.analysis') =

    {{carousel reference="Comprendre.Carousel.WebHome" maxTextLength="400" mode="vertical"/}}

    (% class="defacto-section-link" %)(((
      [[+ Toutes les analyses&gt;&gt;Comprendre.WebHome]]
    )))
  )))
  #set ($factCheckPick = $uneConfig.getValue('factCheckPick'))
  #if ("$!factCheckPick" != '')
  #set ($factCheckPickHeading = $uneConfig.getValue('factCheckPickHeading'))
  #if ("$!factCheckPickHeading" == '')
    #set ($factCheckPickHeading = $services.localization.render('defacto.une.factCheckPickHeading'))
  #end
  (% class="defacto-home-block defacto-home-factcheck-pick" %)(((
    = $factCheckPickHeading =
    {{pageBox reference="$factCheckPick" pick="true"/}}
    (% class='defacto-factcheck-pick' data-id='$escapetool.xml($factCheckPick)' %)((()))
  )))
  #end

  (% class="defacto-teaser-box defacto-teaser-box-one" %)(((
    (% class="defacto-box-icon" %)(((
      $services.icon.render('envelope')
    )))
     [[Abonnez-vous&gt;&gt;Newsletter.WebHome]] à notre newsletter pour rester informé(e) des dernières publications et des événéments ! [[[+]&gt;&gt;Newsletter.WebHome]]
  )))

  #*
  (% class="defacto-teaser-box defacto-teaser-box-pwa" style="display: none;" %)(((
    (% class="defacto-box-icon" %)(((
      $services.icon.render('phone')
    )))
     {{include reference="XWiki.PWA.WebHome" /}}
  )))
  *#

  (% class="defacto-teaser-box defacto-teaser-box-two" %)(((
    #if ($services.security.authorization.hasAccess('view', 'Administration.WebHome'))

      {{html clean="false"}}
        &lt;a class="defacto-action-edit" href="$xwiki.getURL('XWiki.DeFacto.Une.Teaser', 'edit')" role="button"&gt;
          &lt;span class="defacto-action-edit-icon"&gt;$services.icon.renderHTML('pencil')&lt;/span&gt;
        &lt;/a&gt;
      {{/html}}

    #end
    {{display reference="XWiki.DeFacto.Une.Teaser"/}}
  )))

  (% class="defacto-home-block defacto-home-fact-checks" %)(((

    = $services.localization.render('defacto.une.factChecks') =

    #set ($uneConfigTags = $uneConfig.getValue('tags'))
    {{html clean="false"}}
      &lt;ul class="nav nav-tabs" role="tablist"&gt;
        &lt;li role="presentation" class="active"&gt;&lt;a class="defacto-filter" href="#une" data-filter-type="une" aria-controls="search" role="tab" data-toggle="tab"&gt;À la une&lt;/a&gt;&lt;/li&gt;
        #if ("$!uneConfigTags" != '')
          #foreach ($tag in $uneConfigTags)
            &lt;li role="presentation"&gt;&lt;a class="defacto-filter" href="#$escapetool.xml("tag:$tag")" data-filter-type="tag" data-filter-value="$escapetool.xml($tag)" aria-controls="search" role="tab" data-toggle="tab"&gt;$tag&lt;/a&gt;&lt;/li&gt;
          #end
        #end
        #getThemes($themes)
        #foreach ($theme in $themes)
          &lt;li role="presentation"&gt;&lt;a class="defacto-filter" href="#$escapetool.xml("theme:$theme[0]")" data-filter-type="theme" data-filter-value="$escapetool.xml($theme[0])" aria-controls="search" role="tab" data-toggle="tab"&gt;$theme[1]&lt;/a&gt;&lt;/li&gt;
        #end
        &lt;li role="presentation" class="defacto-filter-media"&gt;
          &lt;div class="btn-group"&gt;
            &lt;button type="button" class="btn dropdown-toggle defacto-media-dropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"&gt;
              Fact-checkeurs&lt;span class="caret"&gt;&lt;/span&gt;
            &lt;/button&gt;
            &lt;ul class="dropdown-menu"&gt;
              #getMedias($mediaList)
              #set ($discard = $mediaList.add(0, ['Tous', 'all']))
              #foreach ($mediaEntry in $mediaList)
                #set ($mediaTitle = $mediaEntry[0])
                #set ($mediaName = $mediaEntry[1])
                &lt;li&gt;
                  &lt;a class="defacto-filter" data-filter-type="media" data-filter-value="$escapetool.xml($mediaName)" href="#$escapetool.xml("media:$mediaName")" aria-controls="search"&gt;
                  &lt;span class="defacto-facet-value"&gt;$mediaTitle&lt;/span&gt;
                  &lt;span class="defacto-facet-count" data-media="$escapetool.xml($mediaName)"&gt;&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
              #end
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    {{/html}}

    (% class="tab-content" %)(((
      (% role="tabpanel" class="tab-pane active" id="search" %)(((
        (% class="search-ui" aria-busy="true" %)(((
        )))
        (% class="defacto-is-loading" %)(((
          {{html clean="false"}}
          &lt;div class="spinner-border text-warning" role="status"&gt;
            &lt;span class="sr-only"&gt;Recherche...&lt;/span&gt;
          &lt;/div&gt;
          {{/html}}
        )))
      )))
    )))
  )))
)))
#end
{{/velocity}}

{{velocity}}
#if ($xcontext.action == 'get')
{{include reference="Main.SolrSearch"/}}
#end
{{/velocity}}</content>
  <object>
    <name>XWiki.DeFacto.Une.HomeSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>4b3bc733-bcbf-4fe4-93a4-8755beb423f6</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Copied from Main.SolrSearch JSX with some customizations to:
 * - enable search on home page directly
 * - add selector "a.defacto-filter" to list of elements which should fire a search 
 *   and a UI reload
 */

require(['jquery', 'xwiki-events-bridge', 'bootstrap'], function($) {
  var state = {};

  var updateSearchUI = function(html) {
    $('.search-ui').replaceWith(html);
    registerPaginationLinks();
    $(document).trigger('xwiki:dom:updated', {'elements': $('.search-ui').toArray()});
    // Hide all media list items except "all", only the non-empty ones will be shown
    $('a.defacto-filter[data-filter-type="media"]').each(function(index, element) {
      var $element = $(element);
      if ($element.attr('data-filter-value') !== 'all')
        $element.parent().css('display', 'none');
    });
    var medias = $('ul.property\\.XWiki\\.DeFacto\\.FactCheck\\.FactCheckClass\\.media_string li');
    // The total needs to be computed by adding all media count since it's not present in the facet block
    var total = 0;
    medias.each(function(index, element) {
      var $element = $(element);
      var itemCount = $element.find('.itemCount');
      var itemName = $element.find('.itemName');
      var href = $(itemName).attr('href');
      var count = parseInt($(itemCount).text());
      total += count;
      const regex = /f_property.XWiki.DeFacto.FactCheck.FactCheckClass.media_string=(Medias.[^&amp;]*)/g;
      var match = regex.exec(href);
      var matches = [];
      while (match != null) {
        matches.push(match[1]);
        match = regex.exec(href);
      }
      // We need the last occurrence between the current facet value is present, if any
      if (matches.length &gt; 0) {
        var media = matches[matches.length - 1];
        $("span.defacto-facet-count[data-media='" + media + "']").text(count);
        var mediaElement = $('a.defacto-filter[data-filter-value="' + media + '"]');
        $(mediaElement).parent().css('display', 'block');
      }
      // A special treatment is needed for the active media filter because its href does not contain its reference
      if (itemName.hasClass('selected') &amp;&amp; state['media']) {
        if (count !== 0) {
          $("span.defacto-facet-count[data-media='" + state['media'] + "']").text(count);
          var mediaElement = $('a.defacto-filter[data-filter-value="' + state['media'] + '"]');
          $(mediaElement).parent().css('display', 'block');
        }
      }
    });
    $("span.defacto-facet-count[data-media='all']").text(total);
  };

  var reloadSearchUI = function(event) {
    event.preventDefault();
    var $this = $(this);
    if ($this.attr('data-filter-type') == 'media') {
      // Mark current media filter as active, other ones as inactive
      $('a.defacto-filter[data-filter-type="media"]').removeClass('active');
      $this.addClass('active');
    }
    // Reset all counters in the "Fact-checkers" tab
    $('span.defacto-facet-count').text('');
    var link = $(event.target).closest('a');
    var filterType = link.attr('data-filter-type');
    var filterValue = link.attr('data-filter-value');
    var href = link.attr('href');
    // Pagination
    const regex = /firstIndex=([^&amp;]*)/g;
    var match = regex.exec(href);
    var firstIndex = 0;
    if (match) {
      firstIndex = match[1];
    }
    updateState(filterType, filterValue);
    search(firstIndex);
  };

  $(window).on('popstate', function(event) {
    // If there is a request in progress, abort it to prevent its callback from being called.
    searchRequest &amp;&amp; searchRequest.abort();
    $('.search-ui').attr('aria-busy', true);
    var state = event.originalEvent.state;
    var getURL = XWiki.currentDocument.getURL('get', window.location.search.substr(1));
    searchRequest = $.get(getURL).done(function(html) {
      updateSearchUI(html);
      setSearchUIState(state);
    });
  });

  // Move the skin extension imports brought by AJAX updates to the head of the page.
  $(document).on('xwiki:dom:updated', function(event, data) {
    // We want to move only the new imports. For this we need to collect the existing imports (once).
    var imports;
    // We don't add the imports directly to the document because jQuery will fetch the JavaScript files, including the
    // ones that have been already loaded. We append the imports to a detached element and add to the head of the page
    // only those that are new. See https://api.jquery.com/jQuery.getScript/#caching-requests .
    $(document.createElement('div')).append($(data.elements).find('noscript.skin-extension-imports').text())
      .find('link, script').each(function() {
        // Collect the existing imports once.
        imports = imports || $('head').find('link, script').map(function () {
          return $(this).attr('href') || $(this).attr('src');
        }).get();
        var url = $(this).attr('href') || $(this).attr('src');
        // Move to the head of the page only the new imports.
        if (url &amp;&amp; imports.indexOf(url) &lt; 0) {
          $('head').append(this);
        }
      });
    // Make sure this code is not executed twice.
    $(data.elements).find('noscript.skin-extension-imports').remove();
  });

  var registerPaginationLinks = function() {
    $([
      '.pagination a',
      '.controlPagination a'
    ].join(',')).click(reloadSearchUI);
  };

  var updateState = function(filterType, filterValue) {
    if (filterType &amp;&amp; filterType !== 'une' &amp;&amp; filterValue) {
      state[filterType] = filterValue;
    }
    // Tags and Themes facets are exclusive, while the Media one is inclusive
    if (filterType == 'tag' || filterType == 'une')
      delete state['theme'];
    if (filterType == 'theme' || filterType == 'une')
      delete state['tag'];
    if (state['media']) {
      // Retrieve media label
      var mediaLabel = 'Fact-checkeurs';
      if (state['media'] != 'all') {
        var element = $('a.defacto-filter[data-filter-value="' + state['media'] + '"] .defacto-facet-value');
        mediaLabel = $(element).text();
      }
      $('.defacto-filter-media .defacto-media-dropdown').html(mediaLabel + '&lt;span class="caret"&gt;&lt;/span&gt;');
    }
  }

  var readStateFromURL = function() {
    if(window.location.hash) {
      var hash = window.location.hash;
      const regex = /[#|]*([^:]*):([^|]*)/g;
      var match = regex.exec(hash);
      while (match != null) {
        if (match.length == 3) {
          state[match[1]] = decodeURIComponent(match[2]);
        }
        match = regex.exec(hash);
      }
    }
    updateState();
  }

  var search = function(firstIndex) {
    $('.search-ui').attr('aria-busy', true);
    $('.search-ui').empty();
    var solrServiceURL = new XWiki.Document('Search', 'Main').getURL('get');
    var parameters =  {
      sort: 'property.XWiki.DeFacto.FactCheck.FactCheckClass.pdate_date',
      sortOrder: 'desc',
      highlight: false,
      facet: true,
      rows: 6,
      firstIndex: firstIndex,
      r: '1',
      f_type: 'DOCUMENT',
      text: '*',
      f_class: 'XWiki.DeFacto.FactCheck.FactCheckClass',
      embedded: true,
      'f_property.XWiki.DeFacto.FactCheck.FactCheckClass.published_boolean': '1'
    };
    var pick = $('.defacto-factcheck-pick');
    if (pick.length &gt; 0) {
      var id = pick.attr('data-id');
      if (id != undefined) {
        parameters['exclude'] =  id;
      }
    }
    if (state['tag'] !== undefined) {
      parameters['f_property.XWiki.TagClass.tags_string'] = state['tag'];
    }
    if (state['theme'] !== undefined) {
      parameters['f_property.XWiki.DeFacto.FactCheck.FactCheckClass.themes_string'] = state['theme'];
    }
    if (state['media'] !== undefined &amp;&amp; state['media'] !== 'all') {
      parameters['f_property.XWiki.DeFacto.FactCheck.FactCheckClass.media_string'] = state['media'];
    }

    var query = $.get(solrServiceURL, parameters);
    query.done(function(data) {
      updateSearchUI(data);
      // Make sure the browser address bar reflects the new state (and thus the new state can be bookmarked).
      var home = new XWiki.Document('WebHome', 'Main');
      var hash = '';
      for (const [key, value] of Object.entries(state)) {
        hash += '|' + key + ':' + value;
      }
      window.history.replaceState(state, document.title, home.getURL() + '#'  + hash);
    });
    query.fail(function(error) {
      console.log('error: ' + error);
    });
  }

  $('a.defacto-filter').on('click', reloadSearchUI);

  readStateFromURL();

  var tab;
  if (state['tag']) {
    tab = $('.nav-tabs a[data-filter-value="' + state['tag'] + '"]');
  } else if (state['theme']) {
    tab = $('.nav-tabs a[data-filter-value="' + state['theme'] + '"]');
  }
  if (tab !== undefined &amp;&amp; tab.tab !== undefined) {
    tab.tab('show');
  }
  search(0);

});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>XWiki.DeFacto.Une.HomeSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>8bb971c7-6a5a-40c4-b988-962d43dfd847</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#xwikicontent {
  overflow-y: inherit; /** Without this rule, the dynamic fact-check search theme can cause a vertical scrollbar to appear. */
}

#hierarchy {
  display: none;
}

.document-header {
  display: none;
  + hr {
    display: none;
  }
}

.defacto-home {
  display: grid;
  grid-row-gap: 10px;
  .wikiexternallink {
    background: none;
    padding: 0;
  }

  .defacto-home-factcheck-pick {
    grid-row-start: 1;
    display: flex;
    flex-direction: column;
    padding-bottom: 19px;

    .defacto-box {
      flex-direction: column;
      background: #f0f0f0;
      margin-bottom: 0;
      flex-grow: 1;
      h2 {
        font-size: 26px;
      }
      .defacto-box-image {
        flex-basis: 50%;
        img {
          width: 100%;
          object-fit: cover;
          max-height: inherit;
        }
      }
      .defacto-box-body {
        flex-basis: 50%;
        margin-right: 1em;
      }
    }
  }

  .defacto-home-about {
    grid-row-start: 7;
    display: flex;
    flex-direction: column;
    .defacto-box {
      background: #7ba3b5;
      color: white;
      font-weight: 400;
      flex-grow: 1;
    }
    .xwiki-defacto-logos {
      display: grid;
      grid-template-columns: 50% 50%;
      grid-row-gap: 0;
      align-items: center;
      a {
        text-align: center;
        img {
          align-self: center;
          padding: 0.5em;
          max-width: 130px;
        }
      }
    }
  }

  .defacto-section-link {
    text-align: right;
    a {
      color: @blue !important;
      font-weight: normal !important;
    }
  }

  /**
  .defacto-themes {
    margin: 0;
    .defacto-themes-dropdown {
      padding: 10px 15px;
      box-shadow: none;
      font-size: inherit;
      border: 0;
      background: @yellow;
      .caret {
        margin-left: 0.5em;
      }
    }
    .dropdown-menu {
      font-size: inherit;
    }
  }*/

  .xwiki-carousel {
    /** height: 500px; */
  }

  .defacto-home-block &gt; h1 {
    text-transform: uppercase;
  }

  .defacto-teaser-box {
    .defacto-box-icon {
      float: left;
      margin-right: 0.5em;
      font-size: 2.5em;
      color: @darkyellow;
    }
  }

  .defacto-teaser-box-one {
    grid-row-start: 2;
    border: 1px solid @darkyellow;
    padding: 1em;
    font-size: 1.2em;
  }

  .defacto-teaser-box-pwa {
    grid-row-start: 3;
    border: 1px solid @darkyellow;
    padding: 0.5em 1em;
    display: flex;
    align-items: center;
    .defacto-box-icon {
      margin-left: 0.2em;
      font-size: 3em;
    }
    p {
      text-align: center;
      flex-grow: 1;
      margin: 0;
      .btn {
        background: @yellow;
        background-image: none;
        border: 0;
      }
    }
  }

  .defacto-teaser-box-two {
    grid-row-start: 4;
    border: 1px solid @darkyellow;
    padding: 1.5em;
    background: url("$xwiki.getAttachmentURL('XWiki.DeFacto.Une.Teaser', 'visuel.jpg')");
    background-position: 20% 50%;
    color: white;
    .defacto-teaser {
      /** color: white; */
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: center;
      .defacto-teaser-left {
        font-size: 26px;
        margin: 0 2em 0 1em;
        text-align: center;
        p {
          background: @yellow;
          padding: 0.3em 0.6em;
          color: black;
        }
      }
      .defacto-teaser-right {
        font-size: 1.2em;
        a {
          color: #d1173e;
          font-weight: 500;
        }
        .defacto-participer {
          text-align: center;
          margin-top: 1em;
          .defacto-participer-label {
            background: #d1173e;
            padding: 0.5em 1em;
            border-radius: 30px;
            text-transform: uppercase;
            font-weight: 500;
            font-size: 12px;
            a {
              color: white;
            }
          }
        }
      }
    }
  }

  .defacto-home-fact-checks {
    grid-row-start: 5;

    .nav-tabs {
      border-bottom: 1px solid @yellow;
      &gt; li {
        margin-top: 0.2em;
        &amp;.active {
          &gt; a, &gt; a:hover, &gt; a:focus {
            background: white;
            border-bottom-color: transparent;
            color: inherit;
          }
        }
        &gt; a {
          border: 1px solid @yellow;
          background-color: @yellow;
          color: black;
        }
        &gt; a:hover, &gt; a:focus {
          background: white;
          border-bottom-color: transparent;
        }
        &amp;.defacto-filter-media {
          .btn-group {
            margin: 0;
            .defacto-media-dropdown {
              font-size: 18px;
              background: #7ba3b5;
              color: white;
              padding: 10px 15px;
              border-radius: 4px 4px 0 0;
              .caret {
                margin-left: 0.5em;
              }
            }
            .dropdown-menu {
              min-width: 275px;
              &gt; li &gt; a {
                display: flex;
                justify-content: space-between;
              }
            }
          }
        }
      }
    }
    .tab-content {
      margin-top: 1em;
    }
  }

  /*
  .defacto-teaser {
    display: flex;
    .defacto-teaser-box {
      &amp;.defacto-teaser-box-one, &amp;.defacto-teaser-box-two {
        background: @darkgrey;
        color: white;
        padding: 1em;
      }
    }
  }*/

  .defacto-home-about, .defacto-home-explorer {
    p {
      a {
      color: white;
      font-weight: 500;
        &amp;:hover {
          color: white;
        }
      }
    }
  }
  .defacto-home-explorer {
    grid-row-start: 6;
  }
}

.search-form.row {
  display: none;
}

.search-facets {
  display: none;
}

.defacto-home {
  .search-results.defacto-search-results {
    padding: 0;
    border-top: none;
  }
}

.defacto-home {
  .defacto-home-about .defacto-box, .defacto-teaser-box {
    position: relative;
    .defacto-action-edit {
      position: absolute;
      top: 10px;
      right: 10px;
      background-color: #fff;
      font-size: 0.8em;
      text-align: center;
      width: 2em;
      padding: 4px;
      border: 1px solid #ddd;
      border-radius: 4px;
      color: #333;
    }
  }
}

.search-ui + .defacto-is-loading {
  display: none;
}

.spinner-border {
  display: inline-block;
  width: 4rem;
  height: 4rem;
  vertical-align: text-bottom;
  border: 3px solid @yellow;
  border-right-color: @yellow;
  border-right-color: transparent;
  border-radius: 50%;
  animation: spinner-border 1s linear infinite;
}

@keyframes spinner-border {
  to { transform: rotate(360deg); }
}

.search-ui[aria-busy="true"] + .defacto-is-loading {
  display: block;
  height: 300px;
  text-align: center;
  margin: 5em;
}


@media (min-width: @screen-lg-min) {
  .defacto-home {
    grid-template-columns: ~"[col1-start] 35%  [col2-start] 65%  [col2-end]";
    grid-template-rows: ~"[row1-start] fit-content(100%) [row2-start] fit-content(100%) [row3-start] 10fr [row3-end]";

    .defacto-home-factcheck-pick {
      grid-column: ~"col2-start / col2-end";
      grid-row: row1-start;
      margin-left: 30px;
    }

    .defacto-home-fact-checks {
      grid-column: ~"col2-start / col2-end";
      grid-row: row3-start;
      margin-left: 30px;
    }

    .defacto-home-about {
      grid-column: col1-start;
      grid-row: ~"row1-start";
    }

    .defacto-teaser-box-one {
      grid-column: col1-start;
      grid-row: row2-start;
    }

    .defacto-teaser-box-two {
      grid-column: col2-start;
      grid-row: row2-start;
      margin-left: 30px;
    }
    .defacto-teaser-box-pwa {
      display: none;
    }

    .defacto-home-explorer {
      grid-column: col1-start;
      grid-row: ~"row3-start";
    }
    .defacto-box {
      overflow: hidden;
    }

  }
  .xcontent {
    width: inherit;
    margin: auto;
  }
}


@media (min-width: @screen-lg-min) {
  .defacto-home {
    grid-template-columns: ~"[col1-start] 26%  [col2-start] 74%  [col2-end]";
    .defacto-home-factcheck-pick {
      grid-row-start: 1;
      .defacto-box {
        flex-direction: row-reverse;
        h2 {
          font-size: 26px;
        }
        .defacto-box-image {
          flex-basis: 50%;
          img {
            width: 100%;
            height: 300px;
            object-fit: cover;
          }
        }
        .defacto-box-body {
          flex-basis: 50%;
          margin-right: 1em;
        }
      }
    }
    .defacto-home-about {
      .xwiki-defacto-logos {
        a {
          img {
            padding: 1em;
            max-width: 150px;
          }
        }
      }
    }
    .defacto-teaser-box-two {
      padding: 1em;
      .defacto-teaser {
        flex-direction: row;
        .defacto-teaser-right {
          .defacto-participer {
            .defacto-participer-label {
              font-size: inherit;
            }
          }
        }
      }
    }
  }
}

@media (min-width: 1600px) {
  .defacto-home {
    .defacto-home-about {
      .xwiki-defacto-logos {
        a {
          img {
            padding: 0.5em 1em;
            max-width: 180px;
          }
        }
      }
    }
  }
}</code>
    </property>
    <property>
      <contentType>LESS</contentType>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>

<?xml version="1.1" encoding="UTF-8"?>

<xwikidoc version="1.4" reference="XWiki.DeFacto.RssUtils" locale="">
  <web>XWiki.DeFacto</web>
  <name>RssUtils</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>RssUtils</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
import com.rometools.rome.io.*;
import com.rometools.rome.feed.synd.*;
import org.xwiki.security.authorization.Right;

class RssUtils {

  RssUtils() {
    super();
  }

  /** Method to create a generic feed. Used both by XWiki.DeFacto.Rss and and XWiki.DeFacto.FactCheck.Rss */
  SyndFeed createFeed(pageList, services, xwiki, includeDescription, xcontext) {
    def SyndFeed feed = new SyndFeedImpl();
    feed.setFeedType("rss_2.0");
    feed.setTitle('DE FACTO');
    feed.setLink('https://defacto-observatoire.fr/');
    feed.setDescription("DE FACTO – Des clés pour mieux s'informer");
    feed.setUri('https://defacto-observatoire.fr/')
    def List&lt;SyndEntry&gt; entries = new ArrayList&lt;&gt;();
    pageList.each{ result -&gt;
      if (services.security.authorization.hasAccess(Right.VIEW, services.model.resolveDocument(result[0]))) {
        def SyndEntry entry = new SyndEntryImpl();
        def List&lt;SyndPerson&gt; eventAuthors = new ArrayList&lt;SyndPerson&gt;();
        def page = xwiki.getDocument(result[0])

        // Define the GUID
        entry.setUri(page.fullName);
        entry.setLink(page.getExternalURL());
        // Set the entry title
        entry.setTitle(page.displayTitle);
        if (includeDescription == true) {
          // Add the description to the entry
          def SyndContent entryDescription = new SyndContentImpl();
          // set published date, language, enclosure etc.
          def obj = page.getObject('XWiki.DeFacto.Resource.ResourceClass');
          if (obj != null) {
            def abstractString = obj.getValue('abstract');
            entryDescription.setValue(abstractString);
            entry.setDescription(entryDescription);
            def contents = new java.util.ArrayList();
            def content = new SyndContentImpl();
            content.setValue(page.displayDocument());
            contents.add(content);
            entry.setContents(contents);
            def headerImage = obj.getValue('coverImage');
            if (headerImage != null &amp;&amp; headerImage != '') {
              def attachment = page.getAttachment(headerImage);
              def mimeType = attachment.getMimeType();
              def size = attachment.getLongSize();
              def uri = entry.getUri();
              def headerImageUrl = xwiki.getAttachmentURL(uri, headerImage);
              def spaces = services.model.serialize(page.getDocumentReference().getLastSpaceReference(), 'compactwiki')
              def url = xcontext.getURLFactory().createAttachmentURL(headerImage, spaces, 'WebHome', "download", "", xcontext.context)
              def enclosures = new ArrayList();
              def enclosure = new SyndEnclosureImpl();
              enclosure.setUrl(url.toString());
              enclosure.setType(mimeType);
              enclosure.setLength(size);
              enclosures.add(enclosure);
              entry.setEnclosures(enclosures);
            }
          } else {
            entryDescription.setType("text/html");
            def content = page.content;
            def xdom = services.rendering.parse(content, "xwiki/2.1");
            def renderedContent = services.rendering.render(xdom , "xhtml/1.0");
            entryDescription.setValue(renderedContent);
            entry.setDescription(entryDescription);
          }
        }

        entry.setPublishedDate(page.getCreationDate());
        entries.add(entry);
      }
    }
    feed.setEntries(entries);
    return feed;
  }

  void printFeed(feed, out, xcontext, response) {
    def SyndFeedOutput output = new SyndFeedOutput();
    if (xcontext.action == 'get') {
      response.setContentType("application/xml");
      def feedStr = output.outputString(feed, true);
      response.setCharacterEncoding('utf-8')
      response.writer.write(feedStr)
      response.flushBuffer()
      xcontext.setFinished(true)
    } else {
      out.println("{{code language='xml'}}")
      out.println(output.outputString(feed));
      out.println("{{/code}}")
    }
  }
}

{{/groovy}}</content>
</xwikidoc>
